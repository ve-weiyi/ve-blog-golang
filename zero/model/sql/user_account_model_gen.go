// Code generated by goctl. DO NOT EDIT.

package sql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userAccountFieldNames          = builder.RawFieldNames(&UserAccount{})
	userAccountRows                = strings.Join(userAccountFieldNames, ",")
	userAccountRowsExpectAutoSet   = strings.Join(stringx.Remove(userAccountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userAccountRowsWithPlaceHolder = strings.Join(stringx.Remove(userAccountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userAccountModel interface {
		Insert(ctx context.Context, data *UserAccount) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserAccount, error)
		FindOneByUsername(ctx context.Context, username string) (*UserAccount, error)
		Update(ctx context.Context, data *UserAccount) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserAccountModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserAccount struct {
		Id           int64     `db:"id"`            // id
		Username     string    `db:"username"`      // 用户名
		Password     string    `db:"password"`      // 密码
		Status       int64     `db:"status"`        // 状态: -1删除 0正常 1禁用
		RegisterType string    `db:"register_type"` // 注册方式
		IpAddress    string    `db:"ip_address"`    // 注册ip
		IpSource     string    `db:"ip_source"`     // 注册ip 源
		CreatedAt    time.Time `db:"created_at"`    // 创建时间
		UpdatedAt    time.Time `db:"updated_at"`    // 更新时间
	}
)

func newUserAccountModel(conn sqlx.SqlConn) *defaultUserAccountModel {
	return &defaultUserAccountModel{
		conn:  conn,
		table: "`user_account`",
	}
}

func (m *defaultUserAccountModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserAccountModel) FindOne(ctx context.Context, id int64) (*UserAccount, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userAccountRows, m.table)
	var resp UserAccount
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAccountModel) FindOneByUsername(ctx context.Context, username string) (*UserAccount, error) {
	var resp UserAccount
	query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", userAccountRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAccountModel) Insert(ctx context.Context, data *UserAccount) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, userAccountRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Username, data.Password, data.Status, data.RegisterType, data.IpAddress, data.IpSource)
	return ret, err
}

func (m *defaultUserAccountModel) Update(ctx context.Context, newData *UserAccount) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userAccountRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Username, newData.Password, newData.Status, newData.RegisterType, newData.IpAddress, newData.IpSource, newData.Id)
	return err
}

func (m *defaultUserAccountModel) tableName() string {
	return m.table
}
