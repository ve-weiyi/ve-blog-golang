// Code generated by goctl. DO NOT EDIT.
// Source: account.proto

package menurpc

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/zero/rpc/pb/account"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Api                = account.Api
	ApiDetailsDTO      = account.ApiDetailsDTO
	ApiPageResp        = account.ApiPageResp
	BatchResult        = account.BatchResult
	EmptyReq           = account.EmptyReq
	EmptyResp          = account.EmptyResp
	IdReq              = account.IdReq
	IdsReq             = account.IdsReq
	LoginReq           = account.LoginReq
	LoginResp          = account.LoginResp
	Menu               = account.Menu
	MenuDetailsDTO     = account.MenuDetailsDTO
	MenuPageResp       = account.MenuPageResp
	OauthLoginReq      = account.OauthLoginReq
	OauthLoginUrlResp  = account.OauthLoginUrlResp
	PageCondition      = account.PageCondition
	PageLimit          = account.PageLimit
	PageQuery          = account.PageQuery
	PageResult         = account.PageResult
	PageSort           = account.PageSort
	ResetPasswordReq   = account.ResetPasswordReq
	Role               = account.Role
	RoleDTO            = account.RoleDTO
	RoleDetailsDTO     = account.RoleDetailsDTO
	RolePageResp       = account.RolePageResp
	RoleResourceResp   = account.RoleResourceResp
	SyncMenuRequest    = account.SyncMenuRequest
	UpdateRoleApisReq  = account.UpdateRoleApisReq
	UpdateRoleMenusReq = account.UpdateRoleMenusReq
	UserEmailReq       = account.UserEmailReq

	MenuRpc interface {
		// 创建菜单
		CreateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error)
		// 更新菜单
		UpdateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error)
		// 删除菜单
		DeleteMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResult, error)
		// 批量删除菜单
		DeleteMenuList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResult, error)
		// 查询菜单
		FindMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Menu, error)
		// 分页获取菜单列表
		FindMenuList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*MenuPageResp, error)
		// 同步菜单列表
		SyncMenuList(ctx context.Context, in *SyncMenuRequest, opts ...grpc.CallOption) (*BatchResult, error)
		// 清空菜单列表
		CleanMenuList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error)
	}

	defaultMenuRpc struct {
		cli zrpc.Client
	}
)

func NewMenuRpc(cli zrpc.Client) MenuRpc {
	return &defaultMenuRpc{
		cli: cli,
	}
}

// 创建菜单
func (m *defaultMenuRpc) CreateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error) {
	client := account.NewMenuRpcClient(m.cli.Conn())
	return client.CreateMenu(ctx, in, opts...)
}

// 更新菜单
func (m *defaultMenuRpc) UpdateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error) {
	client := account.NewMenuRpcClient(m.cli.Conn())
	return client.UpdateMenu(ctx, in, opts...)
}

// 删除菜单
func (m *defaultMenuRpc) DeleteMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResult, error) {
	client := account.NewMenuRpcClient(m.cli.Conn())
	return client.DeleteMenu(ctx, in, opts...)
}

// 批量删除菜单
func (m *defaultMenuRpc) DeleteMenuList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResult, error) {
	client := account.NewMenuRpcClient(m.cli.Conn())
	return client.DeleteMenuList(ctx, in, opts...)
}

// 查询菜单
func (m *defaultMenuRpc) FindMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Menu, error) {
	client := account.NewMenuRpcClient(m.cli.Conn())
	return client.FindMenu(ctx, in, opts...)
}

// 分页获取菜单列表
func (m *defaultMenuRpc) FindMenuList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*MenuPageResp, error) {
	client := account.NewMenuRpcClient(m.cli.Conn())
	return client.FindMenuList(ctx, in, opts...)
}

// 同步菜单列表
func (m *defaultMenuRpc) SyncMenuList(ctx context.Context, in *SyncMenuRequest, opts ...grpc.CallOption) (*BatchResult, error) {
	client := account.NewMenuRpcClient(m.cli.Conn())
	return client.SyncMenuList(ctx, in, opts...)
}

// 清空菜单列表
func (m *defaultMenuRpc) CleanMenuList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := account.NewMenuRpcClient(m.cli.Conn())
	return client.CleanMenuList(ctx, in, opts...)
}
