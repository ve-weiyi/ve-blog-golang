// Code generated by goctl. DO NOT EDIT.
// Source: account.proto

package userrpc

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/zero/rpc/pb/account"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Api                  = account.Api
	ApiDetailsDTO        = account.ApiDetailsDTO
	ApiPageResp          = account.ApiPageResp
	BatchResult          = account.BatchResult
	EmptyReq             = account.EmptyReq
	EmptyResp            = account.EmptyResp
	IdReq                = account.IdReq
	IdsReq               = account.IdsReq
	LoginHistory         = account.LoginHistory
	LoginHistoryPageResp = account.LoginHistoryPageResp
	LoginReq             = account.LoginReq
	LoginResp            = account.LoginResp
	Menu                 = account.Menu
	MenuDetailsDTO       = account.MenuDetailsDTO
	MenuPageResp         = account.MenuPageResp
	OauthLoginReq        = account.OauthLoginReq
	OauthLoginUrlResp    = account.OauthLoginUrlResp
	PageCondition        = account.PageCondition
	PageLimit            = account.PageLimit
	PageQuery            = account.PageQuery
	PageResult           = account.PageResult
	PageSort             = account.PageSort
	ResetPasswordReq     = account.ResetPasswordReq
	Role                 = account.Role
	RoleDTO              = account.RoleDTO
	RoleDetailsDTO       = account.RoleDetailsDTO
	RolePageResp         = account.RolePageResp
	RoleResourcesResp    = account.RoleResourcesResp
	SyncMenuRequest      = account.SyncMenuRequest
	UpdateRoleApisReq    = account.UpdateRoleApisReq
	UpdateRoleMenusReq   = account.UpdateRoleMenusReq
	UserEmailReq         = account.UserEmailReq
	UserInfoReq          = account.UserInfoReq
	UserInfoResp         = account.UserInfoResp

	UserRpc interface {
		// 查询用户登录历史
		FindUserLoginHistoryList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*LoginHistoryPageResp, error)
		// 批量删除登录历史
		DeleteUserLoginHistoryList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 获取用户接口权限
		GetUserApis(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*ApiPageResp, error)
		// 获取用户菜单权限
		GetUserMenus(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*MenuPageResp, error)
		// 获取用户角色信息
		GetUserRoles(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RolePageResp, error)
		// 获取用户信息
		GetUserInfo(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		// 修改用户信息
		UpdateUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		// 更换用户头像
		UpdateUserAvatar(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*UserInfoResp, error)
	}

	defaultUserRpc struct {
		cli zrpc.Client
	}
)

func NewUserRpc(cli zrpc.Client) UserRpc {
	return &defaultUserRpc{
		cli: cli,
	}
}

// 查询用户登录历史
func (m *defaultUserRpc) FindUserLoginHistoryList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*LoginHistoryPageResp, error) {
	client := account.NewUserRpcClient(m.cli.Conn())
	return client.FindUserLoginHistoryList(ctx, in, opts...)
}

// 批量删除登录历史
func (m *defaultUserRpc) DeleteUserLoginHistoryList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := account.NewUserRpcClient(m.cli.Conn())
	return client.DeleteUserLoginHistoryList(ctx, in, opts...)
}

// 获取用户接口权限
func (m *defaultUserRpc) GetUserApis(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*ApiPageResp, error) {
	client := account.NewUserRpcClient(m.cli.Conn())
	return client.GetUserApis(ctx, in, opts...)
}

// 获取用户菜单权限
func (m *defaultUserRpc) GetUserMenus(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*MenuPageResp, error) {
	client := account.NewUserRpcClient(m.cli.Conn())
	return client.GetUserMenus(ctx, in, opts...)
}

// 获取用户角色信息
func (m *defaultUserRpc) GetUserRoles(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RolePageResp, error) {
	client := account.NewUserRpcClient(m.cli.Conn())
	return client.GetUserRoles(ctx, in, opts...)
}

// 获取用户信息
func (m *defaultUserRpc) GetUserInfo(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := account.NewUserRpcClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

// 修改用户信息
func (m *defaultUserRpc) UpdateUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := account.NewUserRpcClient(m.cli.Conn())
	return client.UpdateUserInfo(ctx, in, opts...)
}

// 更换用户头像
func (m *defaultUserRpc) UpdateUserAvatar(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := account.NewUserRpcClient(m.cli.Conn())
	return client.UpdateUserAvatar(ctx, in, opts...)
}
