// Code generated by goctl. DO NOT EDIT.
// Source: account.proto

package apirpc

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/zero/rpc/pb/account"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Api                = account.Api
	BatchResult        = account.BatchResult
	EmptyReq           = account.EmptyReq
	EmptyResp          = account.EmptyResp
	IdReq              = account.IdReq
	IdsReq             = account.IdsReq
	LoginReq           = account.LoginReq
	LoginResp          = account.LoginResp
	OauthLoginReq      = account.OauthLoginReq
	OauthLoginUrlResp  = account.OauthLoginUrlResp
	PageCondition      = account.PageCondition
	PageLimit          = account.PageLimit
	PageQuery          = account.PageQuery
	PageResult         = account.PageResult
	PageSort           = account.PageSort
	ResetPasswordReq   = account.ResetPasswordReq
	Role               = account.Role
	RoleDTO            = account.RoleDTO
	RoleDetailsDTO     = account.RoleDetailsDTO
	RolePageResp       = account.RolePageResp
	UpdateRoleApisReq  = account.UpdateRoleApisReq
	UpdateRoleMenusReq = account.UpdateRoleMenusReq
	UserEmailReq       = account.UserEmailReq

	ApiRpc interface {
		CreateApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*Api, error)
		UpdateApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*Api, error)
		DeleteApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error)
		FindApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Api, error)
		DeleteListApi(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResult, error)
		FindListApi(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageResult, error)
	}

	defaultApiRpc struct {
		cli zrpc.Client
	}
)

func NewApiRpc(cli zrpc.Client) ApiRpc {
	return &defaultApiRpc{
		cli: cli,
	}
}

func (m *defaultApiRpc) CreateApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*Api, error) {
	client := account.NewApiRpcClient(m.cli.Conn())
	return client.CreateApi(ctx, in, opts...)
}

func (m *defaultApiRpc) UpdateApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*Api, error) {
	client := account.NewApiRpcClient(m.cli.Conn())
	return client.UpdateApi(ctx, in, opts...)
}

func (m *defaultApiRpc) DeleteApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := account.NewApiRpcClient(m.cli.Conn())
	return client.DeleteApi(ctx, in, opts...)
}

func (m *defaultApiRpc) FindApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Api, error) {
	client := account.NewApiRpcClient(m.cli.Conn())
	return client.FindApi(ctx, in, opts...)
}

func (m *defaultApiRpc) DeleteListApi(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResult, error) {
	client := account.NewApiRpcClient(m.cli.Conn())
	return client.DeleteListApi(ctx, in, opts...)
}

func (m *defaultApiRpc) FindListApi(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageResult, error) {
	client := account.NewApiRpcClient(m.cli.Conn())
	return client.FindListApi(ctx, in, opts...)
}
