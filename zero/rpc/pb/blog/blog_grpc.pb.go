// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: blog.proto

package blog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlogRpcClient is the client API for BlogRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogRpcClient interface {
	// 连接检测
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
}

type blogRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogRpcClient(cc grpc.ClientConnInterface) BlogRpcClient {
	return &blogRpcClient{cc}
}

func (c *blogRpcClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/blog.BlogRpc/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogRpcServer is the server API for BlogRpc service.
// All implementations must embed UnimplementedBlogRpcServer
// for forward compatibility
type BlogRpcServer interface {
	// 连接检测
	Ping(context.Context, *PingReq) (*PingResp, error)
	mustEmbedUnimplementedBlogRpcServer()
}

// UnimplementedBlogRpcServer must be embedded to have forward compatible implementations.
type UnimplementedBlogRpcServer struct {
}

func (UnimplementedBlogRpcServer) Ping(context.Context, *PingReq) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBlogRpcServer) mustEmbedUnimplementedBlogRpcServer() {}

// UnsafeBlogRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogRpcServer will
// result in compilation errors.
type UnsafeBlogRpcServer interface {
	mustEmbedUnimplementedBlogRpcServer()
}

func RegisterBlogRpcServer(s grpc.ServiceRegistrar, srv BlogRpcServer) {
	s.RegisterService(&BlogRpc_ServiceDesc, srv)
}

func _BlogRpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogRpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogRpc/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogRpcServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogRpc_ServiceDesc is the grpc.ServiceDesc for BlogRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.BlogRpc",
	HandlerType: (*BlogRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _BlogRpc_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

// ApiRpcClient is the client API for ApiRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiRpcClient interface {
	CreateApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*EmptyReq, error)
	UpdateApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*Api, error)
	DeleteApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error)
	FindApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Api, error)
	DeleteListApi(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	FindListApi(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageResp, error)
}

type apiRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewApiRpcClient(cc grpc.ClientConnInterface) ApiRpcClient {
	return &apiRpcClient{cc}
}

func (c *apiRpcClient) CreateApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*EmptyReq, error) {
	out := new(EmptyReq)
	err := c.cc.Invoke(ctx, "/blog.ApiRpc/CreateApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) UpdateApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*Api, error) {
	out := new(Api)
	err := c.cc.Invoke(ctx, "/blog.ApiRpc/UpdateApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) DeleteApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/blog.ApiRpc/DeleteApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) FindApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Api, error) {
	out := new(Api)
	err := c.cc.Invoke(ctx, "/blog.ApiRpc/FindApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) DeleteListApi(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, "/blog.ApiRpc/DeleteListApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) FindListApi(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageResp, error) {
	out := new(PageResp)
	err := c.cc.Invoke(ctx, "/blog.ApiRpc/FindListApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiRpcServer is the server API for ApiRpc service.
// All implementations must embed UnimplementedApiRpcServer
// for forward compatibility
type ApiRpcServer interface {
	CreateApi(context.Context, *Api) (*EmptyReq, error)
	UpdateApi(context.Context, *Api) (*Api, error)
	DeleteApi(context.Context, *IdReq) (*EmptyResp, error)
	FindApi(context.Context, *IdReq) (*Api, error)
	DeleteListApi(context.Context, *IdsReq) (*BatchResp, error)
	FindListApi(context.Context, *PageQuery) (*PageResp, error)
	mustEmbedUnimplementedApiRpcServer()
}

// UnimplementedApiRpcServer must be embedded to have forward compatible implementations.
type UnimplementedApiRpcServer struct {
}

func (UnimplementedApiRpcServer) CreateApi(context.Context, *Api) (*EmptyReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApi not implemented")
}
func (UnimplementedApiRpcServer) UpdateApi(context.Context, *Api) (*Api, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApi not implemented")
}
func (UnimplementedApiRpcServer) DeleteApi(context.Context, *IdReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApi not implemented")
}
func (UnimplementedApiRpcServer) FindApi(context.Context, *IdReq) (*Api, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindApi not implemented")
}
func (UnimplementedApiRpcServer) DeleteListApi(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteListApi not implemented")
}
func (UnimplementedApiRpcServer) FindListApi(context.Context, *PageQuery) (*PageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindListApi not implemented")
}
func (UnimplementedApiRpcServer) mustEmbedUnimplementedApiRpcServer() {}

// UnsafeApiRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiRpcServer will
// result in compilation errors.
type UnsafeApiRpcServer interface {
	mustEmbedUnimplementedApiRpcServer()
}

func RegisterApiRpcServer(s grpc.ServiceRegistrar, srv ApiRpcServer) {
	s.RegisterService(&ApiRpc_ServiceDesc, srv)
}

func _ApiRpc_CreateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Api)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).CreateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.ApiRpc/CreateApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).CreateApi(ctx, req.(*Api))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_UpdateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Api)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).UpdateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.ApiRpc/UpdateApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).UpdateApi(ctx, req.(*Api))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_DeleteApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).DeleteApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.ApiRpc/DeleteApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).DeleteApi(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_FindApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).FindApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.ApiRpc/FindApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).FindApi(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_DeleteListApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).DeleteListApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.ApiRpc/DeleteListApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).DeleteListApi(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_FindListApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).FindListApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.ApiRpc/FindListApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).FindListApi(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiRpc_ServiceDesc is the grpc.ServiceDesc for ApiRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.ApiRpc",
	HandlerType: (*ApiRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApi",
			Handler:    _ApiRpc_CreateApi_Handler,
		},
		{
			MethodName: "UpdateApi",
			Handler:    _ApiRpc_UpdateApi_Handler,
		},
		{
			MethodName: "DeleteApi",
			Handler:    _ApiRpc_DeleteApi_Handler,
		},
		{
			MethodName: "FindApi",
			Handler:    _ApiRpc_FindApi_Handler,
		},
		{
			MethodName: "DeleteListApi",
			Handler:    _ApiRpc_DeleteListApi_Handler,
		},
		{
			MethodName: "FindListApi",
			Handler:    _ApiRpc_FindListApi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

// ArticleRpcClient is the client API for ArticleRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleRpcClient interface {
	CreateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error)
	UpdateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error)
	DeleteArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error)
	FindArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Article, error)
	DeleteArticleList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	FindArticleList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageResp, error)
}

type articleRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleRpcClient(cc grpc.ClientConnInterface) ArticleRpcClient {
	return &articleRpcClient{cc}
}

func (c *articleRpcClient) CreateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/blog.ArticleRpc/CreateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) UpdateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/blog.ArticleRpc/UpdateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) DeleteArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/blog.ArticleRpc/DeleteArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/blog.ArticleRpc/FindArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) DeleteArticleList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, "/blog.ArticleRpc/DeleteArticleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindArticleList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageResp, error) {
	out := new(PageResp)
	err := c.cc.Invoke(ctx, "/blog.ArticleRpc/FindArticleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleRpcServer is the server API for ArticleRpc service.
// All implementations must embed UnimplementedArticleRpcServer
// for forward compatibility
type ArticleRpcServer interface {
	CreateArticle(context.Context, *Article) (*Article, error)
	UpdateArticle(context.Context, *Article) (*Article, error)
	DeleteArticle(context.Context, *IdReq) (*EmptyResp, error)
	FindArticle(context.Context, *IdReq) (*Article, error)
	DeleteArticleList(context.Context, *IdsReq) (*BatchResp, error)
	FindArticleList(context.Context, *PageQuery) (*PageResp, error)
	mustEmbedUnimplementedArticleRpcServer()
}

// UnimplementedArticleRpcServer must be embedded to have forward compatible implementations.
type UnimplementedArticleRpcServer struct {
}

func (UnimplementedArticleRpcServer) CreateArticle(context.Context, *Article) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedArticleRpcServer) UpdateArticle(context.Context, *Article) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedArticleRpcServer) DeleteArticle(context.Context, *IdReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedArticleRpcServer) FindArticle(context.Context, *IdReq) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArticle not implemented")
}
func (UnimplementedArticleRpcServer) DeleteArticleList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticleList not implemented")
}
func (UnimplementedArticleRpcServer) FindArticleList(context.Context, *PageQuery) (*PageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArticleList not implemented")
}
func (UnimplementedArticleRpcServer) mustEmbedUnimplementedArticleRpcServer() {}

// UnsafeArticleRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleRpcServer will
// result in compilation errors.
type UnsafeArticleRpcServer interface {
	mustEmbedUnimplementedArticleRpcServer()
}

func RegisterArticleRpcServer(s grpc.ServiceRegistrar, srv ArticleRpcServer) {
	s.RegisterService(&ArticleRpc_ServiceDesc, srv)
}

func _ArticleRpc_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.ArticleRpc/CreateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).CreateArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.ArticleRpc/UpdateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).UpdateArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.ArticleRpc/DeleteArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).DeleteArticle(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.ArticleRpc/FindArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindArticle(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_DeleteArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).DeleteArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.ArticleRpc/DeleteArticleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).DeleteArticleList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.ArticleRpc/FindArticleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindArticleList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleRpc_ServiceDesc is the grpc.ServiceDesc for ArticleRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.ArticleRpc",
	HandlerType: (*ArticleRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArticle",
			Handler:    _ArticleRpc_CreateArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _ArticleRpc_UpdateArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _ArticleRpc_DeleteArticle_Handler,
		},
		{
			MethodName: "FindArticle",
			Handler:    _ArticleRpc_FindArticle_Handler,
		},
		{
			MethodName: "DeleteArticleList",
			Handler:    _ArticleRpc_DeleteArticleList_Handler,
		},
		{
			MethodName: "FindArticleList",
			Handler:    _ArticleRpc_FindArticleList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

// MenuRpcClient is the client API for MenuRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MenuRpcClient interface {
	CreateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error)
	UpdateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error)
	DeleteMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error)
	FindMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Menu, error)
	DeleteMenuList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	FindMenuList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageResp, error)
}

type menuRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewMenuRpcClient(cc grpc.ClientConnInterface) MenuRpcClient {
	return &menuRpcClient{cc}
}

func (c *menuRpcClient) CreateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/blog.MenuRpc/CreateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) UpdateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/blog.MenuRpc/UpdateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) DeleteMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/blog.MenuRpc/DeleteMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) FindMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/blog.MenuRpc/FindMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) DeleteMenuList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, "/blog.MenuRpc/DeleteMenuList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) FindMenuList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageResp, error) {
	out := new(PageResp)
	err := c.cc.Invoke(ctx, "/blog.MenuRpc/FindMenuList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MenuRpcServer is the server API for MenuRpc service.
// All implementations must embed UnimplementedMenuRpcServer
// for forward compatibility
type MenuRpcServer interface {
	CreateMenu(context.Context, *Menu) (*Menu, error)
	UpdateMenu(context.Context, *Menu) (*Menu, error)
	DeleteMenu(context.Context, *IdReq) (*EmptyResp, error)
	FindMenu(context.Context, *IdReq) (*Menu, error)
	DeleteMenuList(context.Context, *IdsReq) (*BatchResp, error)
	FindMenuList(context.Context, *PageQuery) (*PageResp, error)
	mustEmbedUnimplementedMenuRpcServer()
}

// UnimplementedMenuRpcServer must be embedded to have forward compatible implementations.
type UnimplementedMenuRpcServer struct {
}

func (UnimplementedMenuRpcServer) CreateMenu(context.Context, *Menu) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedMenuRpcServer) UpdateMenu(context.Context, *Menu) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedMenuRpcServer) DeleteMenu(context.Context, *IdReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedMenuRpcServer) FindMenu(context.Context, *IdReq) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMenu not implemented")
}
func (UnimplementedMenuRpcServer) DeleteMenuList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenuList not implemented")
}
func (UnimplementedMenuRpcServer) FindMenuList(context.Context, *PageQuery) (*PageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMenuList not implemented")
}
func (UnimplementedMenuRpcServer) mustEmbedUnimplementedMenuRpcServer() {}

// UnsafeMenuRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MenuRpcServer will
// result in compilation errors.
type UnsafeMenuRpcServer interface {
	mustEmbedUnimplementedMenuRpcServer()
}

func RegisterMenuRpcServer(s grpc.ServiceRegistrar, srv MenuRpcServer) {
	s.RegisterService(&MenuRpc_ServiceDesc, srv)
}

func _MenuRpc_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Menu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.MenuRpc/CreateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).CreateMenu(ctx, req.(*Menu))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Menu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.MenuRpc/UpdateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).UpdateMenu(ctx, req.(*Menu))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.MenuRpc/DeleteMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).DeleteMenu(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_FindMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).FindMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.MenuRpc/FindMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).FindMenu(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_DeleteMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).DeleteMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.MenuRpc/DeleteMenuList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).DeleteMenuList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_FindMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).FindMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.MenuRpc/FindMenuList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).FindMenuList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// MenuRpc_ServiceDesc is the grpc.ServiceDesc for MenuRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MenuRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.MenuRpc",
	HandlerType: (*MenuRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMenu",
			Handler:    _MenuRpc_CreateMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _MenuRpc_UpdateMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _MenuRpc_DeleteMenu_Handler,
		},
		{
			MethodName: "FindMenu",
			Handler:    _MenuRpc_FindMenu_Handler,
		},
		{
			MethodName: "DeleteMenuList",
			Handler:    _MenuRpc_DeleteMenuList_Handler,
		},
		{
			MethodName: "FindMenuList",
			Handler:    _MenuRpc_FindMenuList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

// RoleRpcClient is the client API for RoleRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleRpcClient interface {
	CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	DeleteRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error)
	FindRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Role, error)
	DeleteRoleList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	FindRoleList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageResp, error)
}

type roleRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleRpcClient(cc grpc.ClientConnInterface) RoleRpcClient {
	return &roleRpcClient{cc}
}

func (c *roleRpcClient) CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/blog.RoleRpc/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/blog.RoleRpc/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) DeleteRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/blog.RoleRpc/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) FindRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/blog.RoleRpc/FindRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) DeleteRoleList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, "/blog.RoleRpc/DeleteRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) FindRoleList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageResp, error) {
	out := new(PageResp)
	err := c.cc.Invoke(ctx, "/blog.RoleRpc/FindRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleRpcServer is the server API for RoleRpc service.
// All implementations must embed UnimplementedRoleRpcServer
// for forward compatibility
type RoleRpcServer interface {
	CreateRole(context.Context, *Role) (*Role, error)
	UpdateRole(context.Context, *Role) (*Role, error)
	DeleteRole(context.Context, *IdReq) (*EmptyResp, error)
	FindRole(context.Context, *IdReq) (*Role, error)
	DeleteRoleList(context.Context, *IdsReq) (*BatchResp, error)
	FindRoleList(context.Context, *PageQuery) (*PageResp, error)
	mustEmbedUnimplementedRoleRpcServer()
}

// UnimplementedRoleRpcServer must be embedded to have forward compatible implementations.
type UnimplementedRoleRpcServer struct {
}

func (UnimplementedRoleRpcServer) CreateRole(context.Context, *Role) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRoleRpcServer) UpdateRole(context.Context, *Role) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRoleRpcServer) DeleteRole(context.Context, *IdReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRoleRpcServer) FindRole(context.Context, *IdReq) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRole not implemented")
}
func (UnimplementedRoleRpcServer) DeleteRoleList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleList not implemented")
}
func (UnimplementedRoleRpcServer) FindRoleList(context.Context, *PageQuery) (*PageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoleList not implemented")
}
func (UnimplementedRoleRpcServer) mustEmbedUnimplementedRoleRpcServer() {}

// UnsafeRoleRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleRpcServer will
// result in compilation errors.
type UnsafeRoleRpcServer interface {
	mustEmbedUnimplementedRoleRpcServer()
}

func RegisterRoleRpcServer(s grpc.ServiceRegistrar, srv RoleRpcServer) {
	s.RegisterService(&RoleRpc_ServiceDesc, srv)
}

func _RoleRpc_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.RoleRpc/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).CreateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.RoleRpc/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).UpdateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.RoleRpc/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).DeleteRole(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_FindRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).FindRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.RoleRpc/FindRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).FindRole(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_DeleteRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).DeleteRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.RoleRpc/DeleteRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).DeleteRoleList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_FindRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).FindRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.RoleRpc/FindRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).FindRoleList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleRpc_ServiceDesc is the grpc.ServiceDesc for RoleRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.RoleRpc",
	HandlerType: (*RoleRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRole",
			Handler:    _RoleRpc_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RoleRpc_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RoleRpc_DeleteRole_Handler,
		},
		{
			MethodName: "FindRole",
			Handler:    _RoleRpc_FindRole_Handler,
		},
		{
			MethodName: "DeleteRoleList",
			Handler:    _RoleRpc_DeleteRoleList_Handler,
		},
		{
			MethodName: "FindRoleList",
			Handler:    _RoleRpc_FindRoleList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}
