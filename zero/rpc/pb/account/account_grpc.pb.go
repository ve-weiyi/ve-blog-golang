// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: account.proto

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountRpcClient is the client API for AccountRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountRpcClient interface {
	// 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 登出
	Logout(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 注销
	Logoff(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 注册
	Register(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 发送注册邮件
	RegisterEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 发送忘记密码邮件
	ForgetPasswordEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 重置密码
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 第三方登录
	OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 获取授权地址
	GetOauthAuthorizeUrl(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthLoginUrlResp, error)
}

type accountRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountRpcClient(cc grpc.ClientConnInterface) AccountRpcClient {
	return &accountRpcClient{cc}
}

func (c *accountRpcClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/account.AccountRpc/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) Logout(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/account.AccountRpc/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) Logoff(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/account.AccountRpc/Logoff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) Register(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/account.AccountRpc/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) RegisterEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/account.AccountRpc/RegisterEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) ForgetPasswordEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/account.AccountRpc/ForgetPasswordEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/account.AccountRpc/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/account.AccountRpc/OauthLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) GetOauthAuthorizeUrl(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthLoginUrlResp, error) {
	out := new(OauthLoginUrlResp)
	err := c.cc.Invoke(ctx, "/account.AccountRpc/GetOauthAuthorizeUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountRpcServer is the server API for AccountRpc service.
// All implementations must embed UnimplementedAccountRpcServer
// for forward compatibility
type AccountRpcServer interface {
	// 登录
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// 登出
	Logout(context.Context, *EmptyReq) (*EmptyResp, error)
	// 注销
	Logoff(context.Context, *EmptyReq) (*EmptyResp, error)
	// 注册
	Register(context.Context, *LoginReq) (*EmptyResp, error)
	// 发送注册邮件
	RegisterEmail(context.Context, *UserEmailReq) (*EmptyResp, error)
	// 发送忘记密码邮件
	ForgetPasswordEmail(context.Context, *UserEmailReq) (*EmptyResp, error)
	// 重置密码
	ResetPassword(context.Context, *ResetPasswordReq) (*EmptyResp, error)
	// 第三方登录
	OauthLogin(context.Context, *OauthLoginReq) (*LoginResp, error)
	// 获取授权地址
	GetOauthAuthorizeUrl(context.Context, *OauthLoginReq) (*OauthLoginUrlResp, error)
	mustEmbedUnimplementedAccountRpcServer()
}

// UnimplementedAccountRpcServer must be embedded to have forward compatible implementations.
type UnimplementedAccountRpcServer struct {
}

func (UnimplementedAccountRpcServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAccountRpcServer) Logout(context.Context, *EmptyReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAccountRpcServer) Logoff(context.Context, *EmptyReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logoff not implemented")
}
func (UnimplementedAccountRpcServer) Register(context.Context, *LoginReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAccountRpcServer) RegisterEmail(context.Context, *UserEmailReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEmail not implemented")
}
func (UnimplementedAccountRpcServer) ForgetPasswordEmail(context.Context, *UserEmailReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgetPasswordEmail not implemented")
}
func (UnimplementedAccountRpcServer) ResetPassword(context.Context, *ResetPasswordReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedAccountRpcServer) OauthLogin(context.Context, *OauthLoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthLogin not implemented")
}
func (UnimplementedAccountRpcServer) GetOauthAuthorizeUrl(context.Context, *OauthLoginReq) (*OauthLoginUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthAuthorizeUrl not implemented")
}
func (UnimplementedAccountRpcServer) mustEmbedUnimplementedAccountRpcServer() {}

// UnsafeAccountRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountRpcServer will
// result in compilation errors.
type UnsafeAccountRpcServer interface {
	mustEmbedUnimplementedAccountRpcServer()
}

func RegisterAccountRpcServer(s grpc.ServiceRegistrar, srv AccountRpcServer) {
	s.RegisterService(&AccountRpc_ServiceDesc, srv)
}

func _AccountRpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountRpc/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountRpc/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).Logout(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_Logoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).Logoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountRpc/Logoff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).Logoff(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountRpc/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).Register(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_RegisterEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).RegisterEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountRpc/RegisterEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).RegisterEmail(ctx, req.(*UserEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_ForgetPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).ForgetPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountRpc/ForgetPasswordEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).ForgetPasswordEmail(ctx, req.(*UserEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountRpc/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_OauthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).OauthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountRpc/OauthLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).OauthLogin(ctx, req.(*OauthLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_GetOauthAuthorizeUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).GetOauthAuthorizeUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountRpc/GetOauthAuthorizeUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).GetOauthAuthorizeUrl(ctx, req.(*OauthLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountRpc_ServiceDesc is the grpc.ServiceDesc for AccountRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountRpc",
	HandlerType: (*AccountRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AccountRpc_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AccountRpc_Logout_Handler,
		},
		{
			MethodName: "Logoff",
			Handler:    _AccountRpc_Logoff_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AccountRpc_Register_Handler,
		},
		{
			MethodName: "RegisterEmail",
			Handler:    _AccountRpc_RegisterEmail_Handler,
		},
		{
			MethodName: "ForgetPasswordEmail",
			Handler:    _AccountRpc_ForgetPasswordEmail_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _AccountRpc_ResetPassword_Handler,
		},
		{
			MethodName: "OauthLogin",
			Handler:    _AccountRpc_OauthLogin_Handler,
		},
		{
			MethodName: "GetOauthAuthorizeUrl",
			Handler:    _AccountRpc_GetOauthAuthorizeUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}

// RoleRpcClient is the client API for RoleRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleRpcClient interface {
	// 创建角色
	CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	// 更新角色
	UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	// 删除角色
	DeleteRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResult, error)
	// 批量删除角色
	DeleteRoleList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResult, error)
	// 查询角色
	FindRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Role, error)
	// 分页获取角色列表
	FindRoleList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*RolePageResp, error)
	// 查询角色
	FindRoleResource(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*RoleResourceResp, error)
	// 更新角色菜单
	UpdateRoleMenus(ctx context.Context, in *UpdateRoleMenusReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 更新角色资源
	UpdateRoleApis(ctx context.Context, in *UpdateRoleApisReq, opts ...grpc.CallOption) (*EmptyResp, error)
}

type roleRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleRpcClient(cc grpc.ClientConnInterface) RoleRpcClient {
	return &roleRpcClient{cc}
}

func (c *roleRpcClient) CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/account.roleRpc/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/account.roleRpc/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) DeleteRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResult, error) {
	out := new(BatchResult)
	err := c.cc.Invoke(ctx, "/account.roleRpc/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) DeleteRoleList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResult, error) {
	out := new(BatchResult)
	err := c.cc.Invoke(ctx, "/account.roleRpc/DeleteRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) FindRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/account.roleRpc/FindRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) FindRoleList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*RolePageResp, error) {
	out := new(RolePageResp)
	err := c.cc.Invoke(ctx, "/account.roleRpc/FindRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) FindRoleResource(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*RoleResourceResp, error) {
	out := new(RoleResourceResp)
	err := c.cc.Invoke(ctx, "/account.roleRpc/FindRoleResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) UpdateRoleMenus(ctx context.Context, in *UpdateRoleMenusReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/account.roleRpc/UpdateRoleMenus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) UpdateRoleApis(ctx context.Context, in *UpdateRoleApisReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/account.roleRpc/UpdateRoleApis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleRpcServer is the server API for RoleRpc service.
// All implementations must embed UnimplementedRoleRpcServer
// for forward compatibility
type RoleRpcServer interface {
	// 创建角色
	CreateRole(context.Context, *Role) (*Role, error)
	// 更新角色
	UpdateRole(context.Context, *Role) (*Role, error)
	// 删除角色
	DeleteRole(context.Context, *IdReq) (*BatchResult, error)
	// 批量删除角色
	DeleteRoleList(context.Context, *IdsReq) (*BatchResult, error)
	// 查询角色
	FindRole(context.Context, *IdReq) (*Role, error)
	// 分页获取角色列表
	FindRoleList(context.Context, *PageQuery) (*RolePageResp, error)
	// 查询角色
	FindRoleResource(context.Context, *IdReq) (*RoleResourceResp, error)
	// 更新角色菜单
	UpdateRoleMenus(context.Context, *UpdateRoleMenusReq) (*EmptyResp, error)
	// 更新角色资源
	UpdateRoleApis(context.Context, *UpdateRoleApisReq) (*EmptyResp, error)
	mustEmbedUnimplementedRoleRpcServer()
}

// UnimplementedRoleRpcServer must be embedded to have forward compatible implementations.
type UnimplementedRoleRpcServer struct {
}

func (UnimplementedRoleRpcServer) CreateRole(context.Context, *Role) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRoleRpcServer) UpdateRole(context.Context, *Role) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRoleRpcServer) DeleteRole(context.Context, *IdReq) (*BatchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRoleRpcServer) DeleteRoleList(context.Context, *IdsReq) (*BatchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleList not implemented")
}
func (UnimplementedRoleRpcServer) FindRole(context.Context, *IdReq) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRole not implemented")
}
func (UnimplementedRoleRpcServer) FindRoleList(context.Context, *PageQuery) (*RolePageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoleList not implemented")
}
func (UnimplementedRoleRpcServer) FindRoleResource(context.Context, *IdReq) (*RoleResourceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoleResource not implemented")
}
func (UnimplementedRoleRpcServer) UpdateRoleMenus(context.Context, *UpdateRoleMenusReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleMenus not implemented")
}
func (UnimplementedRoleRpcServer) UpdateRoleApis(context.Context, *UpdateRoleApisReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleApis not implemented")
}
func (UnimplementedRoleRpcServer) mustEmbedUnimplementedRoleRpcServer() {}

// UnsafeRoleRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleRpcServer will
// result in compilation errors.
type UnsafeRoleRpcServer interface {
	mustEmbedUnimplementedRoleRpcServer()
}

func RegisterRoleRpcServer(s grpc.ServiceRegistrar, srv RoleRpcServer) {
	s.RegisterService(&RoleRpc_ServiceDesc, srv)
}

func _RoleRpc_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.roleRpc/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).CreateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.roleRpc/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).UpdateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.roleRpc/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).DeleteRole(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_DeleteRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).DeleteRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.roleRpc/DeleteRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).DeleteRoleList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_FindRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).FindRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.roleRpc/FindRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).FindRole(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_FindRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).FindRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.roleRpc/FindRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).FindRoleList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_FindRoleResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).FindRoleResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.roleRpc/FindRoleResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).FindRoleResource(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_UpdateRoleMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleMenusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).UpdateRoleMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.roleRpc/UpdateRoleMenus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).UpdateRoleMenus(ctx, req.(*UpdateRoleMenusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_UpdateRoleApis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleApisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).UpdateRoleApis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.roleRpc/UpdateRoleApis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).UpdateRoleApis(ctx, req.(*UpdateRoleApisReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleRpc_ServiceDesc is the grpc.ServiceDesc for RoleRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.roleRpc",
	HandlerType: (*RoleRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRole",
			Handler:    _RoleRpc_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RoleRpc_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RoleRpc_DeleteRole_Handler,
		},
		{
			MethodName: "DeleteRoleList",
			Handler:    _RoleRpc_DeleteRoleList_Handler,
		},
		{
			MethodName: "FindRole",
			Handler:    _RoleRpc_FindRole_Handler,
		},
		{
			MethodName: "FindRoleList",
			Handler:    _RoleRpc_FindRoleList_Handler,
		},
		{
			MethodName: "FindRoleResource",
			Handler:    _RoleRpc_FindRoleResource_Handler,
		},
		{
			MethodName: "UpdateRoleMenus",
			Handler:    _RoleRpc_UpdateRoleMenus_Handler,
		},
		{
			MethodName: "UpdateRoleApis",
			Handler:    _RoleRpc_UpdateRoleApis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}

// ApiRpcClient is the client API for ApiRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiRpcClient interface {
	// 创建接口
	CreateApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*Api, error)
	// 更新接口
	UpdateApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*Api, error)
	// 删除接口
	DeleteApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResult, error)
	// 批量删除接口
	DeleteApiList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResult, error)
	// 查询接口
	FindApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Api, error)
	// 分页获取接口列表
	FindApiList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*ApiPageResp, error)
	// 同步接口列表
	SyncApiList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BatchResult, error)
	// 清空接口列表
	CleanApiList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error)
}

type apiRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewApiRpcClient(cc grpc.ClientConnInterface) ApiRpcClient {
	return &apiRpcClient{cc}
}

func (c *apiRpcClient) CreateApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*Api, error) {
	out := new(Api)
	err := c.cc.Invoke(ctx, "/account.apiRpc/CreateApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) UpdateApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*Api, error) {
	out := new(Api)
	err := c.cc.Invoke(ctx, "/account.apiRpc/UpdateApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) DeleteApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResult, error) {
	out := new(BatchResult)
	err := c.cc.Invoke(ctx, "/account.apiRpc/DeleteApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) DeleteApiList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResult, error) {
	out := new(BatchResult)
	err := c.cc.Invoke(ctx, "/account.apiRpc/DeleteApiList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) FindApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Api, error) {
	out := new(Api)
	err := c.cc.Invoke(ctx, "/account.apiRpc/FindApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) FindApiList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*ApiPageResp, error) {
	out := new(ApiPageResp)
	err := c.cc.Invoke(ctx, "/account.apiRpc/FindApiList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) SyncApiList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BatchResult, error) {
	out := new(BatchResult)
	err := c.cc.Invoke(ctx, "/account.apiRpc/SyncApiList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) CleanApiList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/account.apiRpc/CleanApiList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiRpcServer is the server API for ApiRpc service.
// All implementations must embed UnimplementedApiRpcServer
// for forward compatibility
type ApiRpcServer interface {
	// 创建接口
	CreateApi(context.Context, *Api) (*Api, error)
	// 更新接口
	UpdateApi(context.Context, *Api) (*Api, error)
	// 删除接口
	DeleteApi(context.Context, *IdReq) (*BatchResult, error)
	// 批量删除接口
	DeleteApiList(context.Context, *IdsReq) (*BatchResult, error)
	// 查询接口
	FindApi(context.Context, *IdReq) (*Api, error)
	// 分页获取接口列表
	FindApiList(context.Context, *PageQuery) (*ApiPageResp, error)
	// 同步接口列表
	SyncApiList(context.Context, *EmptyReq) (*BatchResult, error)
	// 清空接口列表
	CleanApiList(context.Context, *EmptyReq) (*EmptyResp, error)
	mustEmbedUnimplementedApiRpcServer()
}

// UnimplementedApiRpcServer must be embedded to have forward compatible implementations.
type UnimplementedApiRpcServer struct {
}

func (UnimplementedApiRpcServer) CreateApi(context.Context, *Api) (*Api, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApi not implemented")
}
func (UnimplementedApiRpcServer) UpdateApi(context.Context, *Api) (*Api, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApi not implemented")
}
func (UnimplementedApiRpcServer) DeleteApi(context.Context, *IdReq) (*BatchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApi not implemented")
}
func (UnimplementedApiRpcServer) DeleteApiList(context.Context, *IdsReq) (*BatchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiList not implemented")
}
func (UnimplementedApiRpcServer) FindApi(context.Context, *IdReq) (*Api, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindApi not implemented")
}
func (UnimplementedApiRpcServer) FindApiList(context.Context, *PageQuery) (*ApiPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindApiList not implemented")
}
func (UnimplementedApiRpcServer) SyncApiList(context.Context, *EmptyReq) (*BatchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncApiList not implemented")
}
func (UnimplementedApiRpcServer) CleanApiList(context.Context, *EmptyReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanApiList not implemented")
}
func (UnimplementedApiRpcServer) mustEmbedUnimplementedApiRpcServer() {}

// UnsafeApiRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiRpcServer will
// result in compilation errors.
type UnsafeApiRpcServer interface {
	mustEmbedUnimplementedApiRpcServer()
}

func RegisterApiRpcServer(s grpc.ServiceRegistrar, srv ApiRpcServer) {
	s.RegisterService(&ApiRpc_ServiceDesc, srv)
}

func _ApiRpc_CreateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Api)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).CreateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.apiRpc/CreateApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).CreateApi(ctx, req.(*Api))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_UpdateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Api)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).UpdateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.apiRpc/UpdateApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).UpdateApi(ctx, req.(*Api))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_DeleteApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).DeleteApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.apiRpc/DeleteApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).DeleteApi(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_DeleteApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).DeleteApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.apiRpc/DeleteApiList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).DeleteApiList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_FindApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).FindApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.apiRpc/FindApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).FindApi(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_FindApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).FindApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.apiRpc/FindApiList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).FindApiList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_SyncApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).SyncApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.apiRpc/SyncApiList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).SyncApiList(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_CleanApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).CleanApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.apiRpc/CleanApiList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).CleanApiList(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiRpc_ServiceDesc is the grpc.ServiceDesc for ApiRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.apiRpc",
	HandlerType: (*ApiRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApi",
			Handler:    _ApiRpc_CreateApi_Handler,
		},
		{
			MethodName: "UpdateApi",
			Handler:    _ApiRpc_UpdateApi_Handler,
		},
		{
			MethodName: "DeleteApi",
			Handler:    _ApiRpc_DeleteApi_Handler,
		},
		{
			MethodName: "DeleteApiList",
			Handler:    _ApiRpc_DeleteApiList_Handler,
		},
		{
			MethodName: "FindApi",
			Handler:    _ApiRpc_FindApi_Handler,
		},
		{
			MethodName: "FindApiList",
			Handler:    _ApiRpc_FindApiList_Handler,
		},
		{
			MethodName: "SyncApiList",
			Handler:    _ApiRpc_SyncApiList_Handler,
		},
		{
			MethodName: "CleanApiList",
			Handler:    _ApiRpc_CleanApiList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}

// MenuRpcClient is the client API for MenuRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MenuRpcClient interface {
	// 创建菜单
	CreateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error)
	// 更新菜单
	UpdateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error)
	// 删除菜单
	DeleteMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResult, error)
	// 批量删除菜单
	DeleteMenuList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResult, error)
	// 查询菜单
	FindMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Menu, error)
	// 分页获取菜单列表
	FindMenuList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*MenuPageResp, error)
	// 同步菜单列表
	SyncMenuList(ctx context.Context, in *SyncMenuRequest, opts ...grpc.CallOption) (*BatchResult, error)
	// 清空菜单列表
	CleanMenuList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error)
}

type menuRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewMenuRpcClient(cc grpc.ClientConnInterface) MenuRpcClient {
	return &menuRpcClient{cc}
}

func (c *menuRpcClient) CreateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/account.menuRpc/CreateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) UpdateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/account.menuRpc/UpdateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) DeleteMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResult, error) {
	out := new(BatchResult)
	err := c.cc.Invoke(ctx, "/account.menuRpc/DeleteMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) DeleteMenuList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResult, error) {
	out := new(BatchResult)
	err := c.cc.Invoke(ctx, "/account.menuRpc/DeleteMenuList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) FindMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/account.menuRpc/FindMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) FindMenuList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*MenuPageResp, error) {
	out := new(MenuPageResp)
	err := c.cc.Invoke(ctx, "/account.menuRpc/FindMenuList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) SyncMenuList(ctx context.Context, in *SyncMenuRequest, opts ...grpc.CallOption) (*BatchResult, error) {
	out := new(BatchResult)
	err := c.cc.Invoke(ctx, "/account.menuRpc/SyncMenuList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) CleanMenuList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/account.menuRpc/CleanMenuList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MenuRpcServer is the server API for MenuRpc service.
// All implementations must embed UnimplementedMenuRpcServer
// for forward compatibility
type MenuRpcServer interface {
	// 创建菜单
	CreateMenu(context.Context, *Menu) (*Menu, error)
	// 更新菜单
	UpdateMenu(context.Context, *Menu) (*Menu, error)
	// 删除菜单
	DeleteMenu(context.Context, *IdReq) (*BatchResult, error)
	// 批量删除菜单
	DeleteMenuList(context.Context, *IdsReq) (*BatchResult, error)
	// 查询菜单
	FindMenu(context.Context, *IdReq) (*Menu, error)
	// 分页获取菜单列表
	FindMenuList(context.Context, *PageQuery) (*MenuPageResp, error)
	// 同步菜单列表
	SyncMenuList(context.Context, *SyncMenuRequest) (*BatchResult, error)
	// 清空菜单列表
	CleanMenuList(context.Context, *EmptyReq) (*EmptyResp, error)
	mustEmbedUnimplementedMenuRpcServer()
}

// UnimplementedMenuRpcServer must be embedded to have forward compatible implementations.
type UnimplementedMenuRpcServer struct {
}

func (UnimplementedMenuRpcServer) CreateMenu(context.Context, *Menu) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedMenuRpcServer) UpdateMenu(context.Context, *Menu) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedMenuRpcServer) DeleteMenu(context.Context, *IdReq) (*BatchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedMenuRpcServer) DeleteMenuList(context.Context, *IdsReq) (*BatchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenuList not implemented")
}
func (UnimplementedMenuRpcServer) FindMenu(context.Context, *IdReq) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMenu not implemented")
}
func (UnimplementedMenuRpcServer) FindMenuList(context.Context, *PageQuery) (*MenuPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMenuList not implemented")
}
func (UnimplementedMenuRpcServer) SyncMenuList(context.Context, *SyncMenuRequest) (*BatchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncMenuList not implemented")
}
func (UnimplementedMenuRpcServer) CleanMenuList(context.Context, *EmptyReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanMenuList not implemented")
}
func (UnimplementedMenuRpcServer) mustEmbedUnimplementedMenuRpcServer() {}

// UnsafeMenuRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MenuRpcServer will
// result in compilation errors.
type UnsafeMenuRpcServer interface {
	mustEmbedUnimplementedMenuRpcServer()
}

func RegisterMenuRpcServer(s grpc.ServiceRegistrar, srv MenuRpcServer) {
	s.RegisterService(&MenuRpc_ServiceDesc, srv)
}

func _MenuRpc_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Menu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.menuRpc/CreateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).CreateMenu(ctx, req.(*Menu))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Menu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.menuRpc/UpdateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).UpdateMenu(ctx, req.(*Menu))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.menuRpc/DeleteMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).DeleteMenu(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_DeleteMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).DeleteMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.menuRpc/DeleteMenuList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).DeleteMenuList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_FindMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).FindMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.menuRpc/FindMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).FindMenu(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_FindMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).FindMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.menuRpc/FindMenuList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).FindMenuList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_SyncMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).SyncMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.menuRpc/SyncMenuList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).SyncMenuList(ctx, req.(*SyncMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_CleanMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).CleanMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.menuRpc/CleanMenuList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).CleanMenuList(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MenuRpc_ServiceDesc is the grpc.ServiceDesc for MenuRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MenuRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.menuRpc",
	HandlerType: (*MenuRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMenu",
			Handler:    _MenuRpc_CreateMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _MenuRpc_UpdateMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _MenuRpc_DeleteMenu_Handler,
		},
		{
			MethodName: "DeleteMenuList",
			Handler:    _MenuRpc_DeleteMenuList_Handler,
		},
		{
			MethodName: "FindMenu",
			Handler:    _MenuRpc_FindMenu_Handler,
		},
		{
			MethodName: "FindMenuList",
			Handler:    _MenuRpc_FindMenuList_Handler,
		},
		{
			MethodName: "SyncMenuList",
			Handler:    _MenuRpc_SyncMenuList_Handler,
		},
		{
			MethodName: "CleanMenuList",
			Handler:    _MenuRpc_CleanMenuList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
