// 声明 proto 语法版本，固定值
syntax = "proto3";

// proto 包名
package account;

// 生成 golang 代码后的包名
option go_package = "./account";

import "any.proto";

message EmptyReq {
}

message EmptyResp {
}

message IdReq {
  int64 id = 1;
}

message IdsReq {
  repeated int64 ids = 1;
}

message PageQuery {
  PageLimit limit = 1;
  repeated PageSort sorts = 2;// 排序
  repeated PageCondition conditions = 3;// 使用条件语句查询
}

message PageLimit {
  int64 page = 1;
  int64 page_size = 2;
}

message PageSort {
  string field = 1;
  string order = 2;
}

message PageCondition {
  string field = 1;
  string value = 2;
  string logic = 3;
  string operator = 4;
}

message PageResp {
  int64 page = 1;
  int64 page_size = 2;
  int64 total = 3;
}

message BatchResp {
  int64 success_count = 1;
}

/************** auth 登录相关 **************/

message LoginReq {
  string username = 1;
  string password = 2;
  string code = 3;
}

message LoginResp {
  int64 user_id = 1;// 用户id
  string username = 2;// 用户名
  string nickname = 3;// 昵称
  string avatar = 4;// 头像
  string intro = 5;// 个人简介
  string website = 6;// 个人网站
  string email = 7;// 邮箱
  repeated RoleLabel roles = 8;// 角色列表
}

message RoleLabel {
  string role_name = 1;
  string role_comment = 2;
}

message OauthLoginReq {
  string platform = 1;// 平台
  string code = 2;// 授权码
  string state = 3;// 状态
}

message OauthLoginUrlResp {
  string url = 1;// 授权地址
}

message ResetPasswordReq {
  string username = 1;
  string password = 2;
  string code = 3;
}

message UserEmailReq {
  string username = 1;
}

service AuthRpc {
  // 登录
  rpc Login(LoginReq) returns(LoginResp);
  // 登出
  rpc Logout(EmptyReq) returns(EmptyResp);
  // 注销
  rpc Logoff(EmptyReq) returns(EmptyResp);
  // 注册
  rpc Register(LoginReq) returns(EmptyResp);
  // 发送注册邮件
  rpc RegisterEmail(UserEmailReq) returns(EmptyResp);
  // 发送忘记密码邮件
  rpc ForgetPasswordEmail(UserEmailReq) returns(EmptyResp);
  // 重置密码
  rpc ResetPassword(ResetPasswordReq) returns(EmptyResp);
  // 第三方登录
  rpc OauthLogin(OauthLoginReq) returns(LoginResp);
  // 获取授权地址
  rpc GetOauthAuthorizeUrl(OauthLoginReq) returns(OauthLoginUrlResp);
}

/************** rbac 权限相关 **************/
message Api {
  int64 id = 1;// 主键id
  string name = 2;// api名称
  string path = 3;// api路径
  string method = 4;// api请求方法
  int64 parent_id = 5;// 分组id
  int64 traceable = 6;// 是否追溯操作记录 0需要，1是
  int64 status = 7;// 状态 1开，2关
  int64 created_at = 8;// 创建时间
  int64 updated_at = 9;// 更新时间
}

message ApiDetails {
  int64 id = 1;// 主键id
  string name = 2;// api名称
  string path = 3;// api路径
  string method = 4;// api请求方法
  int64 parent_id = 5;// 分组id
  int64 traceable = 6;// 是否追溯操作记录 0需要，1是
  int64 status = 7;// 状态 1开，2关
  int64 created_at = 8;// 创建时间
  int64 updated_at = 9;// 更新时间
  repeated ApiDetails children = 10;
}

message ApiPageResp {
  int64 total = 1;
  repeated ApiDetails list = 2;
}

service ApiRpc {
  // 创建接口
  rpc CreateApi(Api) returns(Api);
  // 更新接口
  rpc UpdateApi(Api) returns(Api);
  // 删除接口
  rpc DeleteApi(IdReq) returns(BatchResp);
  // 批量删除接口
  rpc DeleteApiList(IdsReq) returns(BatchResp);
  // 查询接口
  rpc FindApi(IdReq) returns(Api);
  // 分页获取接口列表
  rpc FindApiList(PageQuery) returns(ApiPageResp);
  // 同步接口列表
  rpc SyncApiList(EmptyReq) returns(BatchResp);
  // 清空接口列表
  rpc CleanApiList(EmptyReq) returns(BatchResp);
}

message Menu {
  int64 id = 1;// 主键
  int64 parent_id = 2;// 父id
  string title = 3;// 菜单标题
  string path = 4;// 路由路径
  string name = 5;// 路由名称
  string component = 6;// 路由组件
  string redirect = 7;// 路由重定向
  int64 type = 8;// 菜单类型
  string extra = 9;// 菜单元数据
  int64 created_at = 10;// 创建时间
  int64 updated_at = 11;// 更新时间
}

message MenuDetails {
  int64 id = 1;// 主键
  int64 parent_id = 2;// 父id
  string title = 3;// 菜单标题
  int64 type = 4;// 菜单类型（0代表菜单、1代表iframe、2代表外链、3代表按钮）
  string path = 5;// 路由地址
  string name = 6;// 路由名字
  string component = 7;// Layout组件
  string redirect = 8;// 路由重定向
  string extra = 9;// 额外的配置信息
  int64 created_at = 10;// 创建时间
  int64 updated_at = 11;// 更新时间
  repeated MenuDetails children = 12;
}

message MenuPageResp {
  int64 total = 1;
  repeated MenuDetails list = 2;
}

message SyncMenuRequest {
  repeated MenuDetails menus = 1;
}

service MenuRpc {
  // 创建菜单
  rpc CreateMenu(Menu) returns(Menu);
  // 更新菜单
  rpc UpdateMenu(Menu) returns(Menu);
  // 删除菜单
  rpc DeleteMenu(IdReq) returns(BatchResp);
  // 批量删除菜单
  rpc DeleteMenuList(IdsReq) returns(BatchResp);
  // 查询菜单
  rpc FindMenu(IdReq) returns(Menu);
  // 分页获取菜单列表
  rpc FindMenuList(PageQuery) returns(MenuPageResp);
  // 同步菜单列表
  rpc SyncMenuList(SyncMenuRequest) returns(BatchResp);
  // 清空菜单列表
  rpc CleanMenuList(EmptyReq) returns(BatchResp);
}

message Role {
  int64 id = 1;// 主键id
  int64 parent_id = 2;// 父角色id
  string role_domain = 3;// 角色域
  string role_name = 4;// 角色名
  string role_comment = 5;// 角色备注
  int64 is_disable = 6;// 是否禁用  0否 1是
  int64 is_default = 7;// 是否默认角色 0否 1是
  int64 created_at = 8;// 创建时间
  int64 updated_at = 9;// 更新时间
}

message RoleDetails {
  int64 id = 1;// 主键id
  int64 parent_id = 2;// 父角色id
  string role_domain = 3;// 角色域
  string role_name = 4;// 角色名
  string role_comment = 5;// 角色备注
  int64 is_disable = 6;// 是否禁用  0否 1是
  int64 is_default = 7;// 是否默认角色 0否 1是
  int64 created_at = 8;// 创建时间
  int64 updated_at = 9;// 更新时间
  repeated RoleDetails children = 10;
}

message RolePageResp {
  int64 total = 1;
  repeated RoleDetails list = 2;
}

message RoleResourcesResp {
  int64 role_id = 1;
  repeated int64 api_ids = 2;
  repeated int64 menu_ids = 3;
}

message UpdateRoleApisReq {
  int64 role_id = 1;
  repeated int64 api_ids = 2;
}

message UpdateRoleMenusReq {
  int64 role_id = 1;
  repeated int64 menu_ids = 2;
}

service RoleRpc {
  // 创建角色
  rpc CreateRole(Role) returns(Role);
  // 更新角色
  rpc UpdateRole(Role) returns(Role);
  // 删除角色
  rpc DeleteRole(IdReq) returns(BatchResp);
  // 批量删除角色
  rpc DeleteRoleList(IdsReq) returns(BatchResp);
  // 查询角色
  rpc FindRole(IdReq) returns(Role);
  // 分页获取角色列表
  rpc FindRoleList(PageQuery) returns(RolePageResp);
  // 查询角色
  rpc FindRoleResources(IdReq) returns(RoleResourcesResp);
  // 更新角色菜单
  rpc UpdateRoleMenus(UpdateRoleMenusReq) returns(EmptyResp);
  // 更新角色资源
  rpc UpdateRoleApis(UpdateRoleApisReq) returns(EmptyResp);
}

/************** user 用户相关 **************/

message LoginHistory {
  int64 id = 1;
  string login_type = 2;// 登录类型
  string agent = 3;// 代理
  string ip_address = 4;// ip host
  string ip_source = 5;// ip 源
  string login_time = 6;// 创建时间
}

message LoginHistoryPageResp {
  int64 total = 1;
  repeated LoginHistory list = 2;
}

message UserInfoResp {
  int64 id = 1;// id
  int64 user_id = 2;// 用户id
  string email = 3;// 用户邮箱
  string nickname = 4;// 用户昵称
  string avatar = 5;// 用户头像
  string phone = 6;// 用户手机号
  string intro = 7;// 个人简介
  string website = 8;// 个人网站
  int64 created_at = 9;// 创建时间
  int64 updated_at = 10;// 更新时间
}

message User {
  int64 id = 1;
  string username = 2;
  string email = 3;// 用户邮箱
  string nickname = 4;// 用户昵称
  string avatar = 5;// 用户头像
  string phone = 6;// 用户手机号
  string intro = 7;// 个人简介
  string website = 8;// 个人网站
  int64 status = 9;
  string register_type = 10;
  string ip_address = 11;// ip host
  string ip_source = 12;// ip 源
  int64 created_at = 13;
  int64 updated_at = 14;
  repeated RoleLabel roles = 15;
}

message PageUserInfoResp{
  int64 total = 1;
  repeated User list = 2;
}

message UpdateUserInfoReq {
  int64 user_id = 1;
  string nickname = 2;// 昵称
  string phone = 3;// 手机号
  string website = 4;// 网站
  string intro = 5;// 简介
}

message UpdateUserAvatarReq {
  int64 user_id = 1;
  string avatar = 2;
}

message UpdateUserStatusReq {
  int64 user_id = 1;
  int64 status = 2;
}

message UpdateUserRoleReq {
  int64 user_id = 1;
  repeated int64 role_ids = 2;
}

service UserRpc {
  // 查询用户登录历史
  rpc FindUserLoginHistoryList(PageQuery) returns(LoginHistoryPageResp);
  // 批量删除登录历史
  rpc DeleteUserLoginHistoryList(IdsReq) returns(BatchResp);
  // 获取用户接口权限
  rpc GetUserApis(EmptyReq) returns(ApiPageResp);
  // 获取用户菜单权限
  rpc GetUserMenus(EmptyReq) returns(MenuPageResp);
  // 获取用户角色信息
  rpc GetUserRoles(EmptyReq) returns(RolePageResp);
  // 获取用户信息
  rpc GetUserInfo(EmptyReq) returns(UserInfoResp);
  // 修改用户信息
  rpc UpdateUserInfo(UpdateUserInfoReq) returns(UserInfoResp);
  // 修改用户头像
  rpc UpdateUserAvatar(UpdateUserAvatarReq) returns(UserInfoResp);
  // 修改用户状态
  rpc UpdateUserStatus(UpdateUserStatusReq) returns(EmptyResp);
  // 修改用户角色
  rpc UpdateUserRole(UpdateUserRoleReq) returns(EmptyResp);
  // 查找用户列表
  rpc FindUserList(PageQuery) returns(PageUserInfoResp);
}
