// Code generated by goctl. DO NOT EDIT.
// Source: account.proto

package server

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/zero/rpc/internal/logic/accountrpc"
	"github.com/ve-weiyi/ve-blog-golang/zero/rpc/internal/svc"
	"github.com/ve-weiyi/ve-blog-golang/zero/rpc/pb/account"
)

type AccountRpcServer struct {
	svcCtx *svc.ServiceContext
	account.UnimplementedAccountRpcServer
}

func NewAccountRpcServer(svcCtx *svc.ServiceContext) *AccountRpcServer {
	return &AccountRpcServer{
		svcCtx: svcCtx,
	}
}

// 登录
func (s *AccountRpcServer) Login(ctx context.Context, in *account.LoginReq) (*account.LoginResp, error) {
	l := accountrpclogic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

// 登出
func (s *AccountRpcServer) Logout(ctx context.Context, in *account.EmptyReq) (*account.EmptyResp, error) {
	l := accountrpclogic.NewLogoutLogic(ctx, s.svcCtx)
	return l.Logout(in)
}

// 注销
func (s *AccountRpcServer) Logoff(ctx context.Context, in *account.EmptyReq) (*account.EmptyResp, error) {
	l := accountrpclogic.NewLogoffLogic(ctx, s.svcCtx)
	return l.Logoff(in)
}

// 注册
func (s *AccountRpcServer) Register(ctx context.Context, in *account.LoginReq) (*account.EmptyResp, error) {
	l := accountrpclogic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

// 发送注册邮件
func (s *AccountRpcServer) RegisterEmail(ctx context.Context, in *account.UserEmailReq) (*account.EmptyResp, error) {
	l := accountrpclogic.NewRegisterEmailLogic(ctx, s.svcCtx)
	return l.RegisterEmail(in)
}

// 发送忘记密码邮件
func (s *AccountRpcServer) ForgetPasswordEmail(ctx context.Context, in *account.UserEmailReq) (*account.EmptyResp, error) {
	l := accountrpclogic.NewForgetPasswordEmailLogic(ctx, s.svcCtx)
	return l.ForgetPasswordEmail(in)
}

// 重置密码
func (s *AccountRpcServer) ResetPassword(ctx context.Context, in *account.ResetPasswordReq) (*account.EmptyResp, error) {
	l := accountrpclogic.NewResetPasswordLogic(ctx, s.svcCtx)
	return l.ResetPassword(in)
}

// 第三方登录
func (s *AccountRpcServer) OauthLogin(ctx context.Context, in *account.OauthLoginReq) (*account.LoginResp, error) {
	l := accountrpclogic.NewOauthLoginLogic(ctx, s.svcCtx)
	return l.OauthLogin(in)
}

// 获取授权地址
func (s *AccountRpcServer) GetOauthAuthorizeUrl(ctx context.Context, in *account.OauthLoginReq) (*account.OauthLoginUrlResp, error) {
	l := accountrpclogic.NewGetOauthAuthorizeUrlLogic(ctx, s.svcCtx)
	return l.GetOauthAuthorizeUrl(in)
}
