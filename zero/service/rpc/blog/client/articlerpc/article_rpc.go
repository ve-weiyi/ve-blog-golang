// Code generated by goctl. DO NOT EDIT.
// Source: blog.proto

package articlerpc

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/zero/service/rpc/blog/internal/pb/blog"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AnalysisArticleResp       = blog.AnalysisArticleResp
	Api                       = blog.Api
	ApiDetails                = blog.ApiDetails
	ArticleCategory           = blog.ArticleCategory
	ArticleDetails            = blog.ArticleDetails
	ArticleNew                = blog.ArticleNew
	ArticleTag                = blog.ArticleTag
	BatchResp                 = blog.BatchResp
	BindUserEmailReq          = blog.BindUserEmailReq
	CategoryDetails           = blog.CategoryDetails
	CategoryNew               = blog.CategoryNew
	ChatRecord                = blog.ChatRecord
	Comment                   = blog.Comment
	CommentUserInfo           = blog.CommentUserInfo
	CountResp                 = blog.CountResp
	EmptyReq                  = blog.EmptyReq
	EmptyResp                 = blog.EmptyResp
	FindApiListResp           = blog.FindApiListResp
	FindArticleListReq        = blog.FindArticleListReq
	FindArticleListResp       = blog.FindArticleListResp
	FindArticlesByCategoryReq = blog.FindArticlesByCategoryReq
	FindArticlesByTagReq      = blog.FindArticlesByTagReq
	FindCategoryListReq       = blog.FindCategoryListReq
	FindCategoryListResp      = blog.FindCategoryListResp
	FindChatRecordListResp    = blog.FindChatRecordListResp
	FindCommentListResp       = blog.FindCommentListResp
	FindConfigReq             = blog.FindConfigReq
	FindConfigResp            = blog.FindConfigResp
	FindFriendLinkListResp    = blog.FindFriendLinkListResp
	FindLikeArticleResp       = blog.FindLikeArticleResp
	FindLikeCommentResp       = blog.FindLikeCommentResp
	FindLikeTalkResp          = blog.FindLikeTalkResp
	FindLoginHistoryListReq   = blog.FindLoginHistoryListReq
	FindLoginHistoryListResp  = blog.FindLoginHistoryListResp
	FindMenuListResp          = blog.FindMenuListResp
	FindOperationLogListResp  = blog.FindOperationLogListResp
	FindPageListResp          = blog.FindPageListResp
	FindPhotoAlbumListResp    = blog.FindPhotoAlbumListResp
	FindPhotoListResp         = blog.FindPhotoListResp
	FindRemarkListResp        = blog.FindRemarkListResp
	FindRoleListResp          = blog.FindRoleListResp
	FindTagArticleCountReq    = blog.FindTagArticleCountReq
	FindTagByNameReq          = blog.FindTagByNameReq
	FindTagListReq            = blog.FindTagListReq
	FindTagListResp           = blog.FindTagListResp
	FindTalkListResp          = blog.FindTalkListResp
	FindUserListReq           = blog.FindUserListReq
	FindUserListResp          = blog.FindUserListResp
	FindUserRegionListResp    = blog.FindUserRegionListResp
	FriendLink                = blog.FriendLink
	GetLogoutAtReq            = blog.GetLogoutAtReq
	IdReq                     = blog.IdReq
	IdsReq                    = blog.IdsReq
	ListResp                  = blog.ListResp
	LoginReq                  = blog.LoginReq
	LoginResp                 = blog.LoginResp
	LogoffReq                 = blog.LogoffReq
	LogoutReq                 = blog.LogoutReq
	LogoutResp                = blog.LogoutResp
	Menu                      = blog.Menu
	MenuDetails               = blog.MenuDetails
	OauthLoginReq             = blog.OauthLoginReq
	OauthLoginUrlResp         = blog.OauthLoginUrlResp
	OperationLog              = blog.OperationLog
	Page                      = blog.Page
	PageCondition             = blog.PageCondition
	PageLimit                 = blog.PageLimit
	PageQuery                 = blog.PageQuery
	PageSort                  = blog.PageSort
	Photo                     = blog.Photo
	PhotoAlbum                = blog.PhotoAlbum
	RecycleArticleReq         = blog.RecycleArticleReq
	RegisterReq               = blog.RegisterReq
	Remark                    = blog.Remark
	ResetPasswordReq          = blog.ResetPasswordReq
	Role                      = blog.Role
	RoleDetails               = blog.RoleDetails
	RoleResourcesResp         = blog.RoleResourcesResp
	SaveConfigReq             = blog.SaveConfigReq
	SyncMenuReq               = blog.SyncMenuReq
	TagDetails                = blog.TagDetails
	TagMapResp                = blog.TagMapResp
	TagNew                    = blog.TagNew
	Talk                      = blog.Talk
	TalkDetailsDTO            = blog.TalkDetailsDTO
	TopArticleReq             = blog.TopArticleReq
	UpdateRoleApisReq         = blog.UpdateRoleApisReq
	UpdateRoleMenusReq        = blog.UpdateRoleMenusReq
	UpdateUserInfoReq         = blog.UpdateUserInfoReq
	UpdateUserRoleReq         = blog.UpdateUserRoleReq
	UpdateUserStatusReq       = blog.UpdateUserStatusReq
	UploadRecordReq           = blog.UploadRecordReq
	UploadRecordResp          = blog.UploadRecordResp
	UserDetails               = blog.UserDetails
	UserEmailReq              = blog.UserEmailReq
	UserIdReq                 = blog.UserIdReq
	UserInfoResp              = blog.UserInfoResp
	UserLoginHistory          = blog.UserLoginHistory
	UserRegion                = blog.UserRegion
	UserRoleLabel             = blog.UserRoleLabel
	UserVisit                 = blog.UserVisit
	UserVisitPageRsp          = blog.UserVisitPageRsp

	ArticleRpc interface {
		// 创建文章
		AddArticle(ctx context.Context, in *ArticleNew, opts ...grpc.CallOption) (*ArticleDetails, error)
		// 更新文章
		UpdateArticle(ctx context.Context, in *ArticleNew, opts ...grpc.CallOption) (*ArticleDetails, error)
		// 查询文章
		GetArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ArticleDetails, error)
		// 删除文章
		DeleteArticle(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
		// 查询文章数量
		FindArticleList(ctx context.Context, in *FindArticleListReq, opts ...grpc.CallOption) (*FindArticleListResp, error)
		// 查询文章列表
		FindArticlePublicList(ctx context.Context, in *FindArticleListReq, opts ...grpc.CallOption) (*FindArticleListResp, error)
		// 查询文章列表
		FindArticlesByTag(ctx context.Context, in *FindArticlesByTagReq, opts ...grpc.CallOption) (*FindArticleListResp, error)
		// 查询文章列表
		FindArticlesByCategory(ctx context.Context, in *FindArticlesByCategoryReq, opts ...grpc.CallOption) (*FindArticleListResp, error)
		// 回收文章
		RecycleArticle(ctx context.Context, in *RecycleArticleReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 置顶文章
		TopArticle(ctx context.Context, in *TopArticleReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 点赞文章
		LikeArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 用户点赞的文章
		FindUserLikeArticle(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindLikeArticleResp, error)
		// 查询文章数量
		AnalysisArticle(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*AnalysisArticleResp, error)
		// 创建文章分类
		AddCategory(ctx context.Context, in *CategoryNew, opts ...grpc.CallOption) (*CategoryDetails, error)
		// 更新文章分类
		UpdateCategory(ctx context.Context, in *CategoryNew, opts ...grpc.CallOption) (*CategoryDetails, error)
		// 查询文章分类
		GetCategory(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*CategoryDetails, error)
		// 删除文章分类
		DeleteCategory(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
		// 查询文章分类数量
		FindCategoryList(ctx context.Context, in *FindCategoryListReq, opts ...grpc.CallOption) (*FindCategoryListResp, error)
		// 创建标签
		AddTag(ctx context.Context, in *TagNew, opts ...grpc.CallOption) (*TagDetails, error)
		// 更新标签
		UpdateTag(ctx context.Context, in *TagNew, opts ...grpc.CallOption) (*TagDetails, error)
		// 查询标签
		GetTag(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*TagDetails, error)
		// 删除标签
		DeleteTag(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
		// 查询标签数量
		FindTagList(ctx context.Context, in *FindTagListReq, opts ...grpc.CallOption) (*FindTagListResp, error)
	}

	defaultArticleRpc struct {
		cli zrpc.Client
	}
)

func NewArticleRpc(cli zrpc.Client) ArticleRpc {
	return &defaultArticleRpc{
		cli: cli,
	}
}

// 创建文章
func (m *defaultArticleRpc) AddArticle(ctx context.Context, in *ArticleNew, opts ...grpc.CallOption) (*ArticleDetails, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.AddArticle(ctx, in, opts...)
}

// 更新文章
func (m *defaultArticleRpc) UpdateArticle(ctx context.Context, in *ArticleNew, opts ...grpc.CallOption) (*ArticleDetails, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.UpdateArticle(ctx, in, opts...)
}

// 查询文章
func (m *defaultArticleRpc) GetArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ArticleDetails, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.GetArticle(ctx, in, opts...)
}

// 删除文章
func (m *defaultArticleRpc) DeleteArticle(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.DeleteArticle(ctx, in, opts...)
}

// 查询文章数量
func (m *defaultArticleRpc) FindArticleList(ctx context.Context, in *FindArticleListReq, opts ...grpc.CallOption) (*FindArticleListResp, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.FindArticleList(ctx, in, opts...)
}

// 查询文章列表
func (m *defaultArticleRpc) FindArticlePublicList(ctx context.Context, in *FindArticleListReq, opts ...grpc.CallOption) (*FindArticleListResp, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.FindArticlePublicList(ctx, in, opts...)
}

// 查询文章列表
func (m *defaultArticleRpc) FindArticlesByTag(ctx context.Context, in *FindArticlesByTagReq, opts ...grpc.CallOption) (*FindArticleListResp, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.FindArticlesByTag(ctx, in, opts...)
}

// 查询文章列表
func (m *defaultArticleRpc) FindArticlesByCategory(ctx context.Context, in *FindArticlesByCategoryReq, opts ...grpc.CallOption) (*FindArticleListResp, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.FindArticlesByCategory(ctx, in, opts...)
}

// 回收文章
func (m *defaultArticleRpc) RecycleArticle(ctx context.Context, in *RecycleArticleReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.RecycleArticle(ctx, in, opts...)
}

// 置顶文章
func (m *defaultArticleRpc) TopArticle(ctx context.Context, in *TopArticleReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.TopArticle(ctx, in, opts...)
}

// 点赞文章
func (m *defaultArticleRpc) LikeArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.LikeArticle(ctx, in, opts...)
}

// 用户点赞的文章
func (m *defaultArticleRpc) FindUserLikeArticle(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindLikeArticleResp, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.FindUserLikeArticle(ctx, in, opts...)
}

// 查询文章数量
func (m *defaultArticleRpc) AnalysisArticle(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*AnalysisArticleResp, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.AnalysisArticle(ctx, in, opts...)
}

// 创建文章分类
func (m *defaultArticleRpc) AddCategory(ctx context.Context, in *CategoryNew, opts ...grpc.CallOption) (*CategoryDetails, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.AddCategory(ctx, in, opts...)
}

// 更新文章分类
func (m *defaultArticleRpc) UpdateCategory(ctx context.Context, in *CategoryNew, opts ...grpc.CallOption) (*CategoryDetails, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.UpdateCategory(ctx, in, opts...)
}

// 查询文章分类
func (m *defaultArticleRpc) GetCategory(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*CategoryDetails, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.GetCategory(ctx, in, opts...)
}

// 删除文章分类
func (m *defaultArticleRpc) DeleteCategory(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.DeleteCategory(ctx, in, opts...)
}

// 查询文章分类数量
func (m *defaultArticleRpc) FindCategoryList(ctx context.Context, in *FindCategoryListReq, opts ...grpc.CallOption) (*FindCategoryListResp, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.FindCategoryList(ctx, in, opts...)
}

// 创建标签
func (m *defaultArticleRpc) AddTag(ctx context.Context, in *TagNew, opts ...grpc.CallOption) (*TagDetails, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.AddTag(ctx, in, opts...)
}

// 更新标签
func (m *defaultArticleRpc) UpdateTag(ctx context.Context, in *TagNew, opts ...grpc.CallOption) (*TagDetails, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.UpdateTag(ctx, in, opts...)
}

// 查询标签
func (m *defaultArticleRpc) GetTag(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*TagDetails, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.GetTag(ctx, in, opts...)
}

// 删除标签
func (m *defaultArticleRpc) DeleteTag(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.DeleteTag(ctx, in, opts...)
}

// 查询标签数量
func (m *defaultArticleRpc) FindTagList(ctx context.Context, in *FindTagListReq, opts ...grpc.CallOption) (*FindTagListResp, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.FindTagList(ctx, in, opts...)
}
