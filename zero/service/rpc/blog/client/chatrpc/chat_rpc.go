// Code generated by goctl. DO NOT EDIT.
// Source: chat.proto

package chatrpc

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/zero/service/rpc/blog/internal/pb/chatrpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchResp               = chatrpc.BatchResp
	ChatMessageDetails      = chatrpc.ChatMessageDetails
	ChatMessageNewReq       = chatrpc.ChatMessageNewReq
	EmptyReq                = chatrpc.EmptyReq
	EmptyResp               = chatrpc.EmptyResp
	FindChatMessageListReq  = chatrpc.FindChatMessageListReq
	FindChatMessageListResp = chatrpc.FindChatMessageListResp
	IdReq                   = chatrpc.IdReq
	IdsReq                  = chatrpc.IdsReq

	ChatRpc interface {
		// 创建聊天记录
		AddChatMessage(ctx context.Context, in *ChatMessageNewReq, opts ...grpc.CallOption) (*ChatMessageDetails, error)
		// 更新聊天记录
		UpdateChatMessage(ctx context.Context, in *ChatMessageNewReq, opts ...grpc.CallOption) (*ChatMessageDetails, error)
		// 删除聊天记录
		DeletesChatMessage(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
		// 查询聊天记录列表
		FindChatMessageList(ctx context.Context, in *FindChatMessageListReq, opts ...grpc.CallOption) (*FindChatMessageListResp, error)
	}

	defaultChatRpc struct {
		cli zrpc.Client
	}
)

func NewChatRpc(cli zrpc.Client) ChatRpc {
	return &defaultChatRpc{
		cli: cli,
	}
}

// 创建聊天记录
func (m *defaultChatRpc) AddChatMessage(ctx context.Context, in *ChatMessageNewReq, opts ...grpc.CallOption) (*ChatMessageDetails, error) {
	client := chatrpc.NewChatRpcClient(m.cli.Conn())
	return client.AddChatMessage(ctx, in, opts...)
}

// 更新聊天记录
func (m *defaultChatRpc) UpdateChatMessage(ctx context.Context, in *ChatMessageNewReq, opts ...grpc.CallOption) (*ChatMessageDetails, error) {
	client := chatrpc.NewChatRpcClient(m.cli.Conn())
	return client.UpdateChatMessage(ctx, in, opts...)
}

// 删除聊天记录
func (m *defaultChatRpc) DeletesChatMessage(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := chatrpc.NewChatRpcClient(m.cli.Conn())
	return client.DeletesChatMessage(ctx, in, opts...)
}

// 查询聊天记录列表
func (m *defaultChatRpc) FindChatMessageList(ctx context.Context, in *FindChatMessageListReq, opts ...grpc.CallOption) (*FindChatMessageListResp, error) {
	client := chatrpc.NewChatRpcClient(m.cli.Conn())
	return client.FindChatMessageList(ctx, in, opts...)
}
