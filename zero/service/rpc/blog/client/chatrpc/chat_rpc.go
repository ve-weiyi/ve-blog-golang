// Code generated by goctl. DO NOT EDIT.
// Source: chat.proto

package chatrpc

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/zero/service/rpc/blog/internal/pb/chatrpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchResp              = chatrpc.BatchResp
	ChatRecordDetails      = chatrpc.ChatRecordDetails
	ChatRecordNew          = chatrpc.ChatRecordNew
	EmptyReq               = chatrpc.EmptyReq
	EmptyResp              = chatrpc.EmptyResp
	FindChatRecordListReq  = chatrpc.FindChatRecordListReq
	FindChatRecordListResp = chatrpc.FindChatRecordListResp
	IdReq                  = chatrpc.IdReq
	IdsReq                 = chatrpc.IdsReq

	ChatRpc interface {
		// 创建聊天记录
		AddChatRecord(ctx context.Context, in *ChatRecordNew, opts ...grpc.CallOption) (*ChatRecordDetails, error)
		// 更新聊天记录
		UpdateChatRecord(ctx context.Context, in *ChatRecordNew, opts ...grpc.CallOption) (*ChatRecordDetails, error)
		// 删除聊天记录
		DeleteChatRecord(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
		// 批量删除聊天记录
		DeleteChatRecordList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
		// 查询聊天记录
		GetChatRecord(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ChatRecordDetails, error)
		// 查询聊天记录列表
		FindChatRecordList(ctx context.Context, in *FindChatRecordListReq, opts ...grpc.CallOption) (*FindChatRecordListResp, error)
	}

	defaultChatRpc struct {
		cli zrpc.Client
	}
)

func NewChatRpc(cli zrpc.Client) ChatRpc {
	return &defaultChatRpc{
		cli: cli,
	}
}

// 创建聊天记录
func (m *defaultChatRpc) AddChatRecord(ctx context.Context, in *ChatRecordNew, opts ...grpc.CallOption) (*ChatRecordDetails, error) {
	client := chatrpc.NewChatRpcClient(m.cli.Conn())
	return client.AddChatRecord(ctx, in, opts...)
}

// 更新聊天记录
func (m *defaultChatRpc) UpdateChatRecord(ctx context.Context, in *ChatRecordNew, opts ...grpc.CallOption) (*ChatRecordDetails, error) {
	client := chatrpc.NewChatRpcClient(m.cli.Conn())
	return client.UpdateChatRecord(ctx, in, opts...)
}

// 删除聊天记录
func (m *defaultChatRpc) DeleteChatRecord(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := chatrpc.NewChatRpcClient(m.cli.Conn())
	return client.DeleteChatRecord(ctx, in, opts...)
}

// 批量删除聊天记录
func (m *defaultChatRpc) DeleteChatRecordList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := chatrpc.NewChatRpcClient(m.cli.Conn())
	return client.DeleteChatRecordList(ctx, in, opts...)
}

// 查询聊天记录
func (m *defaultChatRpc) GetChatRecord(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ChatRecordDetails, error) {
	client := chatrpc.NewChatRpcClient(m.cli.Conn())
	return client.GetChatRecord(ctx, in, opts...)
}

// 查询聊天记录列表
func (m *defaultChatRpc) FindChatRecordList(ctx context.Context, in *FindChatRecordListReq, opts ...grpc.CallOption) (*FindChatRecordListResp, error) {
	client := chatrpc.NewChatRpcClient(m.cli.Conn())
	return client.FindChatRecordList(ctx, in, opts...)
}
