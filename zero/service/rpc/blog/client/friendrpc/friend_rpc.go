// Code generated by goctl. DO NOT EDIT.
// Source: friend.proto

package friendrpc

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/zero/service/rpc/blog/internal/pb/friendrpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchResp          = friendrpc.BatchResp
	EmptyReq           = friendrpc.EmptyReq
	EmptyResp          = friendrpc.EmptyResp
	FindFriendListReq  = friendrpc.FindFriendListReq
	FindFriendListResp = friendrpc.FindFriendListResp
	FriendDetails      = friendrpc.FriendDetails
	FriendNewReq       = friendrpc.FriendNewReq
	IdReq              = friendrpc.IdReq
	IdsReq             = friendrpc.IdsReq
	UserIdReq          = friendrpc.UserIdReq

	FriendRpc interface {
		// 创建友链
		AddFriend(ctx context.Context, in *FriendNewReq, opts ...grpc.CallOption) (*FriendDetails, error)
		// 更新友链
		UpdateFriend(ctx context.Context, in *FriendNewReq, opts ...grpc.CallOption) (*FriendDetails, error)
		// 删除友链
		DeleteFriend(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
		// 查询友链列表
		FindFriendList(ctx context.Context, in *FindFriendListReq, opts ...grpc.CallOption) (*FindFriendListResp, error)
	}

	defaultFriendRpc struct {
		cli zrpc.Client
	}
)

func NewFriendRpc(cli zrpc.Client) FriendRpc {
	return &defaultFriendRpc{
		cli: cli,
	}
}

// 创建友链
func (m *defaultFriendRpc) AddFriend(ctx context.Context, in *FriendNewReq, opts ...grpc.CallOption) (*FriendDetails, error) {
	client := friendrpc.NewFriendRpcClient(m.cli.Conn())
	return client.AddFriend(ctx, in, opts...)
}

// 更新友链
func (m *defaultFriendRpc) UpdateFriend(ctx context.Context, in *FriendNewReq, opts ...grpc.CallOption) (*FriendDetails, error) {
	client := friendrpc.NewFriendRpcClient(m.cli.Conn())
	return client.UpdateFriend(ctx, in, opts...)
}

// 删除友链
func (m *defaultFriendRpc) DeleteFriend(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := friendrpc.NewFriendRpcClient(m.cli.Conn())
	return client.DeleteFriend(ctx, in, opts...)
}

// 查询友链列表
func (m *defaultFriendRpc) FindFriendList(ctx context.Context, in *FindFriendListReq, opts ...grpc.CallOption) (*FindFriendListResp, error) {
	client := friendrpc.NewFriendRpcClient(m.cli.Conn())
	return client.FindFriendList(ctx, in, opts...)
}
