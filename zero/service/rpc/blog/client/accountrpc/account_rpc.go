// Code generated by goctl. DO NOT EDIT.
// Source: account.proto

package accountrpc

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/zero/service/rpc/blog/internal/pb/accountrpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchResp                = accountrpc.BatchResp
	BindUserEmailReq         = accountrpc.BindUserEmailReq
	EmptyReq                 = accountrpc.EmptyReq
	EmptyResp                = accountrpc.EmptyResp
	FindLoginHistoryListReq  = accountrpc.FindLoginHistoryListReq
	FindLoginHistoryListResp = accountrpc.FindLoginHistoryListResp
	FindUserInfoListResp     = accountrpc.FindUserInfoListResp
	FindUserListReq          = accountrpc.FindUserListReq
	FindUserListResp         = accountrpc.FindUserListResp
	GetUserAreasAnalysisResp = accountrpc.GetUserAreasAnalysisResp
	IdReq                    = accountrpc.IdReq
	IdsReq                   = accountrpc.IdsReq
	LoginReq                 = accountrpc.LoginReq
	LoginResp                = accountrpc.LoginResp
	LogoffReq                = accountrpc.LogoffReq
	LogoutReq                = accountrpc.LogoutReq
	LogoutResp               = accountrpc.LogoutResp
	OauthLoginReq            = accountrpc.OauthLoginReq
	OauthLoginUrlResp        = accountrpc.OauthLoginUrlResp
	RegisterReq              = accountrpc.RegisterReq
	ResetPasswordReq         = accountrpc.ResetPasswordReq
	UpdateUserInfoReq        = accountrpc.UpdateUserInfoReq
	UpdateUserStatusReq      = accountrpc.UpdateUserStatusReq
	User                     = accountrpc.User
	UserEmailReq             = accountrpc.UserEmailReq
	UserIdReq                = accountrpc.UserIdReq
	UserInfoResp             = accountrpc.UserInfoResp
	UserLoginHistory         = accountrpc.UserLoginHistory
	UserRegion               = accountrpc.UserRegion
	UserRoleLabel            = accountrpc.UserRoleLabel

	AccountRpc interface {
		// 登录
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		// 登出
		Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
		// 注销
		Logoff(ctx context.Context, in *LogoffReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 注册
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*LoginResp, error)
		// 重置密码
		ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 修改用户邮箱
		BindUserEmail(ctx context.Context, in *BindUserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 发送注册邮件
		SendRegisterEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 发送重置密码邮件
		SendResetPasswordEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 发送绑定邮箱邮件
		SendBindEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 第三方登录
		OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		// 获取第三方登录授权地址
		GetOauthAuthorizeUrl(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthLoginUrlResp, error)
		// 获取用户信息
		GetUserInfo(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		// 修改用户信息
		UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 修改用户状态
		UpdateUserStatus(ctx context.Context, in *UpdateUserStatusReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 查找用户列表
		FindUserList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserListResp, error)
		// 查找在线用户列表
		FindUserOnlineList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserInfoListResp, error)
		// 查找用户信息列表
		FindUserInfoList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserInfoListResp, error)
		// 查询用户登录历史
		FindUserLoginHistoryList(ctx context.Context, in *FindLoginHistoryListReq, opts ...grpc.CallOption) (*FindLoginHistoryListResp, error)
		// 查询用户分布区域
		GetUserAreasAnalysis(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetUserAreasAnalysisResp, error)
	}

	defaultAccountRpc struct {
		cli zrpc.Client
	}
)

func NewAccountRpc(cli zrpc.Client) AccountRpc {
	return &defaultAccountRpc{
		cli: cli,
	}
}

// 登录
func (m *defaultAccountRpc) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// 登出
func (m *defaultAccountRpc) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

// 注销
func (m *defaultAccountRpc) Logoff(ctx context.Context, in *LogoffReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.Logoff(ctx, in, opts...)
}

// 注册
func (m *defaultAccountRpc) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// 重置密码
func (m *defaultAccountRpc) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.ResetPassword(ctx, in, opts...)
}

// 修改用户邮箱
func (m *defaultAccountRpc) BindUserEmail(ctx context.Context, in *BindUserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.BindUserEmail(ctx, in, opts...)
}

// 发送注册邮件
func (m *defaultAccountRpc) SendRegisterEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.SendRegisterEmail(ctx, in, opts...)
}

// 发送重置密码邮件
func (m *defaultAccountRpc) SendResetPasswordEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.SendResetPasswordEmail(ctx, in, opts...)
}

// 发送绑定邮箱邮件
func (m *defaultAccountRpc) SendBindEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.SendBindEmail(ctx, in, opts...)
}

// 第三方登录
func (m *defaultAccountRpc) OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.OauthLogin(ctx, in, opts...)
}

// 获取第三方登录授权地址
func (m *defaultAccountRpc) GetOauthAuthorizeUrl(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthLoginUrlResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.GetOauthAuthorizeUrl(ctx, in, opts...)
}

// 获取用户信息
func (m *defaultAccountRpc) GetUserInfo(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

// 修改用户信息
func (m *defaultAccountRpc) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.UpdateUserInfo(ctx, in, opts...)
}

// 修改用户状态
func (m *defaultAccountRpc) UpdateUserStatus(ctx context.Context, in *UpdateUserStatusReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.UpdateUserStatus(ctx, in, opts...)
}

// 查找用户列表
func (m *defaultAccountRpc) FindUserList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserListResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.FindUserList(ctx, in, opts...)
}

// 查找在线用户列表
func (m *defaultAccountRpc) FindUserOnlineList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserInfoListResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.FindUserOnlineList(ctx, in, opts...)
}

// 查找用户信息列表
func (m *defaultAccountRpc) FindUserInfoList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserInfoListResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.FindUserInfoList(ctx, in, opts...)
}

// 查询用户登录历史
func (m *defaultAccountRpc) FindUserLoginHistoryList(ctx context.Context, in *FindLoginHistoryListReq, opts ...grpc.CallOption) (*FindLoginHistoryListResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.FindUserLoginHistoryList(ctx, in, opts...)
}

// 查询用户分布区域
func (m *defaultAccountRpc) GetUserAreasAnalysis(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetUserAreasAnalysisResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.GetUserAreasAnalysis(ctx, in, opts...)
}
