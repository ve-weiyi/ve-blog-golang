// Code generated by goctl. DO NOT EDIT.
// Source: comment.proto

package commentrpc

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/zero/service/rpc/blog/internal/pb/commentrpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchResp           = commentrpc.BatchResp
	CommentDetails      = commentrpc.CommentDetails
	CommentNew          = commentrpc.CommentNew
	CommentUserInfo     = commentrpc.CommentUserInfo
	CountResp           = commentrpc.CountResp
	EmptyReq            = commentrpc.EmptyReq
	EmptyResp           = commentrpc.EmptyResp
	FindCommentListReq  = commentrpc.FindCommentListReq
	FindCommentListResp = commentrpc.FindCommentListResp
	FindLikeCommentResp = commentrpc.FindLikeCommentResp
	IdReq               = commentrpc.IdReq
	IdsReq              = commentrpc.IdsReq
	UserIdReq           = commentrpc.UserIdReq

	CommentRpc interface {
		// 创建评论
		AddComment(ctx context.Context, in *CommentNew, opts ...grpc.CallOption) (*CommentDetails, error)
		// 更新评论
		UpdateComment(ctx context.Context, in *CommentNew, opts ...grpc.CallOption) (*CommentDetails, error)
		// 删除评论
		DeleteComment(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
		// 批量删除评论
		DeleteCommentList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
		// 查询评论
		FindComment(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*CommentDetails, error)
		// 查询评论列表
		FindCommentList(ctx context.Context, in *FindCommentListReq, opts ...grpc.CallOption) (*FindCommentListResp, error)
		// 点赞评论
		LikeComment(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 用户点赞的评论
		FindUserLikeComment(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindLikeCommentResp, error)
	}

	defaultCommentRpc struct {
		cli zrpc.Client
	}
)

func NewCommentRpc(cli zrpc.Client) CommentRpc {
	return &defaultCommentRpc{
		cli: cli,
	}
}

// 创建评论
func (m *defaultCommentRpc) AddComment(ctx context.Context, in *CommentNew, opts ...grpc.CallOption) (*CommentDetails, error) {
	client := commentrpc.NewCommentRpcClient(m.cli.Conn())
	return client.AddComment(ctx, in, opts...)
}

// 更新评论
func (m *defaultCommentRpc) UpdateComment(ctx context.Context, in *CommentNew, opts ...grpc.CallOption) (*CommentDetails, error) {
	client := commentrpc.NewCommentRpcClient(m.cli.Conn())
	return client.UpdateComment(ctx, in, opts...)
}

// 删除评论
func (m *defaultCommentRpc) DeleteComment(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := commentrpc.NewCommentRpcClient(m.cli.Conn())
	return client.DeleteComment(ctx, in, opts...)
}

// 批量删除评论
func (m *defaultCommentRpc) DeleteCommentList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := commentrpc.NewCommentRpcClient(m.cli.Conn())
	return client.DeleteCommentList(ctx, in, opts...)
}

// 查询评论
func (m *defaultCommentRpc) FindComment(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*CommentDetails, error) {
	client := commentrpc.NewCommentRpcClient(m.cli.Conn())
	return client.FindComment(ctx, in, opts...)
}

// 查询评论列表
func (m *defaultCommentRpc) FindCommentList(ctx context.Context, in *FindCommentListReq, opts ...grpc.CallOption) (*FindCommentListResp, error) {
	client := commentrpc.NewCommentRpcClient(m.cli.Conn())
	return client.FindCommentList(ctx, in, opts...)
}

// 点赞评论
func (m *defaultCommentRpc) LikeComment(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := commentrpc.NewCommentRpcClient(m.cli.Conn())
	return client.LikeComment(ctx, in, opts...)
}

// 用户点赞的评论
func (m *defaultCommentRpc) FindUserLikeComment(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindLikeCommentResp, error) {
	client := commentrpc.NewCommentRpcClient(m.cli.Conn())
	return client.FindUserLikeComment(ctx, in, opts...)
}
