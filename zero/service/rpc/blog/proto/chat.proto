// 声明 proto 语法版本，固定值
syntax = "proto3";

// proto 包名
package chatrpc;

// 生成 golang 代码后的包名
option go_package = "./chatrpc";

message EmptyReq {
}

message EmptyResp {
}

message IdReq {
  int64 id = 1;
}
message IdsReq {
  repeated int64 ids = 1;
}

message BatchResp {
  int64 success_count = 1;
}

/************** blog 聊天记录 **************/

message ChatRecordNewReq {
  int64 id = 1;// 主键
  int64 user_id = 2;// 用户id
  string nickname = 3;// 昵称
  string avatar = 4;// 头像
  string content = 5;// 聊天内容
  string ip_address = 6;// ip地址
  string ip_source = 7;// ip来源
  int64 type = 8;// 类型
  int64 created_at = 9;// 创建时间
  int64 updated_at = 10;// 更新时间
}

message ChatRecordDetails {
  int64 id = 1;// 主键
  int64 user_id = 2;// 用户id
  string nickname = 3;// 昵称
  string avatar = 4;// 头像
  string content = 5;// 聊天内容
  string ip_address = 6;// ip地址
  string ip_source = 7;// ip来源
  int64 type = 8;// 类型
  int64 created_at = 9;// 创建时间
  int64 updated_at = 10;// 更新时间
}

message FindChatRecordListReq {
  int64 page = 1;
  int64 page_size = 2;
  repeated string sorts = 3; // 排序
}

message FindChatRecordListResp {
  repeated ChatRecordDetails list = 1;
  int64 total = 2;
}

service ChatRpc {
  // 创建聊天记录
  rpc AddChatRecord(ChatRecordNewReq) returns(ChatRecordDetails);
  // 更新聊天记录
  rpc UpdateChatRecord(ChatRecordNewReq) returns(ChatRecordDetails);
  // 删除聊天记录
  rpc DeleteChatRecord(IdsReq) returns(BatchResp);
  // 查询聊天记录
  rpc GetChatRecord(IdReq) returns(ChatRecordDetails);
  // 查询聊天记录列表
  rpc FindChatRecordList(FindChatRecordListReq) returns(FindChatRecordListResp);
}
