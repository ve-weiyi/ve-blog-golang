// Code generated by goctl. DO NOT EDIT.
// Source: blog.proto

package server

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/zero/service/rpc/blog/internal/logic/rolerpc"
	"github.com/ve-weiyi/ve-blog-golang/zero/service/rpc/blog/internal/pb/blog"
	"github.com/ve-weiyi/ve-blog-golang/zero/service/rpc/blog/internal/svc"
)

type RoleRpcServer struct {
	svcCtx *svc.ServiceContext
	blog.UnimplementedRoleRpcServer
}

func NewRoleRpcServer(svcCtx *svc.ServiceContext) *RoleRpcServer {
	return &RoleRpcServer{
		svcCtx: svcCtx,
	}
}

// 创建角色
func (s *RoleRpcServer) AddRole(ctx context.Context, in *blog.Role) (*blog.Role, error) {
	l := rolerpclogic.NewAddRoleLogic(ctx, s.svcCtx)
	return l.AddRole(in)
}

// 更新角色
func (s *RoleRpcServer) UpdateRole(ctx context.Context, in *blog.Role) (*blog.Role, error) {
	l := rolerpclogic.NewUpdateRoleLogic(ctx, s.svcCtx)
	return l.UpdateRole(in)
}

// 删除角色
func (s *RoleRpcServer) DeleteRole(ctx context.Context, in *blog.IdReq) (*blog.BatchResp, error) {
	l := rolerpclogic.NewDeleteRoleLogic(ctx, s.svcCtx)
	return l.DeleteRole(in)
}

// 批量删除角色
func (s *RoleRpcServer) DeleteRoleList(ctx context.Context, in *blog.IdsReq) (*blog.BatchResp, error) {
	l := rolerpclogic.NewDeleteRoleListLogic(ctx, s.svcCtx)
	return l.DeleteRoleList(in)
}

// 查询角色
func (s *RoleRpcServer) FindRole(ctx context.Context, in *blog.IdReq) (*blog.Role, error) {
	l := rolerpclogic.NewFindRoleLogic(ctx, s.svcCtx)
	return l.FindRole(in)
}

// 查询角色列表
func (s *RoleRpcServer) FindRoleList(ctx context.Context, in *blog.PageQuery) (*blog.FindRoleListResp, error) {
	l := rolerpclogic.NewFindRoleListLogic(ctx, s.svcCtx)
	return l.FindRoleList(in)
}

// 查询角色资源权限
func (s *RoleRpcServer) FindRoleResources(ctx context.Context, in *blog.IdReq) (*blog.RoleResourcesResp, error) {
	l := rolerpclogic.NewFindRoleResourcesLogic(ctx, s.svcCtx)
	return l.FindRoleResources(in)
}

// 更新角色菜单
func (s *RoleRpcServer) UpdateRoleMenus(ctx context.Context, in *blog.UpdateRoleMenusReq) (*blog.EmptyResp, error) {
	l := rolerpclogic.NewUpdateRoleMenusLogic(ctx, s.svcCtx)
	return l.UpdateRoleMenus(in)
}

// 更新角色资源
func (s *RoleRpcServer) UpdateRoleApis(ctx context.Context, in *blog.UpdateRoleApisReq) (*blog.EmptyResp, error) {
	l := rolerpclogic.NewUpdateRoleApisLogic(ctx, s.svcCtx)
	return l.UpdateRoleApis(in)
}

// 修改用户角色
func (s *RoleRpcServer) UpdateUserRole(ctx context.Context, in *blog.UpdateUserRoleReq) (*blog.EmptyResp, error) {
	l := rolerpclogic.NewUpdateUserRoleLogic(ctx, s.svcCtx)
	return l.UpdateUserRole(in)
}

// 获取用户接口权限
func (s *RoleRpcServer) FindUserApis(ctx context.Context, in *blog.UserIdReq) (*blog.FindApiListResp, error) {
	l := rolerpclogic.NewFindUserApisLogic(ctx, s.svcCtx)
	return l.FindUserApis(in)
}

// 获取用户菜单权限
func (s *RoleRpcServer) FindUserMenus(ctx context.Context, in *blog.UserIdReq) (*blog.FindMenuListResp, error) {
	l := rolerpclogic.NewFindUserMenusLogic(ctx, s.svcCtx)
	return l.FindUserMenus(in)
}

// 获取用户角色信息
func (s *RoleRpcServer) FindUserRoles(ctx context.Context, in *blog.UserIdReq) (*blog.FindRoleListResp, error) {
	l := rolerpclogic.NewFindUserRolesLogic(ctx, s.svcCtx)
	return l.FindUserRoles(in)
}
