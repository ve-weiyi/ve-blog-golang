// Code generated by goctl. DO NOT EDIT.
// Source: friend.proto

package server

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/zero/service/rpc/blog/internal/logic/friendrpc"
	"github.com/ve-weiyi/ve-blog-golang/zero/service/rpc/blog/internal/pb/friendrpc"
	"github.com/ve-weiyi/ve-blog-golang/zero/service/rpc/blog/internal/svc"
)

type FriendRpcServer struct {
	svcCtx *svc.ServiceContext
	friendrpc.UnimplementedFriendRpcServer
}

func NewFriendRpcServer(svcCtx *svc.ServiceContext) *FriendRpcServer {
	return &FriendRpcServer{
		svcCtx: svcCtx,
	}
}

// 创建友链
func (s *FriendRpcServer) AddFriend(ctx context.Context, in *friendrpc.FriendNewReq) (*friendrpc.FriendDetails, error) {
	l := friendrpclogic.NewAddFriendLogic(ctx, s.svcCtx)
	return l.AddFriend(in)
}

// 更新友链
func (s *FriendRpcServer) UpdateFriend(ctx context.Context, in *friendrpc.FriendNewReq) (*friendrpc.FriendDetails, error) {
	l := friendrpclogic.NewUpdateFriendLogic(ctx, s.svcCtx)
	return l.UpdateFriend(in)
}

// 删除友链
func (s *FriendRpcServer) DeleteFriend(ctx context.Context, in *friendrpc.IdsReq) (*friendrpc.BatchResp, error) {
	l := friendrpclogic.NewDeleteFriendLogic(ctx, s.svcCtx)
	return l.DeleteFriend(in)
}

// 查询友链列表
func (s *FriendRpcServer) FindFriendList(ctx context.Context, in *friendrpc.FindFriendListReq) (*friendrpc.FindFriendListResp, error) {
	l := friendrpclogic.NewFindFriendListLogic(ctx, s.svcCtx)
	return l.FindFriendList(in)
}
