// Code generated by goctl. DO NOT EDIT.
// Source: blog.proto

package server

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/zero/service/rpc/blog/internal/logic/apirpc"
	"github.com/ve-weiyi/ve-blog-golang/zero/service/rpc/blog/internal/pb/blog"
	"github.com/ve-weiyi/ve-blog-golang/zero/service/rpc/blog/internal/svc"
)

type ApiRpcServer struct {
	svcCtx *svc.ServiceContext
	blog.UnimplementedApiRpcServer
}

func NewApiRpcServer(svcCtx *svc.ServiceContext) *ApiRpcServer {
	return &ApiRpcServer{
		svcCtx: svcCtx,
	}
}

// 创建接口
func (s *ApiRpcServer) AddApi(ctx context.Context, in *blog.Api) (*blog.Api, error) {
	l := apirpclogic.NewAddApiLogic(ctx, s.svcCtx)
	return l.AddApi(in)
}

// 更新接口
func (s *ApiRpcServer) UpdateApi(ctx context.Context, in *blog.Api) (*blog.Api, error) {
	l := apirpclogic.NewUpdateApiLogic(ctx, s.svcCtx)
	return l.UpdateApi(in)
}

// 删除接口
func (s *ApiRpcServer) DeleteApi(ctx context.Context, in *blog.IdReq) (*blog.BatchResp, error) {
	l := apirpclogic.NewDeleteApiLogic(ctx, s.svcCtx)
	return l.DeleteApi(in)
}

// 批量删除接口
func (s *ApiRpcServer) DeleteApiList(ctx context.Context, in *blog.IdsReq) (*blog.BatchResp, error) {
	l := apirpclogic.NewDeleteApiListLogic(ctx, s.svcCtx)
	return l.DeleteApiList(in)
}

// 查询接口
func (s *ApiRpcServer) FindApi(ctx context.Context, in *blog.IdReq) (*blog.Api, error) {
	l := apirpclogic.NewFindApiLogic(ctx, s.svcCtx)
	return l.FindApi(in)
}

// 查询接口列表
func (s *ApiRpcServer) FindApiList(ctx context.Context, in *blog.PageQuery) (*blog.ApiPageResp, error) {
	l := apirpclogic.NewFindApiListLogic(ctx, s.svcCtx)
	return l.FindApiList(in)
}

// 同步接口列表
func (s *ApiRpcServer) SyncApiList(ctx context.Context, in *blog.EmptyReq) (*blog.BatchResp, error) {
	l := apirpclogic.NewSyncApiListLogic(ctx, s.svcCtx)
	return l.SyncApiList(in)
}

// 清空接口列表
func (s *ApiRpcServer) CleanApiList(ctx context.Context, in *blog.EmptyReq) (*blog.BatchResp, error) {
	l := apirpclogic.NewCleanApiListLogic(ctx, s.svcCtx)
	return l.CleanApiList(in)
}
