// 声明 proto 语法版本，固定值

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: blog.proto

// proto 包名

package blog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthRpc_Login_FullMethodName                  = "/blog.AuthRpc/Login"
	AuthRpc_Logout_FullMethodName                 = "/blog.AuthRpc/Logout"
	AuthRpc_Logoff_FullMethodName                 = "/blog.AuthRpc/Logoff"
	AuthRpc_Register_FullMethodName               = "/blog.AuthRpc/Register"
	AuthRpc_ResetPassword_FullMethodName          = "/blog.AuthRpc/ResetPassword"
	AuthRpc_BindUserEmail_FullMethodName          = "/blog.AuthRpc/BindUserEmail"
	AuthRpc_SendRegisterEmail_FullMethodName      = "/blog.AuthRpc/SendRegisterEmail"
	AuthRpc_SendResetPasswordEmail_FullMethodName = "/blog.AuthRpc/SendResetPasswordEmail"
	AuthRpc_SendBindEmail_FullMethodName          = "/blog.AuthRpc/SendBindEmail"
	AuthRpc_OauthLogin_FullMethodName             = "/blog.AuthRpc/OauthLogin"
	AuthRpc_GetOauthAuthorizeUrl_FullMethodName   = "/blog.AuthRpc/GetOauthAuthorizeUrl"
	AuthRpc_GetLogoutAt_FullMethodName            = "/blog.AuthRpc/GetLogoutAt"
)

// AuthRpcClient is the client API for AuthRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthRpcClient interface {
	// 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 登出
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
	// 注销
	Logoff(ctx context.Context, in *LogoffReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 注册
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 重置密码
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 修改用户邮箱
	BindUserEmail(ctx context.Context, in *BindUserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 发送注册邮件
	SendRegisterEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 发送重置密码邮件
	SendResetPasswordEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 发送绑定邮箱邮件
	SendBindEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 第三方登录
	OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 获取第三方登录授权地址
	GetOauthAuthorizeUrl(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthLoginUrlResp, error)
	// 获取用户登录时间
	GetLogoutAt(ctx context.Context, in *GetLogoutAtReq, opts ...grpc.CallOption) (*LogoutResp, error)
}

type authRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthRpcClient(cc grpc.ClientConnInterface) AuthRpcClient {
	return &authRpcClient{cc}
}

func (c *authRpcClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, AuthRpc_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	out := new(LogoutResp)
	err := c.cc.Invoke(ctx, AuthRpc_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) Logoff(ctx context.Context, in *LogoffReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AuthRpc_Logoff_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, AuthRpc_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AuthRpc_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) BindUserEmail(ctx context.Context, in *BindUserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AuthRpc_BindUserEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) SendRegisterEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AuthRpc_SendRegisterEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) SendResetPasswordEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AuthRpc_SendResetPasswordEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) SendBindEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AuthRpc_SendBindEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, AuthRpc_OauthLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) GetOauthAuthorizeUrl(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthLoginUrlResp, error) {
	out := new(OauthLoginUrlResp)
	err := c.cc.Invoke(ctx, AuthRpc_GetOauthAuthorizeUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) GetLogoutAt(ctx context.Context, in *GetLogoutAtReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	out := new(LogoutResp)
	err := c.cc.Invoke(ctx, AuthRpc_GetLogoutAt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthRpcServer is the server API for AuthRpc service.
// All implementations must embed UnimplementedAuthRpcServer
// for forward compatibility
type AuthRpcServer interface {
	// 登录
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// 登出
	Logout(context.Context, *LogoutReq) (*LogoutResp, error)
	// 注销
	Logoff(context.Context, *LogoffReq) (*EmptyResp, error)
	// 注册
	Register(context.Context, *RegisterReq) (*LoginResp, error)
	// 重置密码
	ResetPassword(context.Context, *ResetPasswordReq) (*EmptyResp, error)
	// 修改用户邮箱
	BindUserEmail(context.Context, *BindUserEmailReq) (*EmptyResp, error)
	// 发送注册邮件
	SendRegisterEmail(context.Context, *UserEmailReq) (*EmptyResp, error)
	// 发送重置密码邮件
	SendResetPasswordEmail(context.Context, *UserEmailReq) (*EmptyResp, error)
	// 发送绑定邮箱邮件
	SendBindEmail(context.Context, *UserEmailReq) (*EmptyResp, error)
	// 第三方登录
	OauthLogin(context.Context, *OauthLoginReq) (*LoginResp, error)
	// 获取第三方登录授权地址
	GetOauthAuthorizeUrl(context.Context, *OauthLoginReq) (*OauthLoginUrlResp, error)
	// 获取用户登录时间
	GetLogoutAt(context.Context, *GetLogoutAtReq) (*LogoutResp, error)
	mustEmbedUnimplementedAuthRpcServer()
}

// UnimplementedAuthRpcServer must be embedded to have forward compatible implementations.
type UnimplementedAuthRpcServer struct {
}

func (UnimplementedAuthRpcServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthRpcServer) Logout(context.Context, *LogoutReq) (*LogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthRpcServer) Logoff(context.Context, *LogoffReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logoff not implemented")
}
func (UnimplementedAuthRpcServer) Register(context.Context, *RegisterReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthRpcServer) ResetPassword(context.Context, *ResetPasswordReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedAuthRpcServer) BindUserEmail(context.Context, *BindUserEmailReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindUserEmail not implemented")
}
func (UnimplementedAuthRpcServer) SendRegisterEmail(context.Context, *UserEmailReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRegisterEmail not implemented")
}
func (UnimplementedAuthRpcServer) SendResetPasswordEmail(context.Context, *UserEmailReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResetPasswordEmail not implemented")
}
func (UnimplementedAuthRpcServer) SendBindEmail(context.Context, *UserEmailReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBindEmail not implemented")
}
func (UnimplementedAuthRpcServer) OauthLogin(context.Context, *OauthLoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthLogin not implemented")
}
func (UnimplementedAuthRpcServer) GetOauthAuthorizeUrl(context.Context, *OauthLoginReq) (*OauthLoginUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthAuthorizeUrl not implemented")
}
func (UnimplementedAuthRpcServer) GetLogoutAt(context.Context, *GetLogoutAtReq) (*LogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogoutAt not implemented")
}
func (UnimplementedAuthRpcServer) mustEmbedUnimplementedAuthRpcServer() {}

// UnsafeAuthRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthRpcServer will
// result in compilation errors.
type UnsafeAuthRpcServer interface {
	mustEmbedUnimplementedAuthRpcServer()
}

func RegisterAuthRpcServer(s grpc.ServiceRegistrar, srv AuthRpcServer) {
	s.RegisterService(&AuthRpc_ServiceDesc, srv)
}

func _AuthRpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_Logoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).Logoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_Logoff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).Logoff(ctx, req.(*LogoffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_BindUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindUserEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).BindUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_BindUserEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).BindUserEmail(ctx, req.(*BindUserEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_SendRegisterEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).SendRegisterEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_SendRegisterEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).SendRegisterEmail(ctx, req.(*UserEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_SendResetPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).SendResetPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_SendResetPasswordEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).SendResetPasswordEmail(ctx, req.(*UserEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_SendBindEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).SendBindEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_SendBindEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).SendBindEmail(ctx, req.(*UserEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_OauthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).OauthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_OauthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).OauthLogin(ctx, req.(*OauthLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_GetOauthAuthorizeUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).GetOauthAuthorizeUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_GetOauthAuthorizeUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).GetOauthAuthorizeUrl(ctx, req.(*OauthLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_GetLogoutAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogoutAtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).GetLogoutAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_GetLogoutAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).GetLogoutAt(ctx, req.(*GetLogoutAtReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthRpc_ServiceDesc is the grpc.ServiceDesc for AuthRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.AuthRpc",
	HandlerType: (*AuthRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthRpc_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthRpc_Logout_Handler,
		},
		{
			MethodName: "Logoff",
			Handler:    _AuthRpc_Logoff_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AuthRpc_Register_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _AuthRpc_ResetPassword_Handler,
		},
		{
			MethodName: "BindUserEmail",
			Handler:    _AuthRpc_BindUserEmail_Handler,
		},
		{
			MethodName: "SendRegisterEmail",
			Handler:    _AuthRpc_SendRegisterEmail_Handler,
		},
		{
			MethodName: "SendResetPasswordEmail",
			Handler:    _AuthRpc_SendResetPasswordEmail_Handler,
		},
		{
			MethodName: "SendBindEmail",
			Handler:    _AuthRpc_SendBindEmail_Handler,
		},
		{
			MethodName: "OauthLogin",
			Handler:    _AuthRpc_OauthLogin_Handler,
		},
		{
			MethodName: "GetOauthAuthorizeUrl",
			Handler:    _AuthRpc_GetOauthAuthorizeUrl_Handler,
		},
		{
			MethodName: "GetLogoutAt",
			Handler:    _AuthRpc_GetLogoutAt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	UserRpc_UpdateUserInfo_FullMethodName             = "/blog.UserRpc/UpdateUserInfo"
	UserRpc_UpdateUserStatus_FullMethodName           = "/blog.UserRpc/UpdateUserStatus"
	UserRpc_FindUserInfo_FullMethodName               = "/blog.UserRpc/FindUserInfo"
	UserRpc_FindUserList_FullMethodName               = "/blog.UserRpc/FindUserList"
	UserRpc_FindUserOnlineList_FullMethodName         = "/blog.UserRpc/FindUserOnlineList"
	UserRpc_FindUserLoginHistoryList_FullMethodName   = "/blog.UserRpc/FindUserLoginHistoryList"
	UserRpc_DeleteUserLoginHistoryList_FullMethodName = "/blog.UserRpc/DeleteUserLoginHistoryList"
	UserRpc_FindUserRegionList_FullMethodName         = "/blog.UserRpc/FindUserRegionList"
)

// UserRpcClient is the client API for UserRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRpcClient interface {
	// 修改用户信息
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 修改用户状态
	UpdateUserStatus(ctx context.Context, in *UpdateUserStatusReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 获取用户信息
	FindUserInfo(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*UserInfoResp, error)
	// 查找用户列表
	FindUserList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserListResp, error)
	// 查找在线用户列表
	FindUserOnlineList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserListResp, error)
	// 查询用户登录历史
	FindUserLoginHistoryList(ctx context.Context, in *FindLoginHistoryListReq, opts ...grpc.CallOption) (*FindLoginHistoryListResp, error)
	// 批量删除登录历史
	DeleteUserLoginHistoryList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询用户分布区域
	FindUserRegionList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*FindUserRegionListResp, error)
}

type userRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRpcClient(cc grpc.ClientConnInterface) UserRpcClient {
	return &userRpcClient{cc}
}

func (c *userRpcClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, UserRpc_UpdateUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UpdateUserStatus(ctx context.Context, in *UpdateUserStatusReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, UserRpc_UpdateUserStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) FindUserInfo(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	out := new(UserInfoResp)
	err := c.cc.Invoke(ctx, UserRpc_FindUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) FindUserList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserListResp, error) {
	out := new(FindUserListResp)
	err := c.cc.Invoke(ctx, UserRpc_FindUserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) FindUserOnlineList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserListResp, error) {
	out := new(FindUserListResp)
	err := c.cc.Invoke(ctx, UserRpc_FindUserOnlineList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) FindUserLoginHistoryList(ctx context.Context, in *FindLoginHistoryListReq, opts ...grpc.CallOption) (*FindLoginHistoryListResp, error) {
	out := new(FindLoginHistoryListResp)
	err := c.cc.Invoke(ctx, UserRpc_FindUserLoginHistoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) DeleteUserLoginHistoryList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, UserRpc_DeleteUserLoginHistoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) FindUserRegionList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*FindUserRegionListResp, error) {
	out := new(FindUserRegionListResp)
	err := c.cc.Invoke(ctx, UserRpc_FindUserRegionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRpcServer is the server API for UserRpc service.
// All implementations must embed UnimplementedUserRpcServer
// for forward compatibility
type UserRpcServer interface {
	// 修改用户信息
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*EmptyResp, error)
	// 修改用户状态
	UpdateUserStatus(context.Context, *UpdateUserStatusReq) (*EmptyResp, error)
	// 获取用户信息
	FindUserInfo(context.Context, *UserIdReq) (*UserInfoResp, error)
	// 查找用户列表
	FindUserList(context.Context, *FindUserListReq) (*FindUserListResp, error)
	// 查找在线用户列表
	FindUserOnlineList(context.Context, *FindUserListReq) (*FindUserListResp, error)
	// 查询用户登录历史
	FindUserLoginHistoryList(context.Context, *FindLoginHistoryListReq) (*FindLoginHistoryListResp, error)
	// 批量删除登录历史
	DeleteUserLoginHistoryList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询用户分布区域
	FindUserRegionList(context.Context, *EmptyReq) (*FindUserRegionListResp, error)
	mustEmbedUnimplementedUserRpcServer()
}

// UnimplementedUserRpcServer must be embedded to have forward compatible implementations.
type UnimplementedUserRpcServer struct {
}

func (UnimplementedUserRpcServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedUserRpcServer) UpdateUserStatus(context.Context, *UpdateUserStatusReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStatus not implemented")
}
func (UnimplementedUserRpcServer) FindUserInfo(context.Context, *UserIdReq) (*UserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserInfo not implemented")
}
func (UnimplementedUserRpcServer) FindUserList(context.Context, *FindUserListReq) (*FindUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserList not implemented")
}
func (UnimplementedUserRpcServer) FindUserOnlineList(context.Context, *FindUserListReq) (*FindUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserOnlineList not implemented")
}
func (UnimplementedUserRpcServer) FindUserLoginHistoryList(context.Context, *FindLoginHistoryListReq) (*FindLoginHistoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserLoginHistoryList not implemented")
}
func (UnimplementedUserRpcServer) DeleteUserLoginHistoryList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserLoginHistoryList not implemented")
}
func (UnimplementedUserRpcServer) FindUserRegionList(context.Context, *EmptyReq) (*FindUserRegionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserRegionList not implemented")
}
func (UnimplementedUserRpcServer) mustEmbedUnimplementedUserRpcServer() {}

// UnsafeUserRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRpcServer will
// result in compilation errors.
type UnsafeUserRpcServer interface {
	mustEmbedUnimplementedUserRpcServer()
}

func RegisterUserRpcServer(s grpc.ServiceRegistrar, srv UserRpcServer) {
	s.RegisterService(&UserRpc_ServiceDesc, srv)
}

func _UserRpc_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UpdateUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UpdateUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UpdateUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UpdateUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UpdateUserStatus(ctx, req.(*UpdateUserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_FindUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).FindUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_FindUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).FindUserInfo(ctx, req.(*UserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_FindUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).FindUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_FindUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).FindUserList(ctx, req.(*FindUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_FindUserOnlineList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).FindUserOnlineList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_FindUserOnlineList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).FindUserOnlineList(ctx, req.(*FindUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_FindUserLoginHistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindLoginHistoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).FindUserLoginHistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_FindUserLoginHistoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).FindUserLoginHistoryList(ctx, req.(*FindLoginHistoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_DeleteUserLoginHistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).DeleteUserLoginHistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_DeleteUserLoginHistoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).DeleteUserLoginHistoryList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_FindUserRegionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).FindUserRegionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_FindUserRegionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).FindUserRegionList(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRpc_ServiceDesc is the grpc.ServiceDesc for UserRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.UserRpc",
	HandlerType: (*UserRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserInfo",
			Handler:    _UserRpc_UpdateUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserStatus",
			Handler:    _UserRpc_UpdateUserStatus_Handler,
		},
		{
			MethodName: "FindUserInfo",
			Handler:    _UserRpc_FindUserInfo_Handler,
		},
		{
			MethodName: "FindUserList",
			Handler:    _UserRpc_FindUserList_Handler,
		},
		{
			MethodName: "FindUserOnlineList",
			Handler:    _UserRpc_FindUserOnlineList_Handler,
		},
		{
			MethodName: "FindUserLoginHistoryList",
			Handler:    _UserRpc_FindUserLoginHistoryList_Handler,
		},
		{
			MethodName: "DeleteUserLoginHistoryList",
			Handler:    _UserRpc_DeleteUserLoginHistoryList_Handler,
		},
		{
			MethodName: "FindUserRegionList",
			Handler:    _UserRpc_FindUserRegionList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	ApiRpc_AddApi_FullMethodName        = "/blog.ApiRpc/AddApi"
	ApiRpc_UpdateApi_FullMethodName     = "/blog.ApiRpc/UpdateApi"
	ApiRpc_DeleteApi_FullMethodName     = "/blog.ApiRpc/DeleteApi"
	ApiRpc_DeleteApiList_FullMethodName = "/blog.ApiRpc/DeleteApiList"
	ApiRpc_FindApi_FullMethodName       = "/blog.ApiRpc/FindApi"
	ApiRpc_FindApiList_FullMethodName   = "/blog.ApiRpc/FindApiList"
	ApiRpc_SyncApiList_FullMethodName   = "/blog.ApiRpc/SyncApiList"
	ApiRpc_CleanApiList_FullMethodName  = "/blog.ApiRpc/CleanApiList"
)

// ApiRpcClient is the client API for ApiRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiRpcClient interface {
	// 创建接口
	AddApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*Api, error)
	// 更新接口
	UpdateApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*Api, error)
	// 删除接口
	DeleteApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除接口
	DeleteApiList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询接口
	FindApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Api, error)
	// 查询接口列表
	FindApiList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindApiListResp, error)
	// 同步接口列表
	SyncApiList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 清空接口列表
	CleanApiList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BatchResp, error)
}

type apiRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewApiRpcClient(cc grpc.ClientConnInterface) ApiRpcClient {
	return &apiRpcClient{cc}
}

func (c *apiRpcClient) AddApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*Api, error) {
	out := new(Api)
	err := c.cc.Invoke(ctx, ApiRpc_AddApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) UpdateApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*Api, error) {
	out := new(Api)
	err := c.cc.Invoke(ctx, ApiRpc_UpdateApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) DeleteApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ApiRpc_DeleteApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) DeleteApiList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ApiRpc_DeleteApiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) FindApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Api, error) {
	out := new(Api)
	err := c.cc.Invoke(ctx, ApiRpc_FindApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) FindApiList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindApiListResp, error) {
	out := new(FindApiListResp)
	err := c.cc.Invoke(ctx, ApiRpc_FindApiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) SyncApiList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ApiRpc_SyncApiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) CleanApiList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ApiRpc_CleanApiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiRpcServer is the server API for ApiRpc service.
// All implementations must embed UnimplementedApiRpcServer
// for forward compatibility
type ApiRpcServer interface {
	// 创建接口
	AddApi(context.Context, *Api) (*Api, error)
	// 更新接口
	UpdateApi(context.Context, *Api) (*Api, error)
	// 删除接口
	DeleteApi(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除接口
	DeleteApiList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询接口
	FindApi(context.Context, *IdReq) (*Api, error)
	// 查询接口列表
	FindApiList(context.Context, *PageQuery) (*FindApiListResp, error)
	// 同步接口列表
	SyncApiList(context.Context, *EmptyReq) (*BatchResp, error)
	// 清空接口列表
	CleanApiList(context.Context, *EmptyReq) (*BatchResp, error)
	mustEmbedUnimplementedApiRpcServer()
}

// UnimplementedApiRpcServer must be embedded to have forward compatible implementations.
type UnimplementedApiRpcServer struct {
}

func (UnimplementedApiRpcServer) AddApi(context.Context, *Api) (*Api, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApi not implemented")
}
func (UnimplementedApiRpcServer) UpdateApi(context.Context, *Api) (*Api, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApi not implemented")
}
func (UnimplementedApiRpcServer) DeleteApi(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApi not implemented")
}
func (UnimplementedApiRpcServer) DeleteApiList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiList not implemented")
}
func (UnimplementedApiRpcServer) FindApi(context.Context, *IdReq) (*Api, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindApi not implemented")
}
func (UnimplementedApiRpcServer) FindApiList(context.Context, *PageQuery) (*FindApiListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindApiList not implemented")
}
func (UnimplementedApiRpcServer) SyncApiList(context.Context, *EmptyReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncApiList not implemented")
}
func (UnimplementedApiRpcServer) CleanApiList(context.Context, *EmptyReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanApiList not implemented")
}
func (UnimplementedApiRpcServer) mustEmbedUnimplementedApiRpcServer() {}

// UnsafeApiRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiRpcServer will
// result in compilation errors.
type UnsafeApiRpcServer interface {
	mustEmbedUnimplementedApiRpcServer()
}

func RegisterApiRpcServer(s grpc.ServiceRegistrar, srv ApiRpcServer) {
	s.RegisterService(&ApiRpc_ServiceDesc, srv)
}

func _ApiRpc_AddApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Api)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).AddApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiRpc_AddApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).AddApi(ctx, req.(*Api))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_UpdateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Api)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).UpdateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiRpc_UpdateApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).UpdateApi(ctx, req.(*Api))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_DeleteApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).DeleteApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiRpc_DeleteApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).DeleteApi(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_DeleteApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).DeleteApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiRpc_DeleteApiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).DeleteApiList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_FindApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).FindApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiRpc_FindApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).FindApi(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_FindApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).FindApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiRpc_FindApiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).FindApiList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_SyncApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).SyncApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiRpc_SyncApiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).SyncApiList(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_CleanApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).CleanApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiRpc_CleanApiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).CleanApiList(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiRpc_ServiceDesc is the grpc.ServiceDesc for ApiRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.ApiRpc",
	HandlerType: (*ApiRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddApi",
			Handler:    _ApiRpc_AddApi_Handler,
		},
		{
			MethodName: "UpdateApi",
			Handler:    _ApiRpc_UpdateApi_Handler,
		},
		{
			MethodName: "DeleteApi",
			Handler:    _ApiRpc_DeleteApi_Handler,
		},
		{
			MethodName: "DeleteApiList",
			Handler:    _ApiRpc_DeleteApiList_Handler,
		},
		{
			MethodName: "FindApi",
			Handler:    _ApiRpc_FindApi_Handler,
		},
		{
			MethodName: "FindApiList",
			Handler:    _ApiRpc_FindApiList_Handler,
		},
		{
			MethodName: "SyncApiList",
			Handler:    _ApiRpc_SyncApiList_Handler,
		},
		{
			MethodName: "CleanApiList",
			Handler:    _ApiRpc_CleanApiList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	MenuRpc_AddMenu_FullMethodName        = "/blog.MenuRpc/AddMenu"
	MenuRpc_UpdateMenu_FullMethodName     = "/blog.MenuRpc/UpdateMenu"
	MenuRpc_DeleteMenu_FullMethodName     = "/blog.MenuRpc/DeleteMenu"
	MenuRpc_DeleteMenuList_FullMethodName = "/blog.MenuRpc/DeleteMenuList"
	MenuRpc_FindMenu_FullMethodName       = "/blog.MenuRpc/FindMenu"
	MenuRpc_FindMenuList_FullMethodName   = "/blog.MenuRpc/FindMenuList"
	MenuRpc_SyncMenuList_FullMethodName   = "/blog.MenuRpc/SyncMenuList"
	MenuRpc_CleanMenuList_FullMethodName  = "/blog.MenuRpc/CleanMenuList"
)

// MenuRpcClient is the client API for MenuRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MenuRpcClient interface {
	// 创建菜单
	AddMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error)
	// 更新菜单
	UpdateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error)
	// 删除菜单
	DeleteMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除菜单
	DeleteMenuList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询菜单
	FindMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Menu, error)
	// 查询菜单列表
	FindMenuList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindMenuListResp, error)
	// 同步菜单列表
	SyncMenuList(ctx context.Context, in *SyncMenuReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 清空菜单列表
	CleanMenuList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BatchResp, error)
}

type menuRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewMenuRpcClient(cc grpc.ClientConnInterface) MenuRpcClient {
	return &menuRpcClient{cc}
}

func (c *menuRpcClient) AddMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, MenuRpc_AddMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) UpdateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, MenuRpc_UpdateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) DeleteMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, MenuRpc_DeleteMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) DeleteMenuList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, MenuRpc_DeleteMenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) FindMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, MenuRpc_FindMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) FindMenuList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindMenuListResp, error) {
	out := new(FindMenuListResp)
	err := c.cc.Invoke(ctx, MenuRpc_FindMenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) SyncMenuList(ctx context.Context, in *SyncMenuReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, MenuRpc_SyncMenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) CleanMenuList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, MenuRpc_CleanMenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MenuRpcServer is the server API for MenuRpc service.
// All implementations must embed UnimplementedMenuRpcServer
// for forward compatibility
type MenuRpcServer interface {
	// 创建菜单
	AddMenu(context.Context, *Menu) (*Menu, error)
	// 更新菜单
	UpdateMenu(context.Context, *Menu) (*Menu, error)
	// 删除菜单
	DeleteMenu(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除菜单
	DeleteMenuList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询菜单
	FindMenu(context.Context, *IdReq) (*Menu, error)
	// 查询菜单列表
	FindMenuList(context.Context, *PageQuery) (*FindMenuListResp, error)
	// 同步菜单列表
	SyncMenuList(context.Context, *SyncMenuReq) (*BatchResp, error)
	// 清空菜单列表
	CleanMenuList(context.Context, *EmptyReq) (*BatchResp, error)
	mustEmbedUnimplementedMenuRpcServer()
}

// UnimplementedMenuRpcServer must be embedded to have forward compatible implementations.
type UnimplementedMenuRpcServer struct {
}

func (UnimplementedMenuRpcServer) AddMenu(context.Context, *Menu) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMenu not implemented")
}
func (UnimplementedMenuRpcServer) UpdateMenu(context.Context, *Menu) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedMenuRpcServer) DeleteMenu(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedMenuRpcServer) DeleteMenuList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenuList not implemented")
}
func (UnimplementedMenuRpcServer) FindMenu(context.Context, *IdReq) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMenu not implemented")
}
func (UnimplementedMenuRpcServer) FindMenuList(context.Context, *PageQuery) (*FindMenuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMenuList not implemented")
}
func (UnimplementedMenuRpcServer) SyncMenuList(context.Context, *SyncMenuReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncMenuList not implemented")
}
func (UnimplementedMenuRpcServer) CleanMenuList(context.Context, *EmptyReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanMenuList not implemented")
}
func (UnimplementedMenuRpcServer) mustEmbedUnimplementedMenuRpcServer() {}

// UnsafeMenuRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MenuRpcServer will
// result in compilation errors.
type UnsafeMenuRpcServer interface {
	mustEmbedUnimplementedMenuRpcServer()
}

func RegisterMenuRpcServer(s grpc.ServiceRegistrar, srv MenuRpcServer) {
	s.RegisterService(&MenuRpc_ServiceDesc, srv)
}

func _MenuRpc_AddMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Menu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).AddMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuRpc_AddMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).AddMenu(ctx, req.(*Menu))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Menu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuRpc_UpdateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).UpdateMenu(ctx, req.(*Menu))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuRpc_DeleteMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).DeleteMenu(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_DeleteMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).DeleteMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuRpc_DeleteMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).DeleteMenuList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_FindMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).FindMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuRpc_FindMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).FindMenu(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_FindMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).FindMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuRpc_FindMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).FindMenuList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_SyncMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).SyncMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuRpc_SyncMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).SyncMenuList(ctx, req.(*SyncMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_CleanMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).CleanMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuRpc_CleanMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).CleanMenuList(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MenuRpc_ServiceDesc is the grpc.ServiceDesc for MenuRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MenuRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.MenuRpc",
	HandlerType: (*MenuRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMenu",
			Handler:    _MenuRpc_AddMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _MenuRpc_UpdateMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _MenuRpc_DeleteMenu_Handler,
		},
		{
			MethodName: "DeleteMenuList",
			Handler:    _MenuRpc_DeleteMenuList_Handler,
		},
		{
			MethodName: "FindMenu",
			Handler:    _MenuRpc_FindMenu_Handler,
		},
		{
			MethodName: "FindMenuList",
			Handler:    _MenuRpc_FindMenuList_Handler,
		},
		{
			MethodName: "SyncMenuList",
			Handler:    _MenuRpc_SyncMenuList_Handler,
		},
		{
			MethodName: "CleanMenuList",
			Handler:    _MenuRpc_CleanMenuList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	RoleRpc_AddRole_FullMethodName           = "/blog.RoleRpc/AddRole"
	RoleRpc_UpdateRole_FullMethodName        = "/blog.RoleRpc/UpdateRole"
	RoleRpc_DeleteRole_FullMethodName        = "/blog.RoleRpc/DeleteRole"
	RoleRpc_DeleteRoleList_FullMethodName    = "/blog.RoleRpc/DeleteRoleList"
	RoleRpc_FindRole_FullMethodName          = "/blog.RoleRpc/FindRole"
	RoleRpc_FindRoleList_FullMethodName      = "/blog.RoleRpc/FindRoleList"
	RoleRpc_FindRoleResources_FullMethodName = "/blog.RoleRpc/FindRoleResources"
	RoleRpc_UpdateRoleMenus_FullMethodName   = "/blog.RoleRpc/UpdateRoleMenus"
	RoleRpc_UpdateRoleApis_FullMethodName    = "/blog.RoleRpc/UpdateRoleApis"
	RoleRpc_UpdateUserRole_FullMethodName    = "/blog.RoleRpc/UpdateUserRole"
	RoleRpc_FindUserApis_FullMethodName      = "/blog.RoleRpc/FindUserApis"
	RoleRpc_FindUserMenus_FullMethodName     = "/blog.RoleRpc/FindUserMenus"
	RoleRpc_FindUserRoles_FullMethodName     = "/blog.RoleRpc/FindUserRoles"
)

// RoleRpcClient is the client API for RoleRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleRpcClient interface {
	// 创建角色
	AddRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	// 更新角色
	UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	// 删除角色
	DeleteRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除角色
	DeleteRoleList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询角色
	FindRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Role, error)
	// 查询角色列表
	FindRoleList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindRoleListResp, error)
	// 查询角色资源权限
	FindRoleResources(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*RoleResourcesResp, error)
	// 更新角色菜单
	UpdateRoleMenus(ctx context.Context, in *UpdateRoleMenusReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 更新角色资源
	UpdateRoleApis(ctx context.Context, in *UpdateRoleApisReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 修改用户角色
	UpdateUserRole(ctx context.Context, in *UpdateUserRoleReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 获取用户接口权限
	FindUserApis(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindApiListResp, error)
	// 获取用户菜单权限
	FindUserMenus(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindMenuListResp, error)
	// 获取用户角色信息
	FindUserRoles(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindRoleListResp, error)
}

type roleRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleRpcClient(cc grpc.ClientConnInterface) RoleRpcClient {
	return &roleRpcClient{cc}
}

func (c *roleRpcClient) AddRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, RoleRpc_AddRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, RoleRpc_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) DeleteRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, RoleRpc_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) DeleteRoleList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, RoleRpc_DeleteRoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) FindRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, RoleRpc_FindRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) FindRoleList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindRoleListResp, error) {
	out := new(FindRoleListResp)
	err := c.cc.Invoke(ctx, RoleRpc_FindRoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) FindRoleResources(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*RoleResourcesResp, error) {
	out := new(RoleResourcesResp)
	err := c.cc.Invoke(ctx, RoleRpc_FindRoleResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) UpdateRoleMenus(ctx context.Context, in *UpdateRoleMenusReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, RoleRpc_UpdateRoleMenus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) UpdateRoleApis(ctx context.Context, in *UpdateRoleApisReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, RoleRpc_UpdateRoleApis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) UpdateUserRole(ctx context.Context, in *UpdateUserRoleReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, RoleRpc_UpdateUserRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) FindUserApis(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindApiListResp, error) {
	out := new(FindApiListResp)
	err := c.cc.Invoke(ctx, RoleRpc_FindUserApis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) FindUserMenus(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindMenuListResp, error) {
	out := new(FindMenuListResp)
	err := c.cc.Invoke(ctx, RoleRpc_FindUserMenus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) FindUserRoles(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindRoleListResp, error) {
	out := new(FindRoleListResp)
	err := c.cc.Invoke(ctx, RoleRpc_FindUserRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleRpcServer is the server API for RoleRpc service.
// All implementations must embed UnimplementedRoleRpcServer
// for forward compatibility
type RoleRpcServer interface {
	// 创建角色
	AddRole(context.Context, *Role) (*Role, error)
	// 更新角色
	UpdateRole(context.Context, *Role) (*Role, error)
	// 删除角色
	DeleteRole(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除角色
	DeleteRoleList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询角色
	FindRole(context.Context, *IdReq) (*Role, error)
	// 查询角色列表
	FindRoleList(context.Context, *PageQuery) (*FindRoleListResp, error)
	// 查询角色资源权限
	FindRoleResources(context.Context, *IdReq) (*RoleResourcesResp, error)
	// 更新角色菜单
	UpdateRoleMenus(context.Context, *UpdateRoleMenusReq) (*EmptyResp, error)
	// 更新角色资源
	UpdateRoleApis(context.Context, *UpdateRoleApisReq) (*EmptyResp, error)
	// 修改用户角色
	UpdateUserRole(context.Context, *UpdateUserRoleReq) (*EmptyResp, error)
	// 获取用户接口权限
	FindUserApis(context.Context, *UserIdReq) (*FindApiListResp, error)
	// 获取用户菜单权限
	FindUserMenus(context.Context, *UserIdReq) (*FindMenuListResp, error)
	// 获取用户角色信息
	FindUserRoles(context.Context, *UserIdReq) (*FindRoleListResp, error)
	mustEmbedUnimplementedRoleRpcServer()
}

// UnimplementedRoleRpcServer must be embedded to have forward compatible implementations.
type UnimplementedRoleRpcServer struct {
}

func (UnimplementedRoleRpcServer) AddRole(context.Context, *Role) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedRoleRpcServer) UpdateRole(context.Context, *Role) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRoleRpcServer) DeleteRole(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRoleRpcServer) DeleteRoleList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleList not implemented")
}
func (UnimplementedRoleRpcServer) FindRole(context.Context, *IdReq) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRole not implemented")
}
func (UnimplementedRoleRpcServer) FindRoleList(context.Context, *PageQuery) (*FindRoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoleList not implemented")
}
func (UnimplementedRoleRpcServer) FindRoleResources(context.Context, *IdReq) (*RoleResourcesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoleResources not implemented")
}
func (UnimplementedRoleRpcServer) UpdateRoleMenus(context.Context, *UpdateRoleMenusReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleMenus not implemented")
}
func (UnimplementedRoleRpcServer) UpdateRoleApis(context.Context, *UpdateRoleApisReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleApis not implemented")
}
func (UnimplementedRoleRpcServer) UpdateUserRole(context.Context, *UpdateUserRoleReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRole not implemented")
}
func (UnimplementedRoleRpcServer) FindUserApis(context.Context, *UserIdReq) (*FindApiListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserApis not implemented")
}
func (UnimplementedRoleRpcServer) FindUserMenus(context.Context, *UserIdReq) (*FindMenuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserMenus not implemented")
}
func (UnimplementedRoleRpcServer) FindUserRoles(context.Context, *UserIdReq) (*FindRoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserRoles not implemented")
}
func (UnimplementedRoleRpcServer) mustEmbedUnimplementedRoleRpcServer() {}

// UnsafeRoleRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleRpcServer will
// result in compilation errors.
type UnsafeRoleRpcServer interface {
	mustEmbedUnimplementedRoleRpcServer()
}

func RegisterRoleRpcServer(s grpc.ServiceRegistrar, srv RoleRpcServer) {
	s.RegisterService(&RoleRpc_ServiceDesc, srv)
}

func _RoleRpc_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_AddRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).AddRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).UpdateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).DeleteRole(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_DeleteRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).DeleteRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_DeleteRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).DeleteRoleList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_FindRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).FindRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_FindRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).FindRole(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_FindRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).FindRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_FindRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).FindRoleList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_FindRoleResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).FindRoleResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_FindRoleResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).FindRoleResources(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_UpdateRoleMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleMenusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).UpdateRoleMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_UpdateRoleMenus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).UpdateRoleMenus(ctx, req.(*UpdateRoleMenusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_UpdateRoleApis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleApisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).UpdateRoleApis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_UpdateRoleApis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).UpdateRoleApis(ctx, req.(*UpdateRoleApisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_UpdateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).UpdateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_UpdateUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).UpdateUserRole(ctx, req.(*UpdateUserRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_FindUserApis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).FindUserApis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_FindUserApis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).FindUserApis(ctx, req.(*UserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_FindUserMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).FindUserMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_FindUserMenus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).FindUserMenus(ctx, req.(*UserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_FindUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).FindUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_FindUserRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).FindUserRoles(ctx, req.(*UserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleRpc_ServiceDesc is the grpc.ServiceDesc for RoleRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.RoleRpc",
	HandlerType: (*RoleRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRole",
			Handler:    _RoleRpc_AddRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RoleRpc_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RoleRpc_DeleteRole_Handler,
		},
		{
			MethodName: "DeleteRoleList",
			Handler:    _RoleRpc_DeleteRoleList_Handler,
		},
		{
			MethodName: "FindRole",
			Handler:    _RoleRpc_FindRole_Handler,
		},
		{
			MethodName: "FindRoleList",
			Handler:    _RoleRpc_FindRoleList_Handler,
		},
		{
			MethodName: "FindRoleResources",
			Handler:    _RoleRpc_FindRoleResources_Handler,
		},
		{
			MethodName: "UpdateRoleMenus",
			Handler:    _RoleRpc_UpdateRoleMenus_Handler,
		},
		{
			MethodName: "UpdateRoleApis",
			Handler:    _RoleRpc_UpdateRoleApis_Handler,
		},
		{
			MethodName: "UpdateUserRole",
			Handler:    _RoleRpc_UpdateUserRole_Handler,
		},
		{
			MethodName: "FindUserApis",
			Handler:    _RoleRpc_FindUserApis_Handler,
		},
		{
			MethodName: "FindUserMenus",
			Handler:    _RoleRpc_FindUserMenus_Handler,
		},
		{
			MethodName: "FindUserRoles",
			Handler:    _RoleRpc_FindUserRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	ArticleRpc_AddArticle_FullMethodName             = "/blog.ArticleRpc/AddArticle"
	ArticleRpc_UpdateArticle_FullMethodName          = "/blog.ArticleRpc/UpdateArticle"
	ArticleRpc_GetArticle_FullMethodName             = "/blog.ArticleRpc/GetArticle"
	ArticleRpc_DeleteArticle_FullMethodName          = "/blog.ArticleRpc/DeleteArticle"
	ArticleRpc_FindArticleList_FullMethodName        = "/blog.ArticleRpc/FindArticleList"
	ArticleRpc_FindArticlePublicList_FullMethodName  = "/blog.ArticleRpc/FindArticlePublicList"
	ArticleRpc_FindArticlesByTag_FullMethodName      = "/blog.ArticleRpc/FindArticlesByTag"
	ArticleRpc_FindArticlesByCategory_FullMethodName = "/blog.ArticleRpc/FindArticlesByCategory"
	ArticleRpc_RecycleArticle_FullMethodName         = "/blog.ArticleRpc/RecycleArticle"
	ArticleRpc_TopArticle_FullMethodName             = "/blog.ArticleRpc/TopArticle"
	ArticleRpc_LikeArticle_FullMethodName            = "/blog.ArticleRpc/LikeArticle"
	ArticleRpc_FindUserLikeArticle_FullMethodName    = "/blog.ArticleRpc/FindUserLikeArticle"
	ArticleRpc_AnalysisArticle_FullMethodName        = "/blog.ArticleRpc/AnalysisArticle"
	ArticleRpc_AddCategory_FullMethodName            = "/blog.ArticleRpc/AddCategory"
	ArticleRpc_UpdateCategory_FullMethodName         = "/blog.ArticleRpc/UpdateCategory"
	ArticleRpc_GetCategory_FullMethodName            = "/blog.ArticleRpc/GetCategory"
	ArticleRpc_DeleteCategory_FullMethodName         = "/blog.ArticleRpc/DeleteCategory"
	ArticleRpc_FindCategoryList_FullMethodName       = "/blog.ArticleRpc/FindCategoryList"
	ArticleRpc_AddTag_FullMethodName                 = "/blog.ArticleRpc/AddTag"
	ArticleRpc_UpdateTag_FullMethodName              = "/blog.ArticleRpc/UpdateTag"
	ArticleRpc_GetTag_FullMethodName                 = "/blog.ArticleRpc/GetTag"
	ArticleRpc_DeleteTag_FullMethodName              = "/blog.ArticleRpc/DeleteTag"
	ArticleRpc_FindTagList_FullMethodName            = "/blog.ArticleRpc/FindTagList"
)

// ArticleRpcClient is the client API for ArticleRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleRpcClient interface {
	// 创建文章
	AddArticle(ctx context.Context, in *ArticleNew, opts ...grpc.CallOption) (*ArticleDetails, error)
	// 更新文章
	UpdateArticle(ctx context.Context, in *ArticleNew, opts ...grpc.CallOption) (*ArticleDetails, error)
	// 查询文章
	GetArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ArticleDetails, error)
	// 删除文章
	DeleteArticle(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询文章数量
	//
	//	rpc CountArticle(FindArticleListReq) returns(CountResp);
	//
	// 查询文章列表
	FindArticleList(ctx context.Context, in *FindArticleListReq, opts ...grpc.CallOption) (*FindArticleListResp, error)
	// 查询文章列表
	FindArticlePublicList(ctx context.Context, in *FindArticleListReq, opts ...grpc.CallOption) (*FindArticleListResp, error)
	// 查询文章列表
	FindArticlesByTag(ctx context.Context, in *FindArticlesByTagReq, opts ...grpc.CallOption) (*FindArticleListResp, error)
	// 查询文章列表
	FindArticlesByCategory(ctx context.Context, in *FindArticlesByCategoryReq, opts ...grpc.CallOption) (*FindArticleListResp, error)
	// 回收文章
	RecycleArticle(ctx context.Context, in *RecycleArticleReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 置顶文章
	TopArticle(ctx context.Context, in *TopArticleReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 点赞文章
	LikeArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 用户点赞的文章
	FindUserLikeArticle(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindLikeArticleResp, error)
	// 查询文章数量
	AnalysisArticle(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*AnalysisArticleResp, error)
	// 创建文章分类
	AddCategory(ctx context.Context, in *CategoryNew, opts ...grpc.CallOption) (*CategoryDetails, error)
	// 更新文章分类
	UpdateCategory(ctx context.Context, in *CategoryNew, opts ...grpc.CallOption) (*CategoryDetails, error)
	// 查询文章分类
	GetCategory(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*CategoryDetails, error)
	// 删除文章分类
	DeleteCategory(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询文章分类数量
	//
	//	rpc CountCategory(FindCategoryListReq) returns(CountResp);
	//
	// 查询文章分类列表
	FindCategoryList(ctx context.Context, in *FindCategoryListReq, opts ...grpc.CallOption) (*FindCategoryListResp, error)
	// 创建标签
	AddTag(ctx context.Context, in *TagNew, opts ...grpc.CallOption) (*TagDetails, error)
	// 更新标签
	UpdateTag(ctx context.Context, in *TagNew, opts ...grpc.CallOption) (*TagDetails, error)
	// 查询标签
	GetTag(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*TagDetails, error)
	// 删除标签
	DeleteTag(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询标签数量
	//
	//	rpc CountTag(FindTagListReq) returns(CountResp);
	//
	// 查询标签列表
	FindTagList(ctx context.Context, in *FindTagListReq, opts ...grpc.CallOption) (*FindTagListResp, error)
}

type articleRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleRpcClient(cc grpc.ClientConnInterface) ArticleRpcClient {
	return &articleRpcClient{cc}
}

func (c *articleRpcClient) AddArticle(ctx context.Context, in *ArticleNew, opts ...grpc.CallOption) (*ArticleDetails, error) {
	out := new(ArticleDetails)
	err := c.cc.Invoke(ctx, ArticleRpc_AddArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) UpdateArticle(ctx context.Context, in *ArticleNew, opts ...grpc.CallOption) (*ArticleDetails, error) {
	out := new(ArticleDetails)
	err := c.cc.Invoke(ctx, ArticleRpc_UpdateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) GetArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ArticleDetails, error) {
	out := new(ArticleDetails)
	err := c.cc.Invoke(ctx, ArticleRpc_GetArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) DeleteArticle(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ArticleRpc_DeleteArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindArticleList(ctx context.Context, in *FindArticleListReq, opts ...grpc.CallOption) (*FindArticleListResp, error) {
	out := new(FindArticleListResp)
	err := c.cc.Invoke(ctx, ArticleRpc_FindArticleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindArticlePublicList(ctx context.Context, in *FindArticleListReq, opts ...grpc.CallOption) (*FindArticleListResp, error) {
	out := new(FindArticleListResp)
	err := c.cc.Invoke(ctx, ArticleRpc_FindArticlePublicList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindArticlesByTag(ctx context.Context, in *FindArticlesByTagReq, opts ...grpc.CallOption) (*FindArticleListResp, error) {
	out := new(FindArticleListResp)
	err := c.cc.Invoke(ctx, ArticleRpc_FindArticlesByTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindArticlesByCategory(ctx context.Context, in *FindArticlesByCategoryReq, opts ...grpc.CallOption) (*FindArticleListResp, error) {
	out := new(FindArticleListResp)
	err := c.cc.Invoke(ctx, ArticleRpc_FindArticlesByCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) RecycleArticle(ctx context.Context, in *RecycleArticleReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, ArticleRpc_RecycleArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) TopArticle(ctx context.Context, in *TopArticleReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, ArticleRpc_TopArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) LikeArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, ArticleRpc_LikeArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindUserLikeArticle(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindLikeArticleResp, error) {
	out := new(FindLikeArticleResp)
	err := c.cc.Invoke(ctx, ArticleRpc_FindUserLikeArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) AnalysisArticle(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*AnalysisArticleResp, error) {
	out := new(AnalysisArticleResp)
	err := c.cc.Invoke(ctx, ArticleRpc_AnalysisArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) AddCategory(ctx context.Context, in *CategoryNew, opts ...grpc.CallOption) (*CategoryDetails, error) {
	out := new(CategoryDetails)
	err := c.cc.Invoke(ctx, ArticleRpc_AddCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) UpdateCategory(ctx context.Context, in *CategoryNew, opts ...grpc.CallOption) (*CategoryDetails, error) {
	out := new(CategoryDetails)
	err := c.cc.Invoke(ctx, ArticleRpc_UpdateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) GetCategory(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*CategoryDetails, error) {
	out := new(CategoryDetails)
	err := c.cc.Invoke(ctx, ArticleRpc_GetCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) DeleteCategory(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ArticleRpc_DeleteCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindCategoryList(ctx context.Context, in *FindCategoryListReq, opts ...grpc.CallOption) (*FindCategoryListResp, error) {
	out := new(FindCategoryListResp)
	err := c.cc.Invoke(ctx, ArticleRpc_FindCategoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) AddTag(ctx context.Context, in *TagNew, opts ...grpc.CallOption) (*TagDetails, error) {
	out := new(TagDetails)
	err := c.cc.Invoke(ctx, ArticleRpc_AddTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) UpdateTag(ctx context.Context, in *TagNew, opts ...grpc.CallOption) (*TagDetails, error) {
	out := new(TagDetails)
	err := c.cc.Invoke(ctx, ArticleRpc_UpdateTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) GetTag(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*TagDetails, error) {
	out := new(TagDetails)
	err := c.cc.Invoke(ctx, ArticleRpc_GetTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) DeleteTag(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ArticleRpc_DeleteTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindTagList(ctx context.Context, in *FindTagListReq, opts ...grpc.CallOption) (*FindTagListResp, error) {
	out := new(FindTagListResp)
	err := c.cc.Invoke(ctx, ArticleRpc_FindTagList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleRpcServer is the server API for ArticleRpc service.
// All implementations must embed UnimplementedArticleRpcServer
// for forward compatibility
type ArticleRpcServer interface {
	// 创建文章
	AddArticle(context.Context, *ArticleNew) (*ArticleDetails, error)
	// 更新文章
	UpdateArticle(context.Context, *ArticleNew) (*ArticleDetails, error)
	// 查询文章
	GetArticle(context.Context, *IdReq) (*ArticleDetails, error)
	// 删除文章
	DeleteArticle(context.Context, *IdsReq) (*BatchResp, error)
	// 查询文章数量
	//
	//	rpc CountArticle(FindArticleListReq) returns(CountResp);
	//
	// 查询文章列表
	FindArticleList(context.Context, *FindArticleListReq) (*FindArticleListResp, error)
	// 查询文章列表
	FindArticlePublicList(context.Context, *FindArticleListReq) (*FindArticleListResp, error)
	// 查询文章列表
	FindArticlesByTag(context.Context, *FindArticlesByTagReq) (*FindArticleListResp, error)
	// 查询文章列表
	FindArticlesByCategory(context.Context, *FindArticlesByCategoryReq) (*FindArticleListResp, error)
	// 回收文章
	RecycleArticle(context.Context, *RecycleArticleReq) (*EmptyResp, error)
	// 置顶文章
	TopArticle(context.Context, *TopArticleReq) (*EmptyResp, error)
	// 点赞文章
	LikeArticle(context.Context, *IdReq) (*EmptyResp, error)
	// 用户点赞的文章
	FindUserLikeArticle(context.Context, *UserIdReq) (*FindLikeArticleResp, error)
	// 查询文章数量
	AnalysisArticle(context.Context, *EmptyReq) (*AnalysisArticleResp, error)
	// 创建文章分类
	AddCategory(context.Context, *CategoryNew) (*CategoryDetails, error)
	// 更新文章分类
	UpdateCategory(context.Context, *CategoryNew) (*CategoryDetails, error)
	// 查询文章分类
	GetCategory(context.Context, *IdReq) (*CategoryDetails, error)
	// 删除文章分类
	DeleteCategory(context.Context, *IdsReq) (*BatchResp, error)
	// 查询文章分类数量
	//
	//	rpc CountCategory(FindCategoryListReq) returns(CountResp);
	//
	// 查询文章分类列表
	FindCategoryList(context.Context, *FindCategoryListReq) (*FindCategoryListResp, error)
	// 创建标签
	AddTag(context.Context, *TagNew) (*TagDetails, error)
	// 更新标签
	UpdateTag(context.Context, *TagNew) (*TagDetails, error)
	// 查询标签
	GetTag(context.Context, *IdReq) (*TagDetails, error)
	// 删除标签
	DeleteTag(context.Context, *IdsReq) (*BatchResp, error)
	// 查询标签数量
	//
	//	rpc CountTag(FindTagListReq) returns(CountResp);
	//
	// 查询标签列表
	FindTagList(context.Context, *FindTagListReq) (*FindTagListResp, error)
	mustEmbedUnimplementedArticleRpcServer()
}

// UnimplementedArticleRpcServer must be embedded to have forward compatible implementations.
type UnimplementedArticleRpcServer struct {
}

func (UnimplementedArticleRpcServer) AddArticle(context.Context, *ArticleNew) (*ArticleDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArticle not implemented")
}
func (UnimplementedArticleRpcServer) UpdateArticle(context.Context, *ArticleNew) (*ArticleDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedArticleRpcServer) GetArticle(context.Context, *IdReq) (*ArticleDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedArticleRpcServer) DeleteArticle(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedArticleRpcServer) FindArticleList(context.Context, *FindArticleListReq) (*FindArticleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArticleList not implemented")
}
func (UnimplementedArticleRpcServer) FindArticlePublicList(context.Context, *FindArticleListReq) (*FindArticleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArticlePublicList not implemented")
}
func (UnimplementedArticleRpcServer) FindArticlesByTag(context.Context, *FindArticlesByTagReq) (*FindArticleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArticlesByTag not implemented")
}
func (UnimplementedArticleRpcServer) FindArticlesByCategory(context.Context, *FindArticlesByCategoryReq) (*FindArticleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArticlesByCategory not implemented")
}
func (UnimplementedArticleRpcServer) RecycleArticle(context.Context, *RecycleArticleReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecycleArticle not implemented")
}
func (UnimplementedArticleRpcServer) TopArticle(context.Context, *TopArticleReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopArticle not implemented")
}
func (UnimplementedArticleRpcServer) LikeArticle(context.Context, *IdReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeArticle not implemented")
}
func (UnimplementedArticleRpcServer) FindUserLikeArticle(context.Context, *UserIdReq) (*FindLikeArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserLikeArticle not implemented")
}
func (UnimplementedArticleRpcServer) AnalysisArticle(context.Context, *EmptyReq) (*AnalysisArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalysisArticle not implemented")
}
func (UnimplementedArticleRpcServer) AddCategory(context.Context, *CategoryNew) (*CategoryDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCategory not implemented")
}
func (UnimplementedArticleRpcServer) UpdateCategory(context.Context, *CategoryNew) (*CategoryDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedArticleRpcServer) GetCategory(context.Context, *IdReq) (*CategoryDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedArticleRpcServer) DeleteCategory(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedArticleRpcServer) FindCategoryList(context.Context, *FindCategoryListReq) (*FindCategoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCategoryList not implemented")
}
func (UnimplementedArticleRpcServer) AddTag(context.Context, *TagNew) (*TagDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTag not implemented")
}
func (UnimplementedArticleRpcServer) UpdateTag(context.Context, *TagNew) (*TagDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedArticleRpcServer) GetTag(context.Context, *IdReq) (*TagDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (UnimplementedArticleRpcServer) DeleteTag(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedArticleRpcServer) FindTagList(context.Context, *FindTagListReq) (*FindTagListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTagList not implemented")
}
func (UnimplementedArticleRpcServer) mustEmbedUnimplementedArticleRpcServer() {}

// UnsafeArticleRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleRpcServer will
// result in compilation errors.
type UnsafeArticleRpcServer interface {
	mustEmbedUnimplementedArticleRpcServer()
}

func RegisterArticleRpcServer(s grpc.ServiceRegistrar, srv ArticleRpcServer) {
	s.RegisterService(&ArticleRpc_ServiceDesc, srv)
}

func _ArticleRpc_AddArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).AddArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_AddArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).AddArticle(ctx, req.(*ArticleNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_UpdateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).UpdateArticle(ctx, req.(*ArticleNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_GetArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).GetArticle(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_DeleteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).DeleteArticle(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindArticleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_FindArticleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindArticleList(ctx, req.(*FindArticleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindArticlePublicList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindArticleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindArticlePublicList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_FindArticlePublicList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindArticlePublicList(ctx, req.(*FindArticleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindArticlesByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindArticlesByTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindArticlesByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_FindArticlesByTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindArticlesByTag(ctx, req.(*FindArticlesByTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindArticlesByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindArticlesByCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindArticlesByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_FindArticlesByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindArticlesByCategory(ctx, req.(*FindArticlesByCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_RecycleArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecycleArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).RecycleArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_RecycleArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).RecycleArticle(ctx, req.(*RecycleArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_TopArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).TopArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_TopArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).TopArticle(ctx, req.(*TopArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_LikeArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).LikeArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_LikeArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).LikeArticle(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindUserLikeArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindUserLikeArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_FindUserLikeArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindUserLikeArticle(ctx, req.(*UserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_AnalysisArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).AnalysisArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_AnalysisArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).AnalysisArticle(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_AddCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).AddCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_AddCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).AddCategory(ctx, req.(*CategoryNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).UpdateCategory(ctx, req.(*CategoryNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_GetCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).GetCategory(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).DeleteCategory(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_FindCategoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindCategoryList(ctx, req.(*FindCategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_AddTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).AddTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_AddTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).AddTag(ctx, req.(*TagNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_UpdateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).UpdateTag(ctx, req.(*TagNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_GetTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).GetTag(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_DeleteTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).DeleteTag(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTagListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_FindTagList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindTagList(ctx, req.(*FindTagListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleRpc_ServiceDesc is the grpc.ServiceDesc for ArticleRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.ArticleRpc",
	HandlerType: (*ArticleRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddArticle",
			Handler:    _ArticleRpc_AddArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _ArticleRpc_UpdateArticle_Handler,
		},
		{
			MethodName: "GetArticle",
			Handler:    _ArticleRpc_GetArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _ArticleRpc_DeleteArticle_Handler,
		},
		{
			MethodName: "FindArticleList",
			Handler:    _ArticleRpc_FindArticleList_Handler,
		},
		{
			MethodName: "FindArticlePublicList",
			Handler:    _ArticleRpc_FindArticlePublicList_Handler,
		},
		{
			MethodName: "FindArticlesByTag",
			Handler:    _ArticleRpc_FindArticlesByTag_Handler,
		},
		{
			MethodName: "FindArticlesByCategory",
			Handler:    _ArticleRpc_FindArticlesByCategory_Handler,
		},
		{
			MethodName: "RecycleArticle",
			Handler:    _ArticleRpc_RecycleArticle_Handler,
		},
		{
			MethodName: "TopArticle",
			Handler:    _ArticleRpc_TopArticle_Handler,
		},
		{
			MethodName: "LikeArticle",
			Handler:    _ArticleRpc_LikeArticle_Handler,
		},
		{
			MethodName: "FindUserLikeArticle",
			Handler:    _ArticleRpc_FindUserLikeArticle_Handler,
		},
		{
			MethodName: "AnalysisArticle",
			Handler:    _ArticleRpc_AnalysisArticle_Handler,
		},
		{
			MethodName: "AddCategory",
			Handler:    _ArticleRpc_AddCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _ArticleRpc_UpdateCategory_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _ArticleRpc_GetCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _ArticleRpc_DeleteCategory_Handler,
		},
		{
			MethodName: "FindCategoryList",
			Handler:    _ArticleRpc_FindCategoryList_Handler,
		},
		{
			MethodName: "AddTag",
			Handler:    _ArticleRpc_AddTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _ArticleRpc_UpdateTag_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _ArticleRpc_GetTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _ArticleRpc_DeleteTag_Handler,
		},
		{
			MethodName: "FindTagList",
			Handler:    _ArticleRpc_FindTagList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	CommentRpc_AddComment_FullMethodName          = "/blog.CommentRpc/AddComment"
	CommentRpc_UpdateComment_FullMethodName       = "/blog.CommentRpc/UpdateComment"
	CommentRpc_DeleteComment_FullMethodName       = "/blog.CommentRpc/DeleteComment"
	CommentRpc_DeleteCommentList_FullMethodName   = "/blog.CommentRpc/DeleteCommentList"
	CommentRpc_FindComment_FullMethodName         = "/blog.CommentRpc/FindComment"
	CommentRpc_FindCommentList_FullMethodName     = "/blog.CommentRpc/FindCommentList"
	CommentRpc_FindCommentCount_FullMethodName    = "/blog.CommentRpc/FindCommentCount"
	CommentRpc_LikeComment_FullMethodName         = "/blog.CommentRpc/LikeComment"
	CommentRpc_FindUserLikeComment_FullMethodName = "/blog.CommentRpc/FindUserLikeComment"
)

// CommentRpcClient is the client API for CommentRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentRpcClient interface {
	// 创建评论
	AddComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	// 更新评论
	UpdateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	// 删除评论
	DeleteComment(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除评论
	DeleteCommentList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询评论
	FindComment(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Comment, error)
	// 查询评论列表
	FindCommentList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindCommentListResp, error)
	// 查询评论数量
	FindCommentCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
	// 点赞评论
	LikeComment(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 用户点赞的评论
	FindUserLikeComment(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindLikeCommentResp, error)
}

type commentRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentRpcClient(cc grpc.ClientConnInterface) CommentRpcClient {
	return &commentRpcClient{cc}
}

func (c *commentRpcClient) AddComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, CommentRpc_AddComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentRpcClient) UpdateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, CommentRpc_UpdateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentRpcClient) DeleteComment(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, CommentRpc_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentRpcClient) DeleteCommentList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, CommentRpc_DeleteCommentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentRpcClient) FindComment(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, CommentRpc_FindComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentRpcClient) FindCommentList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindCommentListResp, error) {
	out := new(FindCommentListResp)
	err := c.cc.Invoke(ctx, CommentRpc_FindCommentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentRpcClient) FindCommentCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, CommentRpc_FindCommentCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentRpcClient) LikeComment(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, CommentRpc_LikeComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentRpcClient) FindUserLikeComment(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindLikeCommentResp, error) {
	out := new(FindLikeCommentResp)
	err := c.cc.Invoke(ctx, CommentRpc_FindUserLikeComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentRpcServer is the server API for CommentRpc service.
// All implementations must embed UnimplementedCommentRpcServer
// for forward compatibility
type CommentRpcServer interface {
	// 创建评论
	AddComment(context.Context, *Comment) (*Comment, error)
	// 更新评论
	UpdateComment(context.Context, *Comment) (*Comment, error)
	// 删除评论
	DeleteComment(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除评论
	DeleteCommentList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询评论
	FindComment(context.Context, *IdReq) (*Comment, error)
	// 查询评论列表
	FindCommentList(context.Context, *PageQuery) (*FindCommentListResp, error)
	// 查询评论数量
	FindCommentCount(context.Context, *PageQuery) (*CountResp, error)
	// 点赞评论
	LikeComment(context.Context, *IdReq) (*EmptyResp, error)
	// 用户点赞的评论
	FindUserLikeComment(context.Context, *UserIdReq) (*FindLikeCommentResp, error)
	mustEmbedUnimplementedCommentRpcServer()
}

// UnimplementedCommentRpcServer must be embedded to have forward compatible implementations.
type UnimplementedCommentRpcServer struct {
}

func (UnimplementedCommentRpcServer) AddComment(context.Context, *Comment) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedCommentRpcServer) UpdateComment(context.Context, *Comment) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedCommentRpcServer) DeleteComment(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCommentRpcServer) DeleteCommentList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentList not implemented")
}
func (UnimplementedCommentRpcServer) FindComment(context.Context, *IdReq) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindComment not implemented")
}
func (UnimplementedCommentRpcServer) FindCommentList(context.Context, *PageQuery) (*FindCommentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCommentList not implemented")
}
func (UnimplementedCommentRpcServer) FindCommentCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCommentCount not implemented")
}
func (UnimplementedCommentRpcServer) LikeComment(context.Context, *IdReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeComment not implemented")
}
func (UnimplementedCommentRpcServer) FindUserLikeComment(context.Context, *UserIdReq) (*FindLikeCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserLikeComment not implemented")
}
func (UnimplementedCommentRpcServer) mustEmbedUnimplementedCommentRpcServer() {}

// UnsafeCommentRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentRpcServer will
// result in compilation errors.
type UnsafeCommentRpcServer interface {
	mustEmbedUnimplementedCommentRpcServer()
}

func RegisterCommentRpcServer(s grpc.ServiceRegistrar, srv CommentRpcServer) {
	s.RegisterService(&CommentRpc_ServiceDesc, srv)
}

func _CommentRpc_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentRpcServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentRpc_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentRpcServer).AddComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentRpc_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentRpcServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentRpc_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentRpcServer).UpdateComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentRpc_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentRpcServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentRpc_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentRpcServer).DeleteComment(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentRpc_DeleteCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentRpcServer).DeleteCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentRpc_DeleteCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentRpcServer).DeleteCommentList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentRpc_FindComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentRpcServer).FindComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentRpc_FindComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentRpcServer).FindComment(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentRpc_FindCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentRpcServer).FindCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentRpc_FindCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentRpcServer).FindCommentList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentRpc_FindCommentCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentRpcServer).FindCommentCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentRpc_FindCommentCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentRpcServer).FindCommentCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentRpc_LikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentRpcServer).LikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentRpc_LikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentRpcServer).LikeComment(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentRpc_FindUserLikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentRpcServer).FindUserLikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentRpc_FindUserLikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentRpcServer).FindUserLikeComment(ctx, req.(*UserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentRpc_ServiceDesc is the grpc.ServiceDesc for CommentRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.CommentRpc",
	HandlerType: (*CommentRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddComment",
			Handler:    _CommentRpc_AddComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _CommentRpc_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CommentRpc_DeleteComment_Handler,
		},
		{
			MethodName: "DeleteCommentList",
			Handler:    _CommentRpc_DeleteCommentList_Handler,
		},
		{
			MethodName: "FindComment",
			Handler:    _CommentRpc_FindComment_Handler,
		},
		{
			MethodName: "FindCommentList",
			Handler:    _CommentRpc_FindCommentList_Handler,
		},
		{
			MethodName: "FindCommentCount",
			Handler:    _CommentRpc_FindCommentCount_Handler,
		},
		{
			MethodName: "LikeComment",
			Handler:    _CommentRpc_LikeComment_Handler,
		},
		{
			MethodName: "FindUserLikeComment",
			Handler:    _CommentRpc_FindUserLikeComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	RemarkRpc_AddRemark_FullMethodName        = "/blog.RemarkRpc/AddRemark"
	RemarkRpc_UpdateRemark_FullMethodName     = "/blog.RemarkRpc/UpdateRemark"
	RemarkRpc_DeleteRemark_FullMethodName     = "/blog.RemarkRpc/DeleteRemark"
	RemarkRpc_DeleteRemarkList_FullMethodName = "/blog.RemarkRpc/DeleteRemarkList"
	RemarkRpc_FindRemark_FullMethodName       = "/blog.RemarkRpc/FindRemark"
	RemarkRpc_FindRemarkList_FullMethodName   = "/blog.RemarkRpc/FindRemarkList"
	RemarkRpc_FindRemarkCount_FullMethodName  = "/blog.RemarkRpc/FindRemarkCount"
)

// RemarkRpcClient is the client API for RemarkRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemarkRpcClient interface {
	// 创建留言
	AddRemark(ctx context.Context, in *Remark, opts ...grpc.CallOption) (*Remark, error)
	// 更新留言
	UpdateRemark(ctx context.Context, in *Remark, opts ...grpc.CallOption) (*Remark, error)
	// 删除留言
	DeleteRemark(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除留言
	DeleteRemarkList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询留言
	FindRemark(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Remark, error)
	// 查询留言列表
	FindRemarkList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindRemarkListResp, error)
	// 查询留言数量
	FindRemarkCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
}

type remarkRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRemarkRpcClient(cc grpc.ClientConnInterface) RemarkRpcClient {
	return &remarkRpcClient{cc}
}

func (c *remarkRpcClient) AddRemark(ctx context.Context, in *Remark, opts ...grpc.CallOption) (*Remark, error) {
	out := new(Remark)
	err := c.cc.Invoke(ctx, RemarkRpc_AddRemark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remarkRpcClient) UpdateRemark(ctx context.Context, in *Remark, opts ...grpc.CallOption) (*Remark, error) {
	out := new(Remark)
	err := c.cc.Invoke(ctx, RemarkRpc_UpdateRemark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remarkRpcClient) DeleteRemark(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, RemarkRpc_DeleteRemark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remarkRpcClient) DeleteRemarkList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, RemarkRpc_DeleteRemarkList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remarkRpcClient) FindRemark(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Remark, error) {
	out := new(Remark)
	err := c.cc.Invoke(ctx, RemarkRpc_FindRemark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remarkRpcClient) FindRemarkList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindRemarkListResp, error) {
	out := new(FindRemarkListResp)
	err := c.cc.Invoke(ctx, RemarkRpc_FindRemarkList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remarkRpcClient) FindRemarkCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, RemarkRpc_FindRemarkCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemarkRpcServer is the server API for RemarkRpc service.
// All implementations must embed UnimplementedRemarkRpcServer
// for forward compatibility
type RemarkRpcServer interface {
	// 创建留言
	AddRemark(context.Context, *Remark) (*Remark, error)
	// 更新留言
	UpdateRemark(context.Context, *Remark) (*Remark, error)
	// 删除留言
	DeleteRemark(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除留言
	DeleteRemarkList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询留言
	FindRemark(context.Context, *IdReq) (*Remark, error)
	// 查询留言列表
	FindRemarkList(context.Context, *PageQuery) (*FindRemarkListResp, error)
	// 查询留言数量
	FindRemarkCount(context.Context, *PageQuery) (*CountResp, error)
	mustEmbedUnimplementedRemarkRpcServer()
}

// UnimplementedRemarkRpcServer must be embedded to have forward compatible implementations.
type UnimplementedRemarkRpcServer struct {
}

func (UnimplementedRemarkRpcServer) AddRemark(context.Context, *Remark) (*Remark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRemark not implemented")
}
func (UnimplementedRemarkRpcServer) UpdateRemark(context.Context, *Remark) (*Remark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRemark not implemented")
}
func (UnimplementedRemarkRpcServer) DeleteRemark(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRemark not implemented")
}
func (UnimplementedRemarkRpcServer) DeleteRemarkList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRemarkList not implemented")
}
func (UnimplementedRemarkRpcServer) FindRemark(context.Context, *IdReq) (*Remark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRemark not implemented")
}
func (UnimplementedRemarkRpcServer) FindRemarkList(context.Context, *PageQuery) (*FindRemarkListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRemarkList not implemented")
}
func (UnimplementedRemarkRpcServer) FindRemarkCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRemarkCount not implemented")
}
func (UnimplementedRemarkRpcServer) mustEmbedUnimplementedRemarkRpcServer() {}

// UnsafeRemarkRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemarkRpcServer will
// result in compilation errors.
type UnsafeRemarkRpcServer interface {
	mustEmbedUnimplementedRemarkRpcServer()
}

func RegisterRemarkRpcServer(s grpc.ServiceRegistrar, srv RemarkRpcServer) {
	s.RegisterService(&RemarkRpc_ServiceDesc, srv)
}

func _RemarkRpc_AddRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Remark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemarkRpcServer).AddRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemarkRpc_AddRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemarkRpcServer).AddRemark(ctx, req.(*Remark))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemarkRpc_UpdateRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Remark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemarkRpcServer).UpdateRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemarkRpc_UpdateRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemarkRpcServer).UpdateRemark(ctx, req.(*Remark))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemarkRpc_DeleteRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemarkRpcServer).DeleteRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemarkRpc_DeleteRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemarkRpcServer).DeleteRemark(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemarkRpc_DeleteRemarkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemarkRpcServer).DeleteRemarkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemarkRpc_DeleteRemarkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemarkRpcServer).DeleteRemarkList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemarkRpc_FindRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemarkRpcServer).FindRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemarkRpc_FindRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemarkRpcServer).FindRemark(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemarkRpc_FindRemarkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemarkRpcServer).FindRemarkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemarkRpc_FindRemarkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemarkRpcServer).FindRemarkList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemarkRpc_FindRemarkCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemarkRpcServer).FindRemarkCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemarkRpc_FindRemarkCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemarkRpcServer).FindRemarkCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// RemarkRpc_ServiceDesc is the grpc.ServiceDesc for RemarkRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemarkRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.RemarkRpc",
	HandlerType: (*RemarkRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRemark",
			Handler:    _RemarkRpc_AddRemark_Handler,
		},
		{
			MethodName: "UpdateRemark",
			Handler:    _RemarkRpc_UpdateRemark_Handler,
		},
		{
			MethodName: "DeleteRemark",
			Handler:    _RemarkRpc_DeleteRemark_Handler,
		},
		{
			MethodName: "DeleteRemarkList",
			Handler:    _RemarkRpc_DeleteRemarkList_Handler,
		},
		{
			MethodName: "FindRemark",
			Handler:    _RemarkRpc_FindRemark_Handler,
		},
		{
			MethodName: "FindRemarkList",
			Handler:    _RemarkRpc_FindRemarkList_Handler,
		},
		{
			MethodName: "FindRemarkCount",
			Handler:    _RemarkRpc_FindRemarkCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	PhotoRpc_AddPhoto_FullMethodName             = "/blog.PhotoRpc/AddPhoto"
	PhotoRpc_UpdatePhoto_FullMethodName          = "/blog.PhotoRpc/UpdatePhoto"
	PhotoRpc_DeletePhoto_FullMethodName          = "/blog.PhotoRpc/DeletePhoto"
	PhotoRpc_DeletePhotoList_FullMethodName      = "/blog.PhotoRpc/DeletePhotoList"
	PhotoRpc_FindPhoto_FullMethodName            = "/blog.PhotoRpc/FindPhoto"
	PhotoRpc_FindPhotoList_FullMethodName        = "/blog.PhotoRpc/FindPhotoList"
	PhotoRpc_FindPhotoCount_FullMethodName       = "/blog.PhotoRpc/FindPhotoCount"
	PhotoRpc_AddPhotoAlbum_FullMethodName        = "/blog.PhotoRpc/AddPhotoAlbum"
	PhotoRpc_UpdatePhotoAlbum_FullMethodName     = "/blog.PhotoRpc/UpdatePhotoAlbum"
	PhotoRpc_DeletePhotoAlbum_FullMethodName     = "/blog.PhotoRpc/DeletePhotoAlbum"
	PhotoRpc_DeletePhotoAlbumList_FullMethodName = "/blog.PhotoRpc/DeletePhotoAlbumList"
	PhotoRpc_FindPhotoAlbum_FullMethodName       = "/blog.PhotoRpc/FindPhotoAlbum"
	PhotoRpc_FindPhotoAlbumList_FullMethodName   = "/blog.PhotoRpc/FindPhotoAlbumList"
	PhotoRpc_FindPhotoAlbumCount_FullMethodName  = "/blog.PhotoRpc/FindPhotoAlbumCount"
)

// PhotoRpcClient is the client API for PhotoRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhotoRpcClient interface {
	// 创建照片
	AddPhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Photo, error)
	// 更新照片
	UpdatePhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Photo, error)
	// 删除照片
	DeletePhoto(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除照片
	DeletePhotoList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询照片
	FindPhoto(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Photo, error)
	// 查询照片列表
	FindPhotoList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindPhotoListResp, error)
	// 查询照片数量
	FindPhotoCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
	// 创建相册
	AddPhotoAlbum(ctx context.Context, in *PhotoAlbum, opts ...grpc.CallOption) (*PhotoAlbum, error)
	// 更新相册
	UpdatePhotoAlbum(ctx context.Context, in *PhotoAlbum, opts ...grpc.CallOption) (*PhotoAlbum, error)
	// 删除相册
	DeletePhotoAlbum(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除相册
	DeletePhotoAlbumList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询相册
	FindPhotoAlbum(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*PhotoAlbum, error)
	// 查询相册列表
	FindPhotoAlbumList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindPhotoAlbumListResp, error)
	// 查询相册数量
	FindPhotoAlbumCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
}

type photoRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewPhotoRpcClient(cc grpc.ClientConnInterface) PhotoRpcClient {
	return &photoRpcClient{cc}
}

func (c *photoRpcClient) AddPhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Photo, error) {
	out := new(Photo)
	err := c.cc.Invoke(ctx, PhotoRpc_AddPhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) UpdatePhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Photo, error) {
	out := new(Photo)
	err := c.cc.Invoke(ctx, PhotoRpc_UpdatePhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) DeletePhoto(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PhotoRpc_DeletePhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) DeletePhotoList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PhotoRpc_DeletePhotoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) FindPhoto(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Photo, error) {
	out := new(Photo)
	err := c.cc.Invoke(ctx, PhotoRpc_FindPhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) FindPhotoList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindPhotoListResp, error) {
	out := new(FindPhotoListResp)
	err := c.cc.Invoke(ctx, PhotoRpc_FindPhotoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) FindPhotoCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, PhotoRpc_FindPhotoCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) AddPhotoAlbum(ctx context.Context, in *PhotoAlbum, opts ...grpc.CallOption) (*PhotoAlbum, error) {
	out := new(PhotoAlbum)
	err := c.cc.Invoke(ctx, PhotoRpc_AddPhotoAlbum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) UpdatePhotoAlbum(ctx context.Context, in *PhotoAlbum, opts ...grpc.CallOption) (*PhotoAlbum, error) {
	out := new(PhotoAlbum)
	err := c.cc.Invoke(ctx, PhotoRpc_UpdatePhotoAlbum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) DeletePhotoAlbum(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PhotoRpc_DeletePhotoAlbum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) DeletePhotoAlbumList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PhotoRpc_DeletePhotoAlbumList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) FindPhotoAlbum(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*PhotoAlbum, error) {
	out := new(PhotoAlbum)
	err := c.cc.Invoke(ctx, PhotoRpc_FindPhotoAlbum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) FindPhotoAlbumList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindPhotoAlbumListResp, error) {
	out := new(FindPhotoAlbumListResp)
	err := c.cc.Invoke(ctx, PhotoRpc_FindPhotoAlbumList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) FindPhotoAlbumCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, PhotoRpc_FindPhotoAlbumCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhotoRpcServer is the server API for PhotoRpc service.
// All implementations must embed UnimplementedPhotoRpcServer
// for forward compatibility
type PhotoRpcServer interface {
	// 创建照片
	AddPhoto(context.Context, *Photo) (*Photo, error)
	// 更新照片
	UpdatePhoto(context.Context, *Photo) (*Photo, error)
	// 删除照片
	DeletePhoto(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除照片
	DeletePhotoList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询照片
	FindPhoto(context.Context, *IdReq) (*Photo, error)
	// 查询照片列表
	FindPhotoList(context.Context, *PageQuery) (*FindPhotoListResp, error)
	// 查询照片数量
	FindPhotoCount(context.Context, *PageQuery) (*CountResp, error)
	// 创建相册
	AddPhotoAlbum(context.Context, *PhotoAlbum) (*PhotoAlbum, error)
	// 更新相册
	UpdatePhotoAlbum(context.Context, *PhotoAlbum) (*PhotoAlbum, error)
	// 删除相册
	DeletePhotoAlbum(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除相册
	DeletePhotoAlbumList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询相册
	FindPhotoAlbum(context.Context, *IdReq) (*PhotoAlbum, error)
	// 查询相册列表
	FindPhotoAlbumList(context.Context, *PageQuery) (*FindPhotoAlbumListResp, error)
	// 查询相册数量
	FindPhotoAlbumCount(context.Context, *PageQuery) (*CountResp, error)
	mustEmbedUnimplementedPhotoRpcServer()
}

// UnimplementedPhotoRpcServer must be embedded to have forward compatible implementations.
type UnimplementedPhotoRpcServer struct {
}

func (UnimplementedPhotoRpcServer) AddPhoto(context.Context, *Photo) (*Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPhoto not implemented")
}
func (UnimplementedPhotoRpcServer) UpdatePhoto(context.Context, *Photo) (*Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhoto not implemented")
}
func (UnimplementedPhotoRpcServer) DeletePhoto(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhoto not implemented")
}
func (UnimplementedPhotoRpcServer) DeletePhotoList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhotoList not implemented")
}
func (UnimplementedPhotoRpcServer) FindPhoto(context.Context, *IdReq) (*Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPhoto not implemented")
}
func (UnimplementedPhotoRpcServer) FindPhotoList(context.Context, *PageQuery) (*FindPhotoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPhotoList not implemented")
}
func (UnimplementedPhotoRpcServer) FindPhotoCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPhotoCount not implemented")
}
func (UnimplementedPhotoRpcServer) AddPhotoAlbum(context.Context, *PhotoAlbum) (*PhotoAlbum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPhotoAlbum not implemented")
}
func (UnimplementedPhotoRpcServer) UpdatePhotoAlbum(context.Context, *PhotoAlbum) (*PhotoAlbum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhotoAlbum not implemented")
}
func (UnimplementedPhotoRpcServer) DeletePhotoAlbum(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhotoAlbum not implemented")
}
func (UnimplementedPhotoRpcServer) DeletePhotoAlbumList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhotoAlbumList not implemented")
}
func (UnimplementedPhotoRpcServer) FindPhotoAlbum(context.Context, *IdReq) (*PhotoAlbum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPhotoAlbum not implemented")
}
func (UnimplementedPhotoRpcServer) FindPhotoAlbumList(context.Context, *PageQuery) (*FindPhotoAlbumListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPhotoAlbumList not implemented")
}
func (UnimplementedPhotoRpcServer) FindPhotoAlbumCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPhotoAlbumCount not implemented")
}
func (UnimplementedPhotoRpcServer) mustEmbedUnimplementedPhotoRpcServer() {}

// UnsafePhotoRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhotoRpcServer will
// result in compilation errors.
type UnsafePhotoRpcServer interface {
	mustEmbedUnimplementedPhotoRpcServer()
}

func RegisterPhotoRpcServer(s grpc.ServiceRegistrar, srv PhotoRpcServer) {
	s.RegisterService(&PhotoRpc_ServiceDesc, srv)
}

func _PhotoRpc_AddPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Photo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).AddPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_AddPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).AddPhoto(ctx, req.(*Photo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_UpdatePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Photo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).UpdatePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_UpdatePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).UpdatePhoto(ctx, req.(*Photo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_DeletePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).DeletePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_DeletePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).DeletePhoto(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_DeletePhotoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).DeletePhotoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_DeletePhotoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).DeletePhotoList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_FindPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).FindPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_FindPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).FindPhoto(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_FindPhotoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).FindPhotoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_FindPhotoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).FindPhotoList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_FindPhotoCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).FindPhotoCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_FindPhotoCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).FindPhotoCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_AddPhotoAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotoAlbum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).AddPhotoAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_AddPhotoAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).AddPhotoAlbum(ctx, req.(*PhotoAlbum))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_UpdatePhotoAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotoAlbum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).UpdatePhotoAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_UpdatePhotoAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).UpdatePhotoAlbum(ctx, req.(*PhotoAlbum))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_DeletePhotoAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).DeletePhotoAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_DeletePhotoAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).DeletePhotoAlbum(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_DeletePhotoAlbumList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).DeletePhotoAlbumList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_DeletePhotoAlbumList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).DeletePhotoAlbumList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_FindPhotoAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).FindPhotoAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_FindPhotoAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).FindPhotoAlbum(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_FindPhotoAlbumList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).FindPhotoAlbumList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_FindPhotoAlbumList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).FindPhotoAlbumList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_FindPhotoAlbumCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).FindPhotoAlbumCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_FindPhotoAlbumCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).FindPhotoAlbumCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// PhotoRpc_ServiceDesc is the grpc.ServiceDesc for PhotoRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhotoRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.PhotoRpc",
	HandlerType: (*PhotoRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPhoto",
			Handler:    _PhotoRpc_AddPhoto_Handler,
		},
		{
			MethodName: "UpdatePhoto",
			Handler:    _PhotoRpc_UpdatePhoto_Handler,
		},
		{
			MethodName: "DeletePhoto",
			Handler:    _PhotoRpc_DeletePhoto_Handler,
		},
		{
			MethodName: "DeletePhotoList",
			Handler:    _PhotoRpc_DeletePhotoList_Handler,
		},
		{
			MethodName: "FindPhoto",
			Handler:    _PhotoRpc_FindPhoto_Handler,
		},
		{
			MethodName: "FindPhotoList",
			Handler:    _PhotoRpc_FindPhotoList_Handler,
		},
		{
			MethodName: "FindPhotoCount",
			Handler:    _PhotoRpc_FindPhotoCount_Handler,
		},
		{
			MethodName: "AddPhotoAlbum",
			Handler:    _PhotoRpc_AddPhotoAlbum_Handler,
		},
		{
			MethodName: "UpdatePhotoAlbum",
			Handler:    _PhotoRpc_UpdatePhotoAlbum_Handler,
		},
		{
			MethodName: "DeletePhotoAlbum",
			Handler:    _PhotoRpc_DeletePhotoAlbum_Handler,
		},
		{
			MethodName: "DeletePhotoAlbumList",
			Handler:    _PhotoRpc_DeletePhotoAlbumList_Handler,
		},
		{
			MethodName: "FindPhotoAlbum",
			Handler:    _PhotoRpc_FindPhotoAlbum_Handler,
		},
		{
			MethodName: "FindPhotoAlbumList",
			Handler:    _PhotoRpc_FindPhotoAlbumList_Handler,
		},
		{
			MethodName: "FindPhotoAlbumCount",
			Handler:    _PhotoRpc_FindPhotoAlbumCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	PageRpc_AddPage_FullMethodName        = "/blog.PageRpc/AddPage"
	PageRpc_UpdatePage_FullMethodName     = "/blog.PageRpc/UpdatePage"
	PageRpc_DeletePage_FullMethodName     = "/blog.PageRpc/DeletePage"
	PageRpc_DeletePageList_FullMethodName = "/blog.PageRpc/DeletePageList"
	PageRpc_FindPage_FullMethodName       = "/blog.PageRpc/FindPage"
	PageRpc_FindPageList_FullMethodName   = "/blog.PageRpc/FindPageList"
	PageRpc_FindPageCount_FullMethodName  = "/blog.PageRpc/FindPageCount"
)

// PageRpcClient is the client API for PageRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PageRpcClient interface {
	// 创建页面
	AddPage(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Page, error)
	// 更新页面
	UpdatePage(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Page, error)
	// 删除页面
	DeletePage(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除页面
	DeletePageList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询页面
	FindPage(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Page, error)
	// 查询页面列表
	FindPageList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindPageListResp, error)
	// 查询页面数量
	FindPageCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
}

type pageRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewPageRpcClient(cc grpc.ClientConnInterface) PageRpcClient {
	return &pageRpcClient{cc}
}

func (c *pageRpcClient) AddPage(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, PageRpc_AddPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageRpcClient) UpdatePage(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, PageRpc_UpdatePage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageRpcClient) DeletePage(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PageRpc_DeletePage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageRpcClient) DeletePageList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PageRpc_DeletePageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageRpcClient) FindPage(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, PageRpc_FindPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageRpcClient) FindPageList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindPageListResp, error) {
	out := new(FindPageListResp)
	err := c.cc.Invoke(ctx, PageRpc_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageRpcClient) FindPageCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, PageRpc_FindPageCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PageRpcServer is the server API for PageRpc service.
// All implementations must embed UnimplementedPageRpcServer
// for forward compatibility
type PageRpcServer interface {
	// 创建页面
	AddPage(context.Context, *Page) (*Page, error)
	// 更新页面
	UpdatePage(context.Context, *Page) (*Page, error)
	// 删除页面
	DeletePage(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除页面
	DeletePageList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询页面
	FindPage(context.Context, *IdReq) (*Page, error)
	// 查询页面列表
	FindPageList(context.Context, *PageQuery) (*FindPageListResp, error)
	// 查询页面数量
	FindPageCount(context.Context, *PageQuery) (*CountResp, error)
	mustEmbedUnimplementedPageRpcServer()
}

// UnimplementedPageRpcServer must be embedded to have forward compatible implementations.
type UnimplementedPageRpcServer struct {
}

func (UnimplementedPageRpcServer) AddPage(context.Context, *Page) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPage not implemented")
}
func (UnimplementedPageRpcServer) UpdatePage(context.Context, *Page) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePage not implemented")
}
func (UnimplementedPageRpcServer) DeletePage(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePage not implemented")
}
func (UnimplementedPageRpcServer) DeletePageList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePageList not implemented")
}
func (UnimplementedPageRpcServer) FindPage(context.Context, *IdReq) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPage not implemented")
}
func (UnimplementedPageRpcServer) FindPageList(context.Context, *PageQuery) (*FindPageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedPageRpcServer) FindPageCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageCount not implemented")
}
func (UnimplementedPageRpcServer) mustEmbedUnimplementedPageRpcServer() {}

// UnsafePageRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PageRpcServer will
// result in compilation errors.
type UnsafePageRpcServer interface {
	mustEmbedUnimplementedPageRpcServer()
}

func RegisterPageRpcServer(s grpc.ServiceRegistrar, srv PageRpcServer) {
	s.RegisterService(&PageRpc_ServiceDesc, srv)
}

func _PageRpc_AddPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageRpcServer).AddPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageRpc_AddPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageRpcServer).AddPage(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageRpc_UpdatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageRpcServer).UpdatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageRpc_UpdatePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageRpcServer).UpdatePage(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageRpc_DeletePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageRpcServer).DeletePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageRpc_DeletePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageRpcServer).DeletePage(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageRpc_DeletePageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageRpcServer).DeletePageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageRpc_DeletePageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageRpcServer).DeletePageList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageRpc_FindPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageRpcServer).FindPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageRpc_FindPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageRpcServer).FindPage(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageRpc_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageRpcServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageRpc_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageRpcServer).FindPageList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageRpc_FindPageCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageRpcServer).FindPageCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageRpc_FindPageCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageRpcServer).FindPageCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// PageRpc_ServiceDesc is the grpc.ServiceDesc for PageRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PageRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.PageRpc",
	HandlerType: (*PageRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPage",
			Handler:    _PageRpc_AddPage_Handler,
		},
		{
			MethodName: "UpdatePage",
			Handler:    _PageRpc_UpdatePage_Handler,
		},
		{
			MethodName: "DeletePage",
			Handler:    _PageRpc_DeletePage_Handler,
		},
		{
			MethodName: "DeletePageList",
			Handler:    _PageRpc_DeletePageList_Handler,
		},
		{
			MethodName: "FindPage",
			Handler:    _PageRpc_FindPage_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _PageRpc_FindPageList_Handler,
		},
		{
			MethodName: "FindPageCount",
			Handler:    _PageRpc_FindPageCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	FriendLinkRpc_AddFriendLink_FullMethodName        = "/blog.FriendLinkRpc/AddFriendLink"
	FriendLinkRpc_UpdateFriendLink_FullMethodName     = "/blog.FriendLinkRpc/UpdateFriendLink"
	FriendLinkRpc_DeleteFriendLink_FullMethodName     = "/blog.FriendLinkRpc/DeleteFriendLink"
	FriendLinkRpc_DeleteFriendLinkList_FullMethodName = "/blog.FriendLinkRpc/DeleteFriendLinkList"
	FriendLinkRpc_FindFriendLink_FullMethodName       = "/blog.FriendLinkRpc/FindFriendLink"
	FriendLinkRpc_FindFriendLinkList_FullMethodName   = "/blog.FriendLinkRpc/FindFriendLinkList"
	FriendLinkRpc_FindFriendLinkCount_FullMethodName  = "/blog.FriendLinkRpc/FindFriendLinkCount"
)

// FriendLinkRpcClient is the client API for FriendLinkRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendLinkRpcClient interface {
	// 创建友链
	AddFriendLink(ctx context.Context, in *FriendLink, opts ...grpc.CallOption) (*FriendLink, error)
	// 更新友链
	UpdateFriendLink(ctx context.Context, in *FriendLink, opts ...grpc.CallOption) (*FriendLink, error)
	// 删除友链
	DeleteFriendLink(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除友链
	DeleteFriendLinkList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询友链
	FindFriendLink(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*FriendLink, error)
	// 查询友链列表
	FindFriendLinkList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindFriendLinkListResp, error)
	// 查询友链数量
	FindFriendLinkCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
}

type friendLinkRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendLinkRpcClient(cc grpc.ClientConnInterface) FriendLinkRpcClient {
	return &friendLinkRpcClient{cc}
}

func (c *friendLinkRpcClient) AddFriendLink(ctx context.Context, in *FriendLink, opts ...grpc.CallOption) (*FriendLink, error) {
	out := new(FriendLink)
	err := c.cc.Invoke(ctx, FriendLinkRpc_AddFriendLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendLinkRpcClient) UpdateFriendLink(ctx context.Context, in *FriendLink, opts ...grpc.CallOption) (*FriendLink, error) {
	out := new(FriendLink)
	err := c.cc.Invoke(ctx, FriendLinkRpc_UpdateFriendLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendLinkRpcClient) DeleteFriendLink(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, FriendLinkRpc_DeleteFriendLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendLinkRpcClient) DeleteFriendLinkList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, FriendLinkRpc_DeleteFriendLinkList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendLinkRpcClient) FindFriendLink(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*FriendLink, error) {
	out := new(FriendLink)
	err := c.cc.Invoke(ctx, FriendLinkRpc_FindFriendLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendLinkRpcClient) FindFriendLinkList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindFriendLinkListResp, error) {
	out := new(FindFriendLinkListResp)
	err := c.cc.Invoke(ctx, FriendLinkRpc_FindFriendLinkList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendLinkRpcClient) FindFriendLinkCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, FriendLinkRpc_FindFriendLinkCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendLinkRpcServer is the server API for FriendLinkRpc service.
// All implementations must embed UnimplementedFriendLinkRpcServer
// for forward compatibility
type FriendLinkRpcServer interface {
	// 创建友链
	AddFriendLink(context.Context, *FriendLink) (*FriendLink, error)
	// 更新友链
	UpdateFriendLink(context.Context, *FriendLink) (*FriendLink, error)
	// 删除友链
	DeleteFriendLink(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除友链
	DeleteFriendLinkList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询友链
	FindFriendLink(context.Context, *IdReq) (*FriendLink, error)
	// 查询友链列表
	FindFriendLinkList(context.Context, *PageQuery) (*FindFriendLinkListResp, error)
	// 查询友链数量
	FindFriendLinkCount(context.Context, *PageQuery) (*CountResp, error)
	mustEmbedUnimplementedFriendLinkRpcServer()
}

// UnimplementedFriendLinkRpcServer must be embedded to have forward compatible implementations.
type UnimplementedFriendLinkRpcServer struct {
}

func (UnimplementedFriendLinkRpcServer) AddFriendLink(context.Context, *FriendLink) (*FriendLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriendLink not implemented")
}
func (UnimplementedFriendLinkRpcServer) UpdateFriendLink(context.Context, *FriendLink) (*FriendLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFriendLink not implemented")
}
func (UnimplementedFriendLinkRpcServer) DeleteFriendLink(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriendLink not implemented")
}
func (UnimplementedFriendLinkRpcServer) DeleteFriendLinkList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriendLinkList not implemented")
}
func (UnimplementedFriendLinkRpcServer) FindFriendLink(context.Context, *IdReq) (*FriendLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFriendLink not implemented")
}
func (UnimplementedFriendLinkRpcServer) FindFriendLinkList(context.Context, *PageQuery) (*FindFriendLinkListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFriendLinkList not implemented")
}
func (UnimplementedFriendLinkRpcServer) FindFriendLinkCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFriendLinkCount not implemented")
}
func (UnimplementedFriendLinkRpcServer) mustEmbedUnimplementedFriendLinkRpcServer() {}

// UnsafeFriendLinkRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendLinkRpcServer will
// result in compilation errors.
type UnsafeFriendLinkRpcServer interface {
	mustEmbedUnimplementedFriendLinkRpcServer()
}

func RegisterFriendLinkRpcServer(s grpc.ServiceRegistrar, srv FriendLinkRpcServer) {
	s.RegisterService(&FriendLinkRpc_ServiceDesc, srv)
}

func _FriendLinkRpc_AddFriendLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendLinkRpcServer).AddFriendLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendLinkRpc_AddFriendLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendLinkRpcServer).AddFriendLink(ctx, req.(*FriendLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendLinkRpc_UpdateFriendLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendLinkRpcServer).UpdateFriendLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendLinkRpc_UpdateFriendLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendLinkRpcServer).UpdateFriendLink(ctx, req.(*FriendLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendLinkRpc_DeleteFriendLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendLinkRpcServer).DeleteFriendLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendLinkRpc_DeleteFriendLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendLinkRpcServer).DeleteFriendLink(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendLinkRpc_DeleteFriendLinkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendLinkRpcServer).DeleteFriendLinkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendLinkRpc_DeleteFriendLinkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendLinkRpcServer).DeleteFriendLinkList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendLinkRpc_FindFriendLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendLinkRpcServer).FindFriendLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendLinkRpc_FindFriendLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendLinkRpcServer).FindFriendLink(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendLinkRpc_FindFriendLinkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendLinkRpcServer).FindFriendLinkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendLinkRpc_FindFriendLinkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendLinkRpcServer).FindFriendLinkList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendLinkRpc_FindFriendLinkCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendLinkRpcServer).FindFriendLinkCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendLinkRpc_FindFriendLinkCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendLinkRpcServer).FindFriendLinkCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendLinkRpc_ServiceDesc is the grpc.ServiceDesc for FriendLinkRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendLinkRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.FriendLinkRpc",
	HandlerType: (*FriendLinkRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFriendLink",
			Handler:    _FriendLinkRpc_AddFriendLink_Handler,
		},
		{
			MethodName: "UpdateFriendLink",
			Handler:    _FriendLinkRpc_UpdateFriendLink_Handler,
		},
		{
			MethodName: "DeleteFriendLink",
			Handler:    _FriendLinkRpc_DeleteFriendLink_Handler,
		},
		{
			MethodName: "DeleteFriendLinkList",
			Handler:    _FriendLinkRpc_DeleteFriendLinkList_Handler,
		},
		{
			MethodName: "FindFriendLink",
			Handler:    _FriendLinkRpc_FindFriendLink_Handler,
		},
		{
			MethodName: "FindFriendLinkList",
			Handler:    _FriendLinkRpc_FindFriendLinkList_Handler,
		},
		{
			MethodName: "FindFriendLinkCount",
			Handler:    _FriendLinkRpc_FindFriendLinkCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	TalkRpc_AddTalk_FullMethodName          = "/blog.TalkRpc/AddTalk"
	TalkRpc_UpdateTalk_FullMethodName       = "/blog.TalkRpc/UpdateTalk"
	TalkRpc_DeleteTalk_FullMethodName       = "/blog.TalkRpc/DeleteTalk"
	TalkRpc_DeleteTalkList_FullMethodName   = "/blog.TalkRpc/DeleteTalkList"
	TalkRpc_FindTalk_FullMethodName         = "/blog.TalkRpc/FindTalk"
	TalkRpc_FindTalkList_FullMethodName     = "/blog.TalkRpc/FindTalkList"
	TalkRpc_FindTalkCount_FullMethodName    = "/blog.TalkRpc/FindTalkCount"
	TalkRpc_LikeTalk_FullMethodName         = "/blog.TalkRpc/LikeTalk"
	TalkRpc_FindUserLikeTalk_FullMethodName = "/blog.TalkRpc/FindUserLikeTalk"
)

// TalkRpcClient is the client API for TalkRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TalkRpcClient interface {
	// 创建说说
	AddTalk(ctx context.Context, in *Talk, opts ...grpc.CallOption) (*Talk, error)
	// 更新说说
	UpdateTalk(ctx context.Context, in *Talk, opts ...grpc.CallOption) (*Talk, error)
	// 删除说说
	DeleteTalk(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除说说
	DeleteTalkList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询说说
	FindTalk(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Talk, error)
	// 查询说说列表
	FindTalkList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindTalkListResp, error)
	// 查询说说数量
	FindTalkCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
	// 点赞说说
	LikeTalk(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 用户点赞的说说
	FindUserLikeTalk(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindLikeTalkResp, error)
}

type talkRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewTalkRpcClient(cc grpc.ClientConnInterface) TalkRpcClient {
	return &talkRpcClient{cc}
}

func (c *talkRpcClient) AddTalk(ctx context.Context, in *Talk, opts ...grpc.CallOption) (*Talk, error) {
	out := new(Talk)
	err := c.cc.Invoke(ctx, TalkRpc_AddTalk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkRpcClient) UpdateTalk(ctx context.Context, in *Talk, opts ...grpc.CallOption) (*Talk, error) {
	out := new(Talk)
	err := c.cc.Invoke(ctx, TalkRpc_UpdateTalk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkRpcClient) DeleteTalk(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, TalkRpc_DeleteTalk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkRpcClient) DeleteTalkList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, TalkRpc_DeleteTalkList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkRpcClient) FindTalk(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Talk, error) {
	out := new(Talk)
	err := c.cc.Invoke(ctx, TalkRpc_FindTalk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkRpcClient) FindTalkList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindTalkListResp, error) {
	out := new(FindTalkListResp)
	err := c.cc.Invoke(ctx, TalkRpc_FindTalkList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkRpcClient) FindTalkCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, TalkRpc_FindTalkCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkRpcClient) LikeTalk(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, TalkRpc_LikeTalk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkRpcClient) FindUserLikeTalk(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindLikeTalkResp, error) {
	out := new(FindLikeTalkResp)
	err := c.cc.Invoke(ctx, TalkRpc_FindUserLikeTalk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TalkRpcServer is the server API for TalkRpc service.
// All implementations must embed UnimplementedTalkRpcServer
// for forward compatibility
type TalkRpcServer interface {
	// 创建说说
	AddTalk(context.Context, *Talk) (*Talk, error)
	// 更新说说
	UpdateTalk(context.Context, *Talk) (*Talk, error)
	// 删除说说
	DeleteTalk(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除说说
	DeleteTalkList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询说说
	FindTalk(context.Context, *IdReq) (*Talk, error)
	// 查询说说列表
	FindTalkList(context.Context, *PageQuery) (*FindTalkListResp, error)
	// 查询说说数量
	FindTalkCount(context.Context, *PageQuery) (*CountResp, error)
	// 点赞说说
	LikeTalk(context.Context, *IdReq) (*EmptyResp, error)
	// 用户点赞的说说
	FindUserLikeTalk(context.Context, *UserIdReq) (*FindLikeTalkResp, error)
	mustEmbedUnimplementedTalkRpcServer()
}

// UnimplementedTalkRpcServer must be embedded to have forward compatible implementations.
type UnimplementedTalkRpcServer struct {
}

func (UnimplementedTalkRpcServer) AddTalk(context.Context, *Talk) (*Talk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTalk not implemented")
}
func (UnimplementedTalkRpcServer) UpdateTalk(context.Context, *Talk) (*Talk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTalk not implemented")
}
func (UnimplementedTalkRpcServer) DeleteTalk(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTalk not implemented")
}
func (UnimplementedTalkRpcServer) DeleteTalkList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTalkList not implemented")
}
func (UnimplementedTalkRpcServer) FindTalk(context.Context, *IdReq) (*Talk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTalk not implemented")
}
func (UnimplementedTalkRpcServer) FindTalkList(context.Context, *PageQuery) (*FindTalkListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTalkList not implemented")
}
func (UnimplementedTalkRpcServer) FindTalkCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTalkCount not implemented")
}
func (UnimplementedTalkRpcServer) LikeTalk(context.Context, *IdReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeTalk not implemented")
}
func (UnimplementedTalkRpcServer) FindUserLikeTalk(context.Context, *UserIdReq) (*FindLikeTalkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserLikeTalk not implemented")
}
func (UnimplementedTalkRpcServer) mustEmbedUnimplementedTalkRpcServer() {}

// UnsafeTalkRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TalkRpcServer will
// result in compilation errors.
type UnsafeTalkRpcServer interface {
	mustEmbedUnimplementedTalkRpcServer()
}

func RegisterTalkRpcServer(s grpc.ServiceRegistrar, srv TalkRpcServer) {
	s.RegisterService(&TalkRpc_ServiceDesc, srv)
}

func _TalkRpc_AddTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Talk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRpcServer).AddTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRpc_AddTalk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRpcServer).AddTalk(ctx, req.(*Talk))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkRpc_UpdateTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Talk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRpcServer).UpdateTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRpc_UpdateTalk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRpcServer).UpdateTalk(ctx, req.(*Talk))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkRpc_DeleteTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRpcServer).DeleteTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRpc_DeleteTalk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRpcServer).DeleteTalk(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkRpc_DeleteTalkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRpcServer).DeleteTalkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRpc_DeleteTalkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRpcServer).DeleteTalkList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkRpc_FindTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRpcServer).FindTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRpc_FindTalk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRpcServer).FindTalk(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkRpc_FindTalkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRpcServer).FindTalkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRpc_FindTalkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRpcServer).FindTalkList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkRpc_FindTalkCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRpcServer).FindTalkCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRpc_FindTalkCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRpcServer).FindTalkCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkRpc_LikeTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRpcServer).LikeTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRpc_LikeTalk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRpcServer).LikeTalk(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkRpc_FindUserLikeTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRpcServer).FindUserLikeTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRpc_FindUserLikeTalk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRpcServer).FindUserLikeTalk(ctx, req.(*UserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TalkRpc_ServiceDesc is the grpc.ServiceDesc for TalkRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TalkRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.TalkRpc",
	HandlerType: (*TalkRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTalk",
			Handler:    _TalkRpc_AddTalk_Handler,
		},
		{
			MethodName: "UpdateTalk",
			Handler:    _TalkRpc_UpdateTalk_Handler,
		},
		{
			MethodName: "DeleteTalk",
			Handler:    _TalkRpc_DeleteTalk_Handler,
		},
		{
			MethodName: "DeleteTalkList",
			Handler:    _TalkRpc_DeleteTalkList_Handler,
		},
		{
			MethodName: "FindTalk",
			Handler:    _TalkRpc_FindTalk_Handler,
		},
		{
			MethodName: "FindTalkList",
			Handler:    _TalkRpc_FindTalkList_Handler,
		},
		{
			MethodName: "FindTalkCount",
			Handler:    _TalkRpc_FindTalkCount_Handler,
		},
		{
			MethodName: "LikeTalk",
			Handler:    _TalkRpc_LikeTalk_Handler,
		},
		{
			MethodName: "FindUserLikeTalk",
			Handler:    _TalkRpc_FindUserLikeTalk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	LogRpc_AddOperationLog_FullMethodName        = "/blog.LogRpc/AddOperationLog"
	LogRpc_UpdateOperationLog_FullMethodName     = "/blog.LogRpc/UpdateOperationLog"
	LogRpc_DeleteOperationLog_FullMethodName     = "/blog.LogRpc/DeleteOperationLog"
	LogRpc_DeleteOperationLogList_FullMethodName = "/blog.LogRpc/DeleteOperationLogList"
	LogRpc_FindOperationLog_FullMethodName       = "/blog.LogRpc/FindOperationLog"
	LogRpc_FindOperationLogList_FullMethodName   = "/blog.LogRpc/FindOperationLogList"
	LogRpc_FindOperationLogCount_FullMethodName  = "/blog.LogRpc/FindOperationLogCount"
)

// LogRpcClient is the client API for LogRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogRpcClient interface {
	// 创建操作记录
	AddOperationLog(ctx context.Context, in *OperationLog, opts ...grpc.CallOption) (*OperationLog, error)
	// 更新操作记录
	UpdateOperationLog(ctx context.Context, in *OperationLog, opts ...grpc.CallOption) (*OperationLog, error)
	// 删除操作记录
	DeleteOperationLog(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除操作记录
	DeleteOperationLogList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询操作记录
	FindOperationLog(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*OperationLog, error)
	// 查询操作记录列表
	FindOperationLogList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindOperationLogListResp, error)
	// 查询操作记录数量
	FindOperationLogCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
}

type logRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewLogRpcClient(cc grpc.ClientConnInterface) LogRpcClient {
	return &logRpcClient{cc}
}

func (c *logRpcClient) AddOperationLog(ctx context.Context, in *OperationLog, opts ...grpc.CallOption) (*OperationLog, error) {
	out := new(OperationLog)
	err := c.cc.Invoke(ctx, LogRpc_AddOperationLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logRpcClient) UpdateOperationLog(ctx context.Context, in *OperationLog, opts ...grpc.CallOption) (*OperationLog, error) {
	out := new(OperationLog)
	err := c.cc.Invoke(ctx, LogRpc_UpdateOperationLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logRpcClient) DeleteOperationLog(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, LogRpc_DeleteOperationLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logRpcClient) DeleteOperationLogList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, LogRpc_DeleteOperationLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logRpcClient) FindOperationLog(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*OperationLog, error) {
	out := new(OperationLog)
	err := c.cc.Invoke(ctx, LogRpc_FindOperationLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logRpcClient) FindOperationLogList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindOperationLogListResp, error) {
	out := new(FindOperationLogListResp)
	err := c.cc.Invoke(ctx, LogRpc_FindOperationLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logRpcClient) FindOperationLogCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, LogRpc_FindOperationLogCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogRpcServer is the server API for LogRpc service.
// All implementations must embed UnimplementedLogRpcServer
// for forward compatibility
type LogRpcServer interface {
	// 创建操作记录
	AddOperationLog(context.Context, *OperationLog) (*OperationLog, error)
	// 更新操作记录
	UpdateOperationLog(context.Context, *OperationLog) (*OperationLog, error)
	// 删除操作记录
	DeleteOperationLog(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除操作记录
	DeleteOperationLogList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询操作记录
	FindOperationLog(context.Context, *IdReq) (*OperationLog, error)
	// 查询操作记录列表
	FindOperationLogList(context.Context, *PageQuery) (*FindOperationLogListResp, error)
	// 查询操作记录数量
	FindOperationLogCount(context.Context, *PageQuery) (*CountResp, error)
	mustEmbedUnimplementedLogRpcServer()
}

// UnimplementedLogRpcServer must be embedded to have forward compatible implementations.
type UnimplementedLogRpcServer struct {
}

func (UnimplementedLogRpcServer) AddOperationLog(context.Context, *OperationLog) (*OperationLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOperationLog not implemented")
}
func (UnimplementedLogRpcServer) UpdateOperationLog(context.Context, *OperationLog) (*OperationLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOperationLog not implemented")
}
func (UnimplementedLogRpcServer) DeleteOperationLog(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOperationLog not implemented")
}
func (UnimplementedLogRpcServer) DeleteOperationLogList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOperationLogList not implemented")
}
func (UnimplementedLogRpcServer) FindOperationLog(context.Context, *IdReq) (*OperationLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOperationLog not implemented")
}
func (UnimplementedLogRpcServer) FindOperationLogList(context.Context, *PageQuery) (*FindOperationLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOperationLogList not implemented")
}
func (UnimplementedLogRpcServer) FindOperationLogCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOperationLogCount not implemented")
}
func (UnimplementedLogRpcServer) mustEmbedUnimplementedLogRpcServer() {}

// UnsafeLogRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogRpcServer will
// result in compilation errors.
type UnsafeLogRpcServer interface {
	mustEmbedUnimplementedLogRpcServer()
}

func RegisterLogRpcServer(s grpc.ServiceRegistrar, srv LogRpcServer) {
	s.RegisterService(&LogRpc_ServiceDesc, srv)
}

func _LogRpc_AddOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRpcServer).AddOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogRpc_AddOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRpcServer).AddOperationLog(ctx, req.(*OperationLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogRpc_UpdateOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRpcServer).UpdateOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogRpc_UpdateOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRpcServer).UpdateOperationLog(ctx, req.(*OperationLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogRpc_DeleteOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRpcServer).DeleteOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogRpc_DeleteOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRpcServer).DeleteOperationLog(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogRpc_DeleteOperationLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRpcServer).DeleteOperationLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogRpc_DeleteOperationLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRpcServer).DeleteOperationLogList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogRpc_FindOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRpcServer).FindOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogRpc_FindOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRpcServer).FindOperationLog(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogRpc_FindOperationLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRpcServer).FindOperationLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogRpc_FindOperationLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRpcServer).FindOperationLogList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogRpc_FindOperationLogCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRpcServer).FindOperationLogCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogRpc_FindOperationLogCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRpcServer).FindOperationLogCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// LogRpc_ServiceDesc is the grpc.ServiceDesc for LogRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.LogRpc",
	HandlerType: (*LogRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOperationLog",
			Handler:    _LogRpc_AddOperationLog_Handler,
		},
		{
			MethodName: "UpdateOperationLog",
			Handler:    _LogRpc_UpdateOperationLog_Handler,
		},
		{
			MethodName: "DeleteOperationLog",
			Handler:    _LogRpc_DeleteOperationLog_Handler,
		},
		{
			MethodName: "DeleteOperationLogList",
			Handler:    _LogRpc_DeleteOperationLogList_Handler,
		},
		{
			MethodName: "FindOperationLog",
			Handler:    _LogRpc_FindOperationLog_Handler,
		},
		{
			MethodName: "FindOperationLogList",
			Handler:    _LogRpc_FindOperationLogList_Handler,
		},
		{
			MethodName: "FindOperationLogCount",
			Handler:    _LogRpc_FindOperationLogCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	ChatRpc_AddChatRecord_FullMethodName        = "/blog.ChatRpc/AddChatRecord"
	ChatRpc_UpdateChatRecord_FullMethodName     = "/blog.ChatRpc/UpdateChatRecord"
	ChatRpc_DeleteChatRecord_FullMethodName     = "/blog.ChatRpc/DeleteChatRecord"
	ChatRpc_DeleteChatRecordList_FullMethodName = "/blog.ChatRpc/DeleteChatRecordList"
	ChatRpc_FindChatRecord_FullMethodName       = "/blog.ChatRpc/FindChatRecord"
	ChatRpc_FindChatRecordList_FullMethodName   = "/blog.ChatRpc/FindChatRecordList"
	ChatRpc_FindChatRecordCount_FullMethodName  = "/blog.ChatRpc/FindChatRecordCount"
)

// ChatRpcClient is the client API for ChatRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatRpcClient interface {
	// 创建聊天记录
	AddChatRecord(ctx context.Context, in *ChatRecord, opts ...grpc.CallOption) (*ChatRecord, error)
	// 更新聊天记录
	UpdateChatRecord(ctx context.Context, in *ChatRecord, opts ...grpc.CallOption) (*ChatRecord, error)
	// 删除聊天记录
	DeleteChatRecord(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除聊天记录
	DeleteChatRecordList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询聊天记录
	FindChatRecord(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ChatRecord, error)
	// 查询聊天记录列表
	FindChatRecordList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindChatRecordListResp, error)
	// 查询聊天记录数量
	FindChatRecordCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
}

type chatRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewChatRpcClient(cc grpc.ClientConnInterface) ChatRpcClient {
	return &chatRpcClient{cc}
}

func (c *chatRpcClient) AddChatRecord(ctx context.Context, in *ChatRecord, opts ...grpc.CallOption) (*ChatRecord, error) {
	out := new(ChatRecord)
	err := c.cc.Invoke(ctx, ChatRpc_AddChatRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) UpdateChatRecord(ctx context.Context, in *ChatRecord, opts ...grpc.CallOption) (*ChatRecord, error) {
	out := new(ChatRecord)
	err := c.cc.Invoke(ctx, ChatRpc_UpdateChatRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) DeleteChatRecord(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ChatRpc_DeleteChatRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) DeleteChatRecordList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ChatRpc_DeleteChatRecordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) FindChatRecord(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ChatRecord, error) {
	out := new(ChatRecord)
	err := c.cc.Invoke(ctx, ChatRpc_FindChatRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) FindChatRecordList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FindChatRecordListResp, error) {
	out := new(FindChatRecordListResp)
	err := c.cc.Invoke(ctx, ChatRpc_FindChatRecordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) FindChatRecordCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, ChatRpc_FindChatRecordCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatRpcServer is the server API for ChatRpc service.
// All implementations must embed UnimplementedChatRpcServer
// for forward compatibility
type ChatRpcServer interface {
	// 创建聊天记录
	AddChatRecord(context.Context, *ChatRecord) (*ChatRecord, error)
	// 更新聊天记录
	UpdateChatRecord(context.Context, *ChatRecord) (*ChatRecord, error)
	// 删除聊天记录
	DeleteChatRecord(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除聊天记录
	DeleteChatRecordList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询聊天记录
	FindChatRecord(context.Context, *IdReq) (*ChatRecord, error)
	// 查询聊天记录列表
	FindChatRecordList(context.Context, *PageQuery) (*FindChatRecordListResp, error)
	// 查询聊天记录数量
	FindChatRecordCount(context.Context, *PageQuery) (*CountResp, error)
	mustEmbedUnimplementedChatRpcServer()
}

// UnimplementedChatRpcServer must be embedded to have forward compatible implementations.
type UnimplementedChatRpcServer struct {
}

func (UnimplementedChatRpcServer) AddChatRecord(context.Context, *ChatRecord) (*ChatRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChatRecord not implemented")
}
func (UnimplementedChatRpcServer) UpdateChatRecord(context.Context, *ChatRecord) (*ChatRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatRecord not implemented")
}
func (UnimplementedChatRpcServer) DeleteChatRecord(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatRecord not implemented")
}
func (UnimplementedChatRpcServer) DeleteChatRecordList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatRecordList not implemented")
}
func (UnimplementedChatRpcServer) FindChatRecord(context.Context, *IdReq) (*ChatRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindChatRecord not implemented")
}
func (UnimplementedChatRpcServer) FindChatRecordList(context.Context, *PageQuery) (*FindChatRecordListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindChatRecordList not implemented")
}
func (UnimplementedChatRpcServer) FindChatRecordCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindChatRecordCount not implemented")
}
func (UnimplementedChatRpcServer) mustEmbedUnimplementedChatRpcServer() {}

// UnsafeChatRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatRpcServer will
// result in compilation errors.
type UnsafeChatRpcServer interface {
	mustEmbedUnimplementedChatRpcServer()
}

func RegisterChatRpcServer(s grpc.ServiceRegistrar, srv ChatRpcServer) {
	s.RegisterService(&ChatRpc_ServiceDesc, srv)
}

func _ChatRpc_AddChatRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).AddChatRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_AddChatRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).AddChatRecord(ctx, req.(*ChatRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_UpdateChatRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).UpdateChatRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_UpdateChatRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).UpdateChatRecord(ctx, req.(*ChatRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_DeleteChatRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).DeleteChatRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_DeleteChatRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).DeleteChatRecord(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_DeleteChatRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).DeleteChatRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_DeleteChatRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).DeleteChatRecordList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_FindChatRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).FindChatRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_FindChatRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).FindChatRecord(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_FindChatRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).FindChatRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_FindChatRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).FindChatRecordList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_FindChatRecordCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).FindChatRecordCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_FindChatRecordCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).FindChatRecordCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatRpc_ServiceDesc is the grpc.ServiceDesc for ChatRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.ChatRpc",
	HandlerType: (*ChatRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddChatRecord",
			Handler:    _ChatRpc_AddChatRecord_Handler,
		},
		{
			MethodName: "UpdateChatRecord",
			Handler:    _ChatRpc_UpdateChatRecord_Handler,
		},
		{
			MethodName: "DeleteChatRecord",
			Handler:    _ChatRpc_DeleteChatRecord_Handler,
		},
		{
			MethodName: "DeleteChatRecordList",
			Handler:    _ChatRpc_DeleteChatRecordList_Handler,
		},
		{
			MethodName: "FindChatRecord",
			Handler:    _ChatRpc_FindChatRecord_Handler,
		},
		{
			MethodName: "FindChatRecordList",
			Handler:    _ChatRpc_FindChatRecordList_Handler,
		},
		{
			MethodName: "FindChatRecordCount",
			Handler:    _ChatRpc_FindChatRecordCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	UploadRpc_AddUploadRecord_FullMethodName = "/blog.UploadRpc/AddUploadRecord"
)

// UploadRpcClient is the client API for UploadRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadRpcClient interface {
	// 上传文件
	AddUploadRecord(ctx context.Context, in *UploadRecordReq, opts ...grpc.CallOption) (*UploadRecordResp, error)
}

type uploadRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadRpcClient(cc grpc.ClientConnInterface) UploadRpcClient {
	return &uploadRpcClient{cc}
}

func (c *uploadRpcClient) AddUploadRecord(ctx context.Context, in *UploadRecordReq, opts ...grpc.CallOption) (*UploadRecordResp, error) {
	out := new(UploadRecordResp)
	err := c.cc.Invoke(ctx, UploadRpc_AddUploadRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadRpcServer is the server API for UploadRpc service.
// All implementations must embed UnimplementedUploadRpcServer
// for forward compatibility
type UploadRpcServer interface {
	// 上传文件
	AddUploadRecord(context.Context, *UploadRecordReq) (*UploadRecordResp, error)
	mustEmbedUnimplementedUploadRpcServer()
}

// UnimplementedUploadRpcServer must be embedded to have forward compatible implementations.
type UnimplementedUploadRpcServer struct {
}

func (UnimplementedUploadRpcServer) AddUploadRecord(context.Context, *UploadRecordReq) (*UploadRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUploadRecord not implemented")
}
func (UnimplementedUploadRpcServer) mustEmbedUnimplementedUploadRpcServer() {}

// UnsafeUploadRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadRpcServer will
// result in compilation errors.
type UnsafeUploadRpcServer interface {
	mustEmbedUnimplementedUploadRpcServer()
}

func RegisterUploadRpcServer(s grpc.ServiceRegistrar, srv UploadRpcServer) {
	s.RegisterService(&UploadRpc_ServiceDesc, srv)
}

func _UploadRpc_AddUploadRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadRpcServer).AddUploadRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadRpc_AddUploadRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadRpcServer).AddUploadRecord(ctx, req.(*UploadRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UploadRpc_ServiceDesc is the grpc.ServiceDesc for UploadRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.UploadRpc",
	HandlerType: (*UploadRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUploadRecord",
			Handler:    _UploadRpc_AddUploadRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	BlogRpc_GetUserVisitList_FullMethodName = "/blog.BlogRpc/GetUserVisitList"
)

// BlogRpcClient is the client API for BlogRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogRpcClient interface {
	// 上传文件
	GetUserVisitList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*UserVisitPageRsp, error)
}

type blogRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogRpcClient(cc grpc.ClientConnInterface) BlogRpcClient {
	return &blogRpcClient{cc}
}

func (c *blogRpcClient) GetUserVisitList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*UserVisitPageRsp, error) {
	out := new(UserVisitPageRsp)
	err := c.cc.Invoke(ctx, BlogRpc_GetUserVisitList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogRpcServer is the server API for BlogRpc service.
// All implementations must embed UnimplementedBlogRpcServer
// for forward compatibility
type BlogRpcServer interface {
	// 上传文件
	GetUserVisitList(context.Context, *EmptyReq) (*UserVisitPageRsp, error)
	mustEmbedUnimplementedBlogRpcServer()
}

// UnimplementedBlogRpcServer must be embedded to have forward compatible implementations.
type UnimplementedBlogRpcServer struct {
}

func (UnimplementedBlogRpcServer) GetUserVisitList(context.Context, *EmptyReq) (*UserVisitPageRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserVisitList not implemented")
}
func (UnimplementedBlogRpcServer) mustEmbedUnimplementedBlogRpcServer() {}

// UnsafeBlogRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogRpcServer will
// result in compilation errors.
type UnsafeBlogRpcServer interface {
	mustEmbedUnimplementedBlogRpcServer()
}

func RegisterBlogRpcServer(s grpc.ServiceRegistrar, srv BlogRpcServer) {
	s.RegisterService(&BlogRpc_ServiceDesc, srv)
}

func _BlogRpc_GetUserVisitList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogRpcServer).GetUserVisitList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogRpc_GetUserVisitList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogRpcServer).GetUserVisitList(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogRpc_ServiceDesc is the grpc.ServiceDesc for BlogRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.BlogRpc",
	HandlerType: (*BlogRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserVisitList",
			Handler:    _BlogRpc_GetUserVisitList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	ConfigRpc_SaveConfig_FullMethodName = "/blog.ConfigRpc/SaveConfig"
	ConfigRpc_FindConfig_FullMethodName = "/blog.ConfigRpc/FindConfig"
)

// ConfigRpcClient is the client API for ConfigRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigRpcClient interface {
	SaveConfig(ctx context.Context, in *SaveConfigReq, opts ...grpc.CallOption) (*EmptyResp, error)
	FindConfig(ctx context.Context, in *FindConfigReq, opts ...grpc.CallOption) (*FindConfigResp, error)
}

type configRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigRpcClient(cc grpc.ClientConnInterface) ConfigRpcClient {
	return &configRpcClient{cc}
}

func (c *configRpcClient) SaveConfig(ctx context.Context, in *SaveConfigReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, ConfigRpc_SaveConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configRpcClient) FindConfig(ctx context.Context, in *FindConfigReq, opts ...grpc.CallOption) (*FindConfigResp, error) {
	out := new(FindConfigResp)
	err := c.cc.Invoke(ctx, ConfigRpc_FindConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigRpcServer is the server API for ConfigRpc service.
// All implementations must embed UnimplementedConfigRpcServer
// for forward compatibility
type ConfigRpcServer interface {
	SaveConfig(context.Context, *SaveConfigReq) (*EmptyResp, error)
	FindConfig(context.Context, *FindConfigReq) (*FindConfigResp, error)
	mustEmbedUnimplementedConfigRpcServer()
}

// UnimplementedConfigRpcServer must be embedded to have forward compatible implementations.
type UnimplementedConfigRpcServer struct {
}

func (UnimplementedConfigRpcServer) SaveConfig(context.Context, *SaveConfigReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveConfig not implemented")
}
func (UnimplementedConfigRpcServer) FindConfig(context.Context, *FindConfigReq) (*FindConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindConfig not implemented")
}
func (UnimplementedConfigRpcServer) mustEmbedUnimplementedConfigRpcServer() {}

// UnsafeConfigRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigRpcServer will
// result in compilation errors.
type UnsafeConfigRpcServer interface {
	mustEmbedUnimplementedConfigRpcServer()
}

func RegisterConfigRpcServer(s grpc.ServiceRegistrar, srv ConfigRpcServer) {
	s.RegisterService(&ConfigRpc_ServiceDesc, srv)
}

func _ConfigRpc_SaveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigRpcServer).SaveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigRpc_SaveConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigRpcServer).SaveConfig(ctx, req.(*SaveConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigRpc_FindConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigRpcServer).FindConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigRpc_FindConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigRpcServer).FindConfig(ctx, req.(*FindConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigRpc_ServiceDesc is the grpc.ServiceDesc for ConfigRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.ConfigRpc",
	HandlerType: (*ConfigRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveConfig",
			Handler:    _ConfigRpc_SaveConfig_Handler,
		},
		{
			MethodName: "FindConfig",
			Handler:    _ConfigRpc_FindConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}
