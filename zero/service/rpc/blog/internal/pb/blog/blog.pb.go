// 声明 proto 语法版本，固定值

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.19.4
// source: blog.proto

// proto 包名

package blog

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmptyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyReq) Reset() {
	*x = EmptyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyReq) ProtoMessage() {}

func (x *EmptyReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyReq.ProtoReflect.Descriptor instead.
func (*EmptyReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{0}
}

type EmptyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyResp) Reset() {
	*x = EmptyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResp) ProtoMessage() {}

func (x *EmptyResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResp.ProtoReflect.Descriptor instead.
func (*EmptyResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{1}
}

type IdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdReq) Reset() {
	*x = IdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdReq) ProtoMessage() {}

func (x *IdReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdReq.ProtoReflect.Descriptor instead.
func (*IdReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{2}
}

func (x *IdReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *IdsReq) Reset() {
	*x = IdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdsReq) ProtoMessage() {}

func (x *IdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdsReq.ProtoReflect.Descriptor instead.
func (*IdsReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{3}
}

func (x *IdsReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type UserIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserIdReq) Reset() {
	*x = UserIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdReq) ProtoMessage() {}

func (x *UserIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdReq.ProtoReflect.Descriptor instead.
func (*UserIdReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{4}
}

func (x *UserIdReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type PageQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int64    `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Sorts      string   `protobuf:"bytes,3,opt,name=sorts,proto3" json:"sorts,omitempty"`           // 排序
	Conditions string   `protobuf:"bytes,4,opt,name=conditions,proto3" json:"conditions,omitempty"` // 条件
	Args       []string `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`             // 参数
}

func (x *PageQuery) Reset() {
	*x = PageQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageQuery) ProtoMessage() {}

func (x *PageQuery) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageQuery.ProtoReflect.Descriptor instead.
func (*PageQuery) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{5}
}

func (x *PageQuery) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageQuery) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageQuery) GetSorts() string {
	if x != nil {
		return x.Sorts
	}
	return ""
}

func (x *PageQuery) GetConditions() string {
	if x != nil {
		return x.Conditions
	}
	return ""
}

func (x *PageQuery) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type PageLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *PageLimit) Reset() {
	*x = PageLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageLimit) ProtoMessage() {}

func (x *PageLimit) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageLimit.ProtoReflect.Descriptor instead.
func (*PageLimit) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{6}
}

func (x *PageLimit) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageLimit) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type PageSort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Order string `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *PageSort) Reset() {
	*x = PageSort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageSort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageSort) ProtoMessage() {}

func (x *PageSort) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageSort.ProtoReflect.Descriptor instead.
func (*PageSort) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{7}
}

func (x *PageSort) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *PageSort) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type PageCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field    string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`       // 字段
	Value    string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`       // 值
	Logic    string `protobuf:"bytes,3,opt,name=logic,proto3" json:"logic,omitempty"`       // 逻辑 and or
	Operator string `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"` // 操作符 = > < >= <= != like
}

func (x *PageCondition) Reset() {
	*x = PageCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageCondition) ProtoMessage() {}

func (x *PageCondition) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageCondition.ProtoReflect.Descriptor instead.
func (*PageCondition) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{8}
}

func (x *PageCondition) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *PageCondition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PageCondition) GetLogic() string {
	if x != nil {
		return x.Logic
	}
	return ""
}

func (x *PageCondition) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type ListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total    int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListResp) Reset() {
	*x = ListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResp) ProtoMessage() {}

func (x *ListResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResp.ProtoReflect.Descriptor instead.
func (*ListResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{9}
}

func (x *ListResp) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type BatchResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuccessCount int64 `protobuf:"varint,1,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
}

func (x *BatchResp) Reset() {
	*x = BatchResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchResp) ProtoMessage() {}

func (x *BatchResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchResp.ProtoReflect.Descriptor instead.
func (*BatchResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{10}
}

func (x *BatchResp) GetSuccessCount() int64 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

type CountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountResp) Reset() {
	*x = CountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountResp) ProtoMessage() {}

func (x *CountResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountResp.ProtoReflect.Descriptor instead.
func (*CountResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{11}
}

func (x *CountResp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password   string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	VerifyCode string `protobuf:"bytes,3,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{12}
}

func (x *LoginReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginReq) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

type RegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password   string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	VerifyCode string `protobuf:"bytes,3,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
}

func (x *RegisterReq) Reset() {
	*x = RegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReq) ProtoMessage() {}

func (x *RegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReq.ProtoReflect.Descriptor instead.
func (*RegisterReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{13}
}

func (x *RegisterReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RegisterReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RegisterReq) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

type LoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`            // 用户名
	Nickname string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`            // 用户昵称
	Avatar   string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`                // 用户头像
	Info     string `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`                    // 用户信息
	Email    string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`                  // 用户邮箱
}

func (x *LoginResp) Reset() {
	*x = LoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResp) ProtoMessage() {}

func (x *LoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResp.ProtoReflect.Descriptor instead.
func (*LoginResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{14}
}

func (x *LoginResp) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LoginResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *LoginResp) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *LoginResp) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *LoginResp) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type LogoutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
}

func (x *LogoutReq) Reset() {
	*x = LogoutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutReq) ProtoMessage() {}

func (x *LogoutReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutReq.ProtoReflect.Descriptor instead.
func (*LogoutReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{15}
}

func (x *LogoutReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type LogoffReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
}

func (x *LogoffReq) Reset() {
	*x = LogoffReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoffReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoffReq) ProtoMessage() {}

func (x *LogoffReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoffReq.ProtoReflect.Descriptor instead.
func (*LogoffReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{16}
}

func (x *LogoffReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetLogoutAtReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
}

func (x *GetLogoutAtReq) Reset() {
	*x = GetLogoutAtReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogoutAtReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogoutAtReq) ProtoMessage() {}

func (x *GetLogoutAtReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogoutAtReq.ProtoReflect.Descriptor instead.
func (*GetLogoutAtReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{17}
}

func (x *GetLogoutAtReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type LogoutResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	LogoutAt int64 `protobuf:"varint,2,opt,name=logout_at,json=logoutAt,proto3" json:"logout_at,omitempty"`
}

func (x *LogoutResp) Reset() {
	*x = LogoutResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutResp) ProtoMessage() {}

func (x *LogoutResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutResp.ProtoReflect.Descriptor instead.
func (*LogoutResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{18}
}

func (x *LogoutResp) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LogoutResp) GetLogoutAt() int64 {
	if x != nil {
		return x.LogoutAt
	}
	return 0
}

type UserEmailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *UserEmailReq) Reset() {
	*x = UserEmailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEmailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEmailReq) ProtoMessage() {}

func (x *UserEmailReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEmailReq.ProtoReflect.Descriptor instead.
func (*UserEmailReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{19}
}

func (x *UserEmailReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type ResetPasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password   string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	VerifyCode string `protobuf:"bytes,3,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
}

func (x *ResetPasswordReq) Reset() {
	*x = ResetPasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordReq) ProtoMessage() {}

func (x *ResetPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordReq.ProtoReflect.Descriptor instead.
func (*ResetPasswordReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{20}
}

func (x *ResetPasswordReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ResetPasswordReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ResetPasswordReq) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

type BindUserEmailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Email      string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	VerifyCode string `protobuf:"bytes,3,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
}

func (x *BindUserEmailReq) Reset() {
	*x = BindUserEmailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindUserEmailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindUserEmailReq) ProtoMessage() {}

func (x *BindUserEmailReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindUserEmailReq.ProtoReflect.Descriptor instead.
func (*BindUserEmailReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{21}
}

func (x *BindUserEmailReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BindUserEmailReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BindUserEmailReq) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

type OauthLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"` // 平台
	Code     string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`         // 授权码
	State    string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`       // 状态
}

func (x *OauthLoginReq) Reset() {
	*x = OauthLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OauthLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OauthLoginReq) ProtoMessage() {}

func (x *OauthLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OauthLoginReq.ProtoReflect.Descriptor instead.
func (*OauthLoginReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{22}
}

func (x *OauthLoginReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *OauthLoginReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *OauthLoginReq) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type OauthLoginUrlResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` // 授权地址
}

func (x *OauthLoginUrlResp) Reset() {
	*x = OauthLoginUrlResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OauthLoginUrlResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OauthLoginUrlResp) ProtoMessage() {}

func (x *OauthLoginUrlResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OauthLoginUrlResp.ProtoReflect.Descriptor instead.
func (*OauthLoginUrlResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{23}
}

func (x *OauthLoginUrlResp) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type UserInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	Username  string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`            // 用户名
	Nickname  string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`            // 用户昵称
	Avatar    string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`                // 用户头像
	Email     string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`                  // 用户邮箱
	Phone     string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`                  // 用户手机号
	Info      string `protobuf:"bytes,7,opt,name=info,proto3" json:"info,omitempty"`                    // 用户信息
	Status    int64  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	LoginType string `protobuf:"bytes,9,opt,name=login_type,json=loginType,proto3" json:"login_type,omitempty"`
	IpAddress string `protobuf:"bytes,10,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"` // ip host
	IpSource  string `protobuf:"bytes,11,opt,name=ip_source,json=ipSource,proto3" json:"ip_source,omitempty"`    // ip 源
	CreatedAt int64  `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64  `protobuf:"varint,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *UserInfoResp) Reset() {
	*x = UserInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoResp) ProtoMessage() {}

func (x *UserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoResp.ProtoReflect.Descriptor instead.
func (*UserInfoResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{24}
}

func (x *UserInfoResp) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserInfoResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserInfoResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserInfoResp) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserInfoResp) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfoResp) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserInfoResp) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *UserInfoResp) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserInfoResp) GetLoginType() string {
	if x != nil {
		return x.LoginType
	}
	return ""
}

func (x *UserInfoResp) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *UserInfoResp) GetIpSource() string {
	if x != nil {
		return x.IpSource
	}
	return ""
}

func (x *UserInfoResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UserInfoResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type UserDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64            `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	Username  string           `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`            // 用户名
	Nickname  string           `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`            // 用户昵称
	Avatar    string           `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`                // 用户头像
	Email     string           `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`                  // 用户邮箱
	Phone     string           `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`                  // 用户手机号
	Info      string           `protobuf:"bytes,7,opt,name=info,proto3" json:"info,omitempty"`                    // 用户信息
	Status    int64            `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	LoginType string           `protobuf:"bytes,9,opt,name=login_type,json=loginType,proto3" json:"login_type,omitempty"`
	IpAddress string           `protobuf:"bytes,10,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"` // ip host
	IpSource  string           `protobuf:"bytes,11,opt,name=ip_source,json=ipSource,proto3" json:"ip_source,omitempty"`    // ip 源
	CreatedAt int64            `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64            `protobuf:"varint,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	LoginAt   int64            `protobuf:"varint,14,opt,name=login_at,json=loginAt,proto3" json:"login_at,omitempty"`
	LogoutAt  int64            `protobuf:"varint,15,opt,name=logout_at,json=logoutAt,proto3" json:"logout_at,omitempty"`
	Roles     []*UserRoleLabel `protobuf:"bytes,16,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *UserDetails) Reset() {
	*x = UserDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDetails) ProtoMessage() {}

func (x *UserDetails) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDetails.ProtoReflect.Descriptor instead.
func (*UserDetails) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{25}
}

func (x *UserDetails) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserDetails) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserDetails) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserDetails) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserDetails) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserDetails) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserDetails) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *UserDetails) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserDetails) GetLoginType() string {
	if x != nil {
		return x.LoginType
	}
	return ""
}

func (x *UserDetails) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *UserDetails) GetIpSource() string {
	if x != nil {
		return x.IpSource
	}
	return ""
}

func (x *UserDetails) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UserDetails) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *UserDetails) GetLoginAt() int64 {
	if x != nil {
		return x.LoginAt
	}
	return 0
}

func (x *UserDetails) GetLogoutAt() int64 {
	if x != nil {
		return x.LogoutAt
	}
	return 0
}

func (x *UserDetails) GetRoles() []*UserRoleLabel {
	if x != nil {
		return x.Roles
	}
	return nil
}

type UserRoleLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId      int64  `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	RoleName    string `protobuf:"bytes,2,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	RoleComment string `protobuf:"bytes,3,opt,name=role_comment,json=roleComment,proto3" json:"role_comment,omitempty"`
}

func (x *UserRoleLabel) Reset() {
	*x = UserRoleLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRoleLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRoleLabel) ProtoMessage() {}

func (x *UserRoleLabel) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRoleLabel.ProtoReflect.Descriptor instead.
func (*UserRoleLabel) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{26}
}

func (x *UserRoleLabel) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *UserRoleLabel) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *UserRoleLabel) GetRoleComment() string {
	if x != nil {
		return x.RoleComment
	}
	return ""
}

type UserLoginHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LoginType string `protobuf:"bytes,2,opt,name=login_type,json=loginType,proto3" json:"login_type,omitempty"` // 登录类型
	Agent     string `protobuf:"bytes,3,opt,name=agent,proto3" json:"agent,omitempty"`                          // 代理
	IpAddress string `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"` // ip host
	IpSource  string `protobuf:"bytes,5,opt,name=ip_source,json=ipSource,proto3" json:"ip_source,omitempty"`    // ip 源
	LoginTime string `protobuf:"bytes,6,opt,name=login_time,json=loginTime,proto3" json:"login_time,omitempty"` // 创建时间
}

func (x *UserLoginHistory) Reset() {
	*x = UserLoginHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginHistory) ProtoMessage() {}

func (x *UserLoginHistory) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginHistory.ProtoReflect.Descriptor instead.
func (*UserLoginHistory) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{27}
}

func (x *UserLoginHistory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserLoginHistory) GetLoginType() string {
	if x != nil {
		return x.LoginType
	}
	return ""
}

func (x *UserLoginHistory) GetAgent() string {
	if x != nil {
		return x.Agent
	}
	return ""
}

func (x *UserLoginHistory) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *UserLoginHistory) GetIpSource() string {
	if x != nil {
		return x.IpSource
	}
	return ""
}

func (x *UserLoginHistory) GetLoginTime() string {
	if x != nil {
		return x.LoginTime
	}
	return ""
}

type UserRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	Count  int64  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *UserRegion) Reset() {
	*x = UserRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegion) ProtoMessage() {}

func (x *UserRegion) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegion.ProtoReflect.Descriptor instead.
func (*UserRegion) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{28}
}

func (x *UserRegion) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *UserRegion) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type UpdateUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`            // 昵称
	Avatar   string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`                // 头像
	Info     string `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`                    // 用户信息
}

func (x *UpdateUserInfoReq) Reset() {
	*x = UpdateUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoReq) ProtoMessage() {}

func (x *UpdateUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoReq.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateUserInfoReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserInfoReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UpdateUserInfoReq) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UpdateUserInfoReq) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type UpdateUserStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	Status int64 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateUserStatusReq) Reset() {
	*x = UpdateUserStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserStatusReq) ProtoMessage() {}

func (x *UpdateUserStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateUserStatusReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateUserStatusReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserStatusReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type FindUserListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Nickname string `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Email    string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Phone    string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	Status   int64  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *FindUserListReq) Reset() {
	*x = FindUserListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserListReq) ProtoMessage() {}

func (x *FindUserListReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserListReq.ProtoReflect.Descriptor instead.
func (*FindUserListReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{31}
}

func (x *FindUserListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FindUserListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FindUserListReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *FindUserListReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *FindUserListReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *FindUserListReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *FindUserListReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type FindUserListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*UserDetails `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *FindUserListResp) Reset() {
	*x = FindUserListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserListResp) ProtoMessage() {}

func (x *FindUserListResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserListResp.ProtoReflect.Descriptor instead.
func (*FindUserListResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{32}
}

func (x *FindUserListResp) GetList() []*UserDetails {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *FindUserListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type FindLoginHistoryListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	UserId   int64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
}

func (x *FindLoginHistoryListReq) Reset() {
	*x = FindLoginHistoryListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLoginHistoryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLoginHistoryListReq) ProtoMessage() {}

func (x *FindLoginHistoryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLoginHistoryListReq.ProtoReflect.Descriptor instead.
func (*FindLoginHistoryListReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{33}
}

func (x *FindLoginHistoryListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FindLoginHistoryListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FindLoginHistoryListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type FindLoginHistoryListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*UserLoginHistory `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FindLoginHistoryListResp) Reset() {
	*x = FindLoginHistoryListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLoginHistoryListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLoginHistoryListResp) ProtoMessage() {}

func (x *FindLoginHistoryListResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLoginHistoryListResp.ProtoReflect.Descriptor instead.
func (*FindLoginHistoryListResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{34}
}

func (x *FindLoginHistoryListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FindLoginHistoryListResp) GetList() []*UserLoginHistory {
	if x != nil {
		return x.List
	}
	return nil
}

type FindUserRegionListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*UserRegion `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FindUserRegionListResp) Reset() {
	*x = FindUserRegionListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserRegionListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserRegionListResp) ProtoMessage() {}

func (x *FindUserRegionListResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserRegionListResp.ProtoReflect.Descriptor instead.
func (*FindUserRegionListResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{35}
}

func (x *FindUserRegionListResp) GetList() []*UserRegion {
	if x != nil {
		return x.List
	}
	return nil
}

// ************* rbac 权限相关 *************
type Api struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                // 主键id
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                             // api名称
	Path      string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`                             // api路径
	Method    string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`                         // api请求方法
	ParentId  int64  `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`    // 分组id
	Traceable int64  `protobuf:"varint,6,opt,name=traceable,proto3" json:"traceable,omitempty"`                  // 是否追溯操作记录 0需要，1是
	Status    int64  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                        // 状态 1开，2关
	CreatedAt int64  `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt int64  `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
}

func (x *Api) Reset() {
	*x = Api{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Api) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Api) ProtoMessage() {}

func (x *Api) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Api.ProtoReflect.Descriptor instead.
func (*Api) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{36}
}

func (x *Api) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Api) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Api) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Api) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Api) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Api) GetTraceable() int64 {
	if x != nil {
		return x.Traceable
	}
	return 0
}

func (x *Api) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Api) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Api) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type ApiDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                // 主键id
	Name      string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                             // api名称
	Path      string        `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`                             // api路径
	Method    string        `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`                         // api请求方法
	ParentId  int64         `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`    // 分组id
	Traceable int64         `protobuf:"varint,6,opt,name=traceable,proto3" json:"traceable,omitempty"`                  // 是否追溯操作记录 0需要，1是
	Status    int64         `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                        // 状态 1开，2关
	CreatedAt int64         `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt int64         `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
	Children  []*ApiDetails `protobuf:"bytes,10,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *ApiDetails) Reset() {
	*x = ApiDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiDetails) ProtoMessage() {}

func (x *ApiDetails) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiDetails.ProtoReflect.Descriptor instead.
func (*ApiDetails) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{37}
}

func (x *ApiDetails) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ApiDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApiDetails) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ApiDetails) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *ApiDetails) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *ApiDetails) GetTraceable() int64 {
	if x != nil {
		return x.Traceable
	}
	return 0
}

func (x *ApiDetails) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ApiDetails) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ApiDetails) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ApiDetails) GetChildren() []*ApiDetails {
	if x != nil {
		return x.Children
	}
	return nil
}

type FindApiListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ApiDetails `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FindApiListResp) Reset() {
	*x = FindApiListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindApiListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindApiListResp) ProtoMessage() {}

func (x *FindApiListResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindApiListResp.ProtoReflect.Descriptor instead.
func (*FindApiListResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{38}
}

func (x *FindApiListResp) GetList() []*ApiDetails {
	if x != nil {
		return x.List
	}
	return nil
}

type Menu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                 // 主键
	ParentId  int64  `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`     // 父id
	Title     string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                            // 菜单标题
	Path      string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`                              // 路由路径
	Name      string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                              // 路由名称
	Component string `protobuf:"bytes,6,opt,name=component,proto3" json:"component,omitempty"`                    // 路由组件
	Redirect  string `protobuf:"bytes,7,opt,name=redirect,proto3" json:"redirect,omitempty"`                      // 路由重定向
	Type      int64  `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`                             // 菜单类型
	Extra     string `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`                            // 菜单元数据
	CreatedAt int64  `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt int64  `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
}

func (x *Menu) Reset() {
	*x = Menu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Menu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Menu) ProtoMessage() {}

func (x *Menu) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Menu.ProtoReflect.Descriptor instead.
func (*Menu) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{39}
}

func (x *Menu) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Menu) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Menu) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Menu) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Menu) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Menu) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *Menu) GetRedirect() string {
	if x != nil {
		return x.Redirect
	}
	return ""
}

func (x *Menu) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Menu) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *Menu) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Menu) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type MenuDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                 // 主键
	ParentId  int64          `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`     // 父id
	Title     string         `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                            // 菜单标题
	Type      int64          `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`                             // 菜单类型（0代表菜单、1代表iframe、2代表外链、3代表按钮）
	Path      string         `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`                              // 路由地址
	Name      string         `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                              // 路由名字
	Component string         `protobuf:"bytes,7,opt,name=component,proto3" json:"component,omitempty"`                    // Layout组件
	Redirect  string         `protobuf:"bytes,8,opt,name=redirect,proto3" json:"redirect,omitempty"`                      // 路由重定向
	Extra     string         `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`                            // 额外的配置信息
	CreatedAt int64          `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt int64          `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
	Children  []*MenuDetails `protobuf:"bytes,12,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *MenuDetails) Reset() {
	*x = MenuDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuDetails) ProtoMessage() {}

func (x *MenuDetails) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuDetails.ProtoReflect.Descriptor instead.
func (*MenuDetails) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{40}
}

func (x *MenuDetails) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MenuDetails) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *MenuDetails) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MenuDetails) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MenuDetails) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MenuDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MenuDetails) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *MenuDetails) GetRedirect() string {
	if x != nil {
		return x.Redirect
	}
	return ""
}

func (x *MenuDetails) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *MenuDetails) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MenuDetails) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *MenuDetails) GetChildren() []*MenuDetails {
	if x != nil {
		return x.Children
	}
	return nil
}

type FindMenuListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MenuDetails `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FindMenuListResp) Reset() {
	*x = FindMenuListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindMenuListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindMenuListResp) ProtoMessage() {}

func (x *FindMenuListResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindMenuListResp.ProtoReflect.Descriptor instead.
func (*FindMenuListResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{41}
}

func (x *FindMenuListResp) GetList() []*MenuDetails {
	if x != nil {
		return x.List
	}
	return nil
}

type SyncMenuReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Menus []*MenuDetails `protobuf:"bytes,1,rep,name=menus,proto3" json:"menus,omitempty"`
}

func (x *SyncMenuReq) Reset() {
	*x = SyncMenuReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMenuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMenuReq) ProtoMessage() {}

func (x *SyncMenuReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMenuReq.ProtoReflect.Descriptor instead.
func (*SyncMenuReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{42}
}

func (x *SyncMenuReq) GetMenus() []*MenuDetails {
	if x != nil {
		return x.Menus
	}
	return nil
}

type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                     // 主键id
	ParentId    int64  `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`         // 父角色id
	RoleDomain  string `protobuf:"bytes,3,opt,name=role_domain,json=roleDomain,proto3" json:"role_domain,omitempty"`    // 角色域
	RoleName    string `protobuf:"bytes,4,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`          // 角色名
	RoleComment string `protobuf:"bytes,5,opt,name=role_comment,json=roleComment,proto3" json:"role_comment,omitempty"` // 角色备注
	IsDisable   int64  `protobuf:"varint,6,opt,name=is_disable,json=isDisable,proto3" json:"is_disable,omitempty"`      // 是否禁用  0否 1是
	IsDefault   int64  `protobuf:"varint,7,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`      // 是否默认角色 0否 1是
	CreatedAt   int64  `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`      // 创建时间
	UpdatedAt   int64  `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`      // 更新时间
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{43}
}

func (x *Role) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Role) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Role) GetRoleDomain() string {
	if x != nil {
		return x.RoleDomain
	}
	return ""
}

func (x *Role) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *Role) GetRoleComment() string {
	if x != nil {
		return x.RoleComment
	}
	return ""
}

func (x *Role) GetIsDisable() int64 {
	if x != nil {
		return x.IsDisable
	}
	return 0
}

func (x *Role) GetIsDefault() int64 {
	if x != nil {
		return x.IsDefault
	}
	return 0
}

func (x *Role) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Role) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type RoleDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                     // 主键id
	ParentId    int64          `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`         // 父角色id
	RoleDomain  string         `protobuf:"bytes,3,opt,name=role_domain,json=roleDomain,proto3" json:"role_domain,omitempty"`    // 角色域
	RoleName    string         `protobuf:"bytes,4,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`          // 角色名
	RoleComment string         `protobuf:"bytes,5,opt,name=role_comment,json=roleComment,proto3" json:"role_comment,omitempty"` // 角色备注
	IsDisable   int64          `protobuf:"varint,6,opt,name=is_disable,json=isDisable,proto3" json:"is_disable,omitempty"`      // 是否禁用  0否 1是
	IsDefault   int64          `protobuf:"varint,7,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`      // 是否默认角色 0否 1是
	CreatedAt   int64          `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`      // 创建时间
	UpdatedAt   int64          `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`      // 更新时间
	Children    []*RoleDetails `protobuf:"bytes,10,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *RoleDetails) Reset() {
	*x = RoleDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleDetails) ProtoMessage() {}

func (x *RoleDetails) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleDetails.ProtoReflect.Descriptor instead.
func (*RoleDetails) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{44}
}

func (x *RoleDetails) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoleDetails) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *RoleDetails) GetRoleDomain() string {
	if x != nil {
		return x.RoleDomain
	}
	return ""
}

func (x *RoleDetails) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *RoleDetails) GetRoleComment() string {
	if x != nil {
		return x.RoleComment
	}
	return ""
}

func (x *RoleDetails) GetIsDisable() int64 {
	if x != nil {
		return x.IsDisable
	}
	return 0
}

func (x *RoleDetails) GetIsDefault() int64 {
	if x != nil {
		return x.IsDefault
	}
	return 0
}

func (x *RoleDetails) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RoleDetails) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *RoleDetails) GetChildren() []*RoleDetails {
	if x != nil {
		return x.Children
	}
	return nil
}

type FindRoleListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*RoleDetails `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *FindRoleListResp) Reset() {
	*x = FindRoleListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRoleListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRoleListResp) ProtoMessage() {}

func (x *FindRoleListResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRoleListResp.ProtoReflect.Descriptor instead.
func (*FindRoleListResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{45}
}

func (x *FindRoleListResp) GetList() []*RoleDetails {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *FindRoleListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type RoleResourcesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId  int64   `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	ApiIds  []int64 `protobuf:"varint,2,rep,packed,name=api_ids,json=apiIds,proto3" json:"api_ids,omitempty"`
	MenuIds []int64 `protobuf:"varint,3,rep,packed,name=menu_ids,json=menuIds,proto3" json:"menu_ids,omitempty"`
}

func (x *RoleResourcesResp) Reset() {
	*x = RoleResourcesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleResourcesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleResourcesResp) ProtoMessage() {}

func (x *RoleResourcesResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleResourcesResp.ProtoReflect.Descriptor instead.
func (*RoleResourcesResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{46}
}

func (x *RoleResourcesResp) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *RoleResourcesResp) GetApiIds() []int64 {
	if x != nil {
		return x.ApiIds
	}
	return nil
}

func (x *RoleResourcesResp) GetMenuIds() []int64 {
	if x != nil {
		return x.MenuIds
	}
	return nil
}

type UpdateRoleApisReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId int64   `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	ApiIds []int64 `protobuf:"varint,2,rep,packed,name=api_ids,json=apiIds,proto3" json:"api_ids,omitempty"`
}

func (x *UpdateRoleApisReq) Reset() {
	*x = UpdateRoleApisReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoleApisReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoleApisReq) ProtoMessage() {}

func (x *UpdateRoleApisReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoleApisReq.ProtoReflect.Descriptor instead.
func (*UpdateRoleApisReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{47}
}

func (x *UpdateRoleApisReq) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *UpdateRoleApisReq) GetApiIds() []int64 {
	if x != nil {
		return x.ApiIds
	}
	return nil
}

type UpdateRoleMenusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId  int64   `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	MenuIds []int64 `protobuf:"varint,2,rep,packed,name=menu_ids,json=menuIds,proto3" json:"menu_ids,omitempty"`
}

func (x *UpdateRoleMenusReq) Reset() {
	*x = UpdateRoleMenusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoleMenusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoleMenusReq) ProtoMessage() {}

func (x *UpdateRoleMenusReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoleMenusReq.ProtoReflect.Descriptor instead.
func (*UpdateRoleMenusReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateRoleMenusReq) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *UpdateRoleMenusReq) GetMenuIds() []int64 {
	if x != nil {
		return x.MenuIds
	}
	return nil
}

type UpdateUserRoleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	RoleIds []int64 `protobuf:"varint,2,rep,packed,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
}

func (x *UpdateUserRoleReq) Reset() {
	*x = UpdateUserRoleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRoleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRoleReq) ProtoMessage() {}

func (x *UpdateUserRoleReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRoleReq.ProtoReflect.Descriptor instead.
func (*UpdateUserRoleReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{49}
}

func (x *UpdateUserRoleReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserRoleReq) GetRoleIds() []int64 {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

// article结构体
type ArticleNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                       // id
	UserId int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 作者
	// int64 category_id = 3;// 文章分类
	ArticleCover   string `protobuf:"bytes,4,opt,name=article_cover,json=articleCover,proto3" json:"article_cover,omitempty"`       // 文章缩略图
	ArticleTitle   string `protobuf:"bytes,5,opt,name=article_title,json=articleTitle,proto3" json:"article_title,omitempty"`       // 标题
	ArticleContent string `protobuf:"bytes,6,opt,name=article_content,json=articleContent,proto3" json:"article_content,omitempty"` // 内容
	ArticleType    int64  `protobuf:"varint,7,opt,name=article_type,json=articleType,proto3" json:"article_type,omitempty"`         // 文章类型 1原创 2转载 3翻译
	OriginalUrl    string `protobuf:"bytes,8,opt,name=original_url,json=originalUrl,proto3" json:"original_url,omitempty"`          // 原文链接
	// int64 is_top = 9;// 是否置顶 0否 1是
	// int64 is_delete = 10;// 是否删除  0否 1是
	Status int64 `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"` // 状态值 1公开 2私密 3评论可见
	// int64 created_at = 12;// 发表时间
	// int64 updated_at = 13;// 更新时间
	// int64 like_count = 14;// 点赞数
	CategoryName string   `protobuf:"bytes,15,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"` // 分类名
	TagNameList  []string `protobuf:"bytes,16,rep,name=tag_name_list,json=tagNameList,proto3" json:"tag_name_list,omitempty"`  // 标签名
}

func (x *ArticleNew) Reset() {
	*x = ArticleNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleNew) ProtoMessage() {}

func (x *ArticleNew) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleNew.ProtoReflect.Descriptor instead.
func (*ArticleNew) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{50}
}

func (x *ArticleNew) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ArticleNew) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ArticleNew) GetArticleCover() string {
	if x != nil {
		return x.ArticleCover
	}
	return ""
}

func (x *ArticleNew) GetArticleTitle() string {
	if x != nil {
		return x.ArticleTitle
	}
	return ""
}

func (x *ArticleNew) GetArticleContent() string {
	if x != nil {
		return x.ArticleContent
	}
	return ""
}

func (x *ArticleNew) GetArticleType() int64 {
	if x != nil {
		return x.ArticleType
	}
	return 0
}

func (x *ArticleNew) GetOriginalUrl() string {
	if x != nil {
		return x.OriginalUrl
	}
	return ""
}

func (x *ArticleNew) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ArticleNew) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *ArticleNew) GetTagNameList() []string {
	if x != nil {
		return x.TagNameList
	}
	return nil
}

type ArticleDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                              // id
	UserId         int64            `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // 作者
	CategoryId     int64            `protobuf:"varint,3,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`            // 文章分类
	ArticleCover   string           `protobuf:"bytes,4,opt,name=article_cover,json=articleCover,proto3" json:"article_cover,omitempty"`       // 文章缩略图
	ArticleTitle   string           `protobuf:"bytes,5,opt,name=article_title,json=articleTitle,proto3" json:"article_title,omitempty"`       // 标题
	ArticleContent string           `protobuf:"bytes,6,opt,name=article_content,json=articleContent,proto3" json:"article_content,omitempty"` // 内容
	ArticleType    int64            `protobuf:"varint,7,opt,name=article_type,json=articleType,proto3" json:"article_type,omitempty"`         // 文章类型 1原创 2转载 3翻译
	OriginalUrl    string           `protobuf:"bytes,8,opt,name=original_url,json=originalUrl,proto3" json:"original_url,omitempty"`          // 原文链接
	IsTop          int64            `protobuf:"varint,9,opt,name=is_top,json=isTop,proto3" json:"is_top,omitempty"`                           // 是否置顶 0否 1是
	IsDelete       int64            `protobuf:"varint,10,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`                 // 是否删除  0否 1是
	Status         int64            `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`                                     // 状态值 1公开 2私密 3评论可见
	CreatedAt      int64            `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`              // 发表时间
	UpdatedAt      int64            `protobuf:"varint,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`              // 更新时间
	LikeCount      int64            `protobuf:"varint,14,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`              // 点赞数
	Category       *ArticleCategory `protobuf:"bytes,15,opt,name=category,proto3" json:"category,omitempty"`                                  // 分类
	TagList        []*ArticleTag    `protobuf:"bytes,16,rep,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`                     // 标签
}

func (x *ArticleDetails) Reset() {
	*x = ArticleDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleDetails) ProtoMessage() {}

func (x *ArticleDetails) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleDetails.ProtoReflect.Descriptor instead.
func (*ArticleDetails) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{51}
}

func (x *ArticleDetails) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ArticleDetails) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ArticleDetails) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *ArticleDetails) GetArticleCover() string {
	if x != nil {
		return x.ArticleCover
	}
	return ""
}

func (x *ArticleDetails) GetArticleTitle() string {
	if x != nil {
		return x.ArticleTitle
	}
	return ""
}

func (x *ArticleDetails) GetArticleContent() string {
	if x != nil {
		return x.ArticleContent
	}
	return ""
}

func (x *ArticleDetails) GetArticleType() int64 {
	if x != nil {
		return x.ArticleType
	}
	return 0
}

func (x *ArticleDetails) GetOriginalUrl() string {
	if x != nil {
		return x.OriginalUrl
	}
	return ""
}

func (x *ArticleDetails) GetIsTop() int64 {
	if x != nil {
		return x.IsTop
	}
	return 0
}

func (x *ArticleDetails) GetIsDelete() int64 {
	if x != nil {
		return x.IsDelete
	}
	return 0
}

func (x *ArticleDetails) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ArticleDetails) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ArticleDetails) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ArticleDetails) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *ArticleDetails) GetCategory() *ArticleCategory {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *ArticleDetails) GetTagList() []*ArticleTag {
	if x != nil {
		return x.TagList
	}
	return nil
}

type ArticleCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                        // id
	CategoryName string `protobuf:"bytes,2,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"` // 分类名
}

func (x *ArticleCategory) Reset() {
	*x = ArticleCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleCategory) ProtoMessage() {}

func (x *ArticleCategory) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleCategory.ProtoReflect.Descriptor instead.
func (*ArticleCategory) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{52}
}

func (x *ArticleCategory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ArticleCategory) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

type ArticleTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                         // id
	TagName string `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"` // 标签名
}

func (x *ArticleTag) Reset() {
	*x = ArticleTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleTag) ProtoMessage() {}

func (x *ArticleTag) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleTag.ProtoReflect.Descriptor instead.
func (*ArticleTag) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{53}
}

func (x *ArticleTag) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ArticleTag) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type RecycleArticleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId int64 `protobuf:"varint,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	IsDelete  int64 `protobuf:"varint,2,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"` // 是否删除  0否 1是
}

func (x *RecycleArticleReq) Reset() {
	*x = RecycleArticleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecycleArticleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecycleArticleReq) ProtoMessage() {}

func (x *RecycleArticleReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecycleArticleReq.ProtoReflect.Descriptor instead.
func (*RecycleArticleReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{54}
}

func (x *RecycleArticleReq) GetArticleId() int64 {
	if x != nil {
		return x.ArticleId
	}
	return 0
}

func (x *RecycleArticleReq) GetIsDelete() int64 {
	if x != nil {
		return x.IsDelete
	}
	return 0
}

type TopArticleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId int64 `protobuf:"varint,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	IsTop     int64 `protobuf:"varint,2,opt,name=is_top,json=isTop,proto3" json:"is_top,omitempty"` // 是否置顶 0否 1是
}

func (x *TopArticleReq) Reset() {
	*x = TopArticleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopArticleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopArticleReq) ProtoMessage() {}

func (x *TopArticleReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopArticleReq.ProtoReflect.Descriptor instead.
func (*TopArticleReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{55}
}

func (x *TopArticleReq) GetArticleId() int64 {
	if x != nil {
		return x.ArticleId
	}
	return 0
}

func (x *TopArticleReq) GetIsTop() int64 {
	if x != nil {
		return x.IsTop
	}
	return 0
}

type FindArticleListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ArticleDetails `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FindArticleListResp) Reset() {
	*x = FindArticleListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindArticleListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindArticleListResp) ProtoMessage() {}

func (x *FindArticleListResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindArticleListResp.ProtoReflect.Descriptor instead.
func (*FindArticleListResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{56}
}

func (x *FindArticleListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FindArticleListResp) GetList() []*ArticleDetails {
	if x != nil {
		return x.List
	}
	return nil
}

type FindArticleListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int64    `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Sorts      string   `protobuf:"bytes,3,opt,name=sorts,proto3" json:"sorts,omitempty"`           // 排序
	Conditions string   `protobuf:"bytes,4,opt,name=conditions,proto3" json:"conditions,omitempty"` // 条件
	Args       []string `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`             // 参数
}

func (x *FindArticleListReq) Reset() {
	*x = FindArticleListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindArticleListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindArticleListReq) ProtoMessage() {}

func (x *FindArticleListReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindArticleListReq.ProtoReflect.Descriptor instead.
func (*FindArticleListReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{57}
}

func (x *FindArticleListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FindArticleListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FindArticleListReq) GetSorts() string {
	if x != nil {
		return x.Sorts
	}
	return ""
}

func (x *FindArticleListReq) GetConditions() string {
	if x != nil {
		return x.Conditions
	}
	return ""
}

func (x *FindArticleListReq) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type FindArticlesByTagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagName string `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"` // 标签名
}

func (x *FindArticlesByTagReq) Reset() {
	*x = FindArticlesByTagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindArticlesByTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindArticlesByTagReq) ProtoMessage() {}

func (x *FindArticlesByTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindArticlesByTagReq.ProtoReflect.Descriptor instead.
func (*FindArticlesByTagReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{58}
}

func (x *FindArticlesByTagReq) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type FindArticlesByCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryName string `protobuf:"bytes,2,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"` // 分类名
}

func (x *FindArticlesByCategoryReq) Reset() {
	*x = FindArticlesByCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindArticlesByCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindArticlesByCategoryReq) ProtoMessage() {}

func (x *FindArticlesByCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindArticlesByCategoryReq.ProtoReflect.Descriptor instead.
func (*FindArticlesByCategoryReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{59}
}

func (x *FindArticlesByCategoryReq) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

type FindLikeArticleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LikeArticleList []int64 `protobuf:"varint,1,rep,packed,name=like_article_list,json=likeArticleList,proto3" json:"like_article_list,omitempty"`
}

func (x *FindLikeArticleResp) Reset() {
	*x = FindLikeArticleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLikeArticleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLikeArticleResp) ProtoMessage() {}

func (x *FindLikeArticleResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLikeArticleResp.ProtoReflect.Descriptor instead.
func (*FindLikeArticleResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{60}
}

func (x *FindLikeArticleResp) GetLikeArticleList() []int64 {
	if x != nil {
		return x.LikeArticleList
	}
	return nil
}

type CategoryNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                        // id
	CategoryName string `protobuf:"bytes,2,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"` // 分类名
}

func (x *CategoryNew) Reset() {
	*x = CategoryNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryNew) ProtoMessage() {}

func (x *CategoryNew) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryNew.ProtoReflect.Descriptor instead.
func (*CategoryNew) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{61}
}

func (x *CategoryNew) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryNew) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

type CategoryDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         // id
	CategoryName string `protobuf:"bytes,2,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`  // 分类名
	CreatedAt    int64  `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`          // 创建时间
	UpdatedAt    int64  `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`          // 更新时间
	ArticleCount int64  `protobuf:"varint,5,opt,name=article_count,json=articleCount,proto3" json:"article_count,omitempty"` // 文章数量
}

func (x *CategoryDetails) Reset() {
	*x = CategoryDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryDetails) ProtoMessage() {}

func (x *CategoryDetails) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryDetails.ProtoReflect.Descriptor instead.
func (*CategoryDetails) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{62}
}

func (x *CategoryDetails) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryDetails) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *CategoryDetails) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CategoryDetails) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *CategoryDetails) GetArticleCount() int64 {
	if x != nil {
		return x.ArticleCount
	}
	return 0
}

type FindCategoryListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize     int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Sorts        string `protobuf:"bytes,3,opt,name=sorts,proto3" json:"sorts,omitempty"` // 排序
	CategoryName string `protobuf:"bytes,4,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`
}

func (x *FindCategoryListReq) Reset() {
	*x = FindCategoryListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCategoryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCategoryListReq) ProtoMessage() {}

func (x *FindCategoryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCategoryListReq.ProtoReflect.Descriptor instead.
func (*FindCategoryListReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{63}
}

func (x *FindCategoryListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FindCategoryListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FindCategoryListReq) GetSorts() string {
	if x != nil {
		return x.Sorts
	}
	return ""
}

func (x *FindCategoryListReq) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

type FindCategoryListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*CategoryDetails `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FindCategoryListResp) Reset() {
	*x = FindCategoryListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCategoryListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCategoryListResp) ProtoMessage() {}

func (x *FindCategoryListResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCategoryListResp.ProtoReflect.Descriptor instead.
func (*FindCategoryListResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{64}
}

func (x *FindCategoryListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FindCategoryListResp) GetList() []*CategoryDetails {
	if x != nil {
		return x.List
	}
	return nil
}

type TagNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                         // id
	TagName string `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"` // 标签名
}

func (x *TagNew) Reset() {
	*x = TagNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagNew) ProtoMessage() {}

func (x *TagNew) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagNew.ProtoReflect.Descriptor instead.
func (*TagNew) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{65}
}

func (x *TagNew) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TagNew) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type TagDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         // id
	TagName      string `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`                 // 标签名
	CreatedAt    int64  `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`          // 创建时间
	UpdatedAt    int64  `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`          // 更新时间
	ArticleCount int64  `protobuf:"varint,5,opt,name=article_count,json=articleCount,proto3" json:"article_count,omitempty"` // 文章数量
}

func (x *TagDetails) Reset() {
	*x = TagDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagDetails) ProtoMessage() {}

func (x *TagDetails) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagDetails.ProtoReflect.Descriptor instead.
func (*TagDetails) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{66}
}

func (x *TagDetails) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TagDetails) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *TagDetails) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TagDetails) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TagDetails) GetArticleCount() int64 {
	if x != nil {
		return x.ArticleCount
	}
	return 0
}

type FindTagListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Sorts    string `protobuf:"bytes,3,opt,name=sorts,proto3" json:"sorts,omitempty"`                    // 排序
	TagName  string `protobuf:"bytes,4,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"` // 标签名
}

func (x *FindTagListReq) Reset() {
	*x = FindTagListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTagListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTagListReq) ProtoMessage() {}

func (x *FindTagListReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTagListReq.ProtoReflect.Descriptor instead.
func (*FindTagListReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{67}
}

func (x *FindTagListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FindTagListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FindTagListReq) GetSorts() string {
	if x != nil {
		return x.Sorts
	}
	return ""
}

func (x *FindTagListReq) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type FindTagListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*TagDetails `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FindTagListResp) Reset() {
	*x = FindTagListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTagListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTagListResp) ProtoMessage() {}

func (x *FindTagListResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTagListResp.ProtoReflect.Descriptor instead.
func (*FindTagListResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{68}
}

func (x *FindTagListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FindTagListResp) GetList() []*TagDetails {
	if x != nil {
		return x.List
	}
	return nil
}

type FindTagArticleCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId int64 `protobuf:"varint,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
}

func (x *FindTagArticleCountReq) Reset() {
	*x = FindTagArticleCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTagArticleCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTagArticleCountReq) ProtoMessage() {}

func (x *FindTagArticleCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTagArticleCountReq.ProtoReflect.Descriptor instead.
func (*FindTagArticleCountReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{69}
}

func (x *FindTagArticleCountReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

type FindTagByNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagName string `protobuf:"bytes,1,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
}

func (x *FindTagByNameReq) Reset() {
	*x = FindTagByNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTagByNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTagByNameReq) ProtoMessage() {}

func (x *FindTagByNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTagByNameReq.ProtoReflect.Descriptor instead.
func (*FindTagByNameReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{70}
}

func (x *FindTagByNameReq) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type TagMapResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagMapList map[int64]*FindTagListResp `protobuf:"bytes,1,rep,name=tag_map_list,json=tagMapList,proto3" json:"tag_map_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TagMapResp) Reset() {
	*x = TagMapResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagMapResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagMapResp) ProtoMessage() {}

func (x *TagMapResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagMapResp.ProtoReflect.Descriptor instead.
func (*TagMapResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{71}
}

func (x *TagMapResp) GetTagMapList() map[int64]*FindTagListResp {
	if x != nil {
		return x.TagMapList
	}
	return nil
}

type AnalysisArticleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleCount  int64 `protobuf:"varint,1,opt,name=article_count,json=articleCount,proto3" json:"article_count,omitempty"`
	CategoryCount int64 `protobuf:"varint,2,opt,name=category_count,json=categoryCount,proto3" json:"category_count,omitempty"`
	TagCount      int64 `protobuf:"varint,3,opt,name=tag_count,json=tagCount,proto3" json:"tag_count,omitempty"`
}

func (x *AnalysisArticleResp) Reset() {
	*x = AnalysisArticleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisArticleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisArticleResp) ProtoMessage() {}

func (x *AnalysisArticleResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisArticleResp.ProtoReflect.Descriptor instead.
func (*AnalysisArticleResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{72}
}

func (x *AnalysisArticleResp) GetArticleCount() int64 {
	if x != nil {
		return x.ArticleCount
	}
	return 0
}

func (x *AnalysisArticleResp) GetCategoryCount() int64 {
	if x != nil {
		return x.CategoryCount
	}
	return 0
}

func (x *AnalysisArticleResp) GetTagCount() int64 {
	if x != nil {
		return x.TagCount
	}
	return 0
}

// ************* blog 消息管理 *************
type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                              // 主键
	TopicId        int64            `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`                     // 主题id
	ParentId       int64            `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`                  // 父评论id
	SessionId      int64            `protobuf:"varint,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`               // 会话id
	UserId         int64            `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // 评论用户id
	ReplyUserId    int64            `protobuf:"varint,6,opt,name=reply_user_id,json=replyUserId,proto3" json:"reply_user_id,omitempty"`       // 评论回复用户id
	CommentContent string           `protobuf:"bytes,7,opt,name=comment_content,json=commentContent,proto3" json:"comment_content,omitempty"` // 评论内容
	Type           int64            `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`                                          // 评论类型 1.文章 2.友链 3.说说
	Status         int64            `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                                      // 状态 0.正常 1.已编辑 2.已删除
	IsReview       int64            `protobuf:"varint,10,opt,name=is_review,json=isReview,proto3" json:"is_review,omitempty"`                 // 是否审核
	CreatedAt      int64            `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`              // 评论时间
	UpdatedAt      int64            `protobuf:"varint,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`              // 更新时间
	LikeCount      int64            `protobuf:"varint,13,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`              // 点赞数
	User           *CommentUserInfo `protobuf:"bytes,14,opt,name=user,proto3" json:"user,omitempty"`
	ReplyUser      *CommentUserInfo `protobuf:"bytes,15,opt,name=reply_user,json=replyUser,proto3" json:"reply_user,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{73}
}

func (x *Comment) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Comment) GetTopicId() int64 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *Comment) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Comment) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *Comment) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Comment) GetReplyUserId() int64 {
	if x != nil {
		return x.ReplyUserId
	}
	return 0
}

func (x *Comment) GetCommentContent() string {
	if x != nil {
		return x.CommentContent
	}
	return ""
}

func (x *Comment) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Comment) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Comment) GetIsReview() int64 {
	if x != nil {
		return x.IsReview
	}
	return 0
}

func (x *Comment) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Comment) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Comment) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *Comment) GetUser() *CommentUserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Comment) GetReplyUser() *CommentUserInfo {
	if x != nil {
		return x.ReplyUser
	}
	return nil
}

type CommentUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`            // 用户名
	Nickname string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`            // 用户昵称
	Avatar   string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`                // 用户头像
	Info     string `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`                    // 用户信息
}

func (x *CommentUserInfo) Reset() {
	*x = CommentUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentUserInfo) ProtoMessage() {}

func (x *CommentUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentUserInfo.ProtoReflect.Descriptor instead.
func (*CommentUserInfo) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{74}
}

func (x *CommentUserInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CommentUserInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CommentUserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *CommentUserInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *CommentUserInfo) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type FindCommentListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Comment `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FindCommentListResp) Reset() {
	*x = FindCommentListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCommentListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCommentListResp) ProtoMessage() {}

func (x *FindCommentListResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCommentListResp.ProtoReflect.Descriptor instead.
func (*FindCommentListResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{75}
}

func (x *FindCommentListResp) GetList() []*Comment {
	if x != nil {
		return x.List
	}
	return nil
}

type FindLikeCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LikeCommentList []int64 `protobuf:"varint,1,rep,packed,name=like_comment_list,json=likeCommentList,proto3" json:"like_comment_list,omitempty"`
}

func (x *FindLikeCommentResp) Reset() {
	*x = FindLikeCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLikeCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLikeCommentResp) ProtoMessage() {}

func (x *FindLikeCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLikeCommentResp.ProtoReflect.Descriptor instead.
func (*FindLikeCommentResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{76}
}

func (x *FindLikeCommentResp) GetLikeCommentList() []int64 {
	if x != nil {
		return x.LikeCommentList
	}
	return nil
}

type Remark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                              // 主键id
	Nickname       string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`                                   // 昵称
	Avatar         string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`                                       // 头像
	MessageContent string `protobuf:"bytes,4,opt,name=message_content,json=messageContent,proto3" json:"message_content,omitempty"` // 留言内容
	IpAddress      string `protobuf:"bytes,5,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`                // 用户ip
	IpSource       string `protobuf:"bytes,6,opt,name=ip_source,json=ipSource,proto3" json:"ip_source,omitempty"`                   // 用户地址
	Time           int64  `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`                                          // 弹幕速度
	IsReview       int64  `protobuf:"varint,8,opt,name=is_review,json=isReview,proto3" json:"is_review,omitempty"`                  // 是否审核
	CreatedAt      int64  `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`               // 发布时间
	UpdatedAt      int64  `protobuf:"varint,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`              // 更新时间
}

func (x *Remark) Reset() {
	*x = Remark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Remark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Remark) ProtoMessage() {}

func (x *Remark) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Remark.ProtoReflect.Descriptor instead.
func (*Remark) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{77}
}

func (x *Remark) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Remark) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Remark) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Remark) GetMessageContent() string {
	if x != nil {
		return x.MessageContent
	}
	return ""
}

func (x *Remark) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Remark) GetIpSource() string {
	if x != nil {
		return x.IpSource
	}
	return ""
}

func (x *Remark) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Remark) GetIsReview() int64 {
	if x != nil {
		return x.IsReview
	}
	return 0
}

func (x *Remark) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Remark) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type FindRemarkListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Remark `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FindRemarkListResp) Reset() {
	*x = FindRemarkListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRemarkListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRemarkListResp) ProtoMessage() {}

func (x *FindRemarkListResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRemarkListResp.ProtoReflect.Descriptor instead.
func (*FindRemarkListResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{78}
}

func (x *FindRemarkListResp) GetList() []*Remark {
	if x != nil {
		return x.List
	}
	return nil
}

type Photo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                // 主键
	AlbumId   int64  `protobuf:"varint,2,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`       // 相册id
	PhotoName string `protobuf:"bytes,3,opt,name=photo_name,json=photoName,proto3" json:"photo_name,omitempty"`  // 照片名
	PhotoDesc string `protobuf:"bytes,4,opt,name=photo_desc,json=photoDesc,proto3" json:"photo_desc,omitempty"`  // 照片描述
	PhotoSrc  string `protobuf:"bytes,5,opt,name=photo_src,json=photoSrc,proto3" json:"photo_src,omitempty"`     // 照片地址
	IsDelete  int64  `protobuf:"varint,6,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`    // 是否删除
	CreatedAt int64  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt int64  `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
}

func (x *Photo) Reset() {
	*x = Photo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Photo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Photo) ProtoMessage() {}

func (x *Photo) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Photo.ProtoReflect.Descriptor instead.
func (*Photo) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{79}
}

func (x *Photo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Photo) GetAlbumId() int64 {
	if x != nil {
		return x.AlbumId
	}
	return 0
}

func (x *Photo) GetPhotoName() string {
	if x != nil {
		return x.PhotoName
	}
	return ""
}

func (x *Photo) GetPhotoDesc() string {
	if x != nil {
		return x.PhotoDesc
	}
	return ""
}

func (x *Photo) GetPhotoSrc() string {
	if x != nil {
		return x.PhotoSrc
	}
	return ""
}

func (x *Photo) GetIsDelete() int64 {
	if x != nil {
		return x.IsDelete
	}
	return 0
}

func (x *Photo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Photo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type FindPhotoListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Photo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FindPhotoListResp) Reset() {
	*x = FindPhotoListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPhotoListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPhotoListResp) ProtoMessage() {}

func (x *FindPhotoListResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPhotoListResp.ProtoReflect.Descriptor instead.
func (*FindPhotoListResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{80}
}

func (x *FindPhotoListResp) GetList() []*Photo {
	if x != nil {
		return x.List
	}
	return nil
}

type PhotoAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                  // 主键
	AlbumName  string `protobuf:"bytes,2,opt,name=album_name,json=albumName,proto3" json:"album_name,omitempty"`    // 相册名
	AlbumDesc  string `protobuf:"bytes,3,opt,name=album_desc,json=albumDesc,proto3" json:"album_desc,omitempty"`    // 相册描述
	AlbumCover string `protobuf:"bytes,4,opt,name=album_cover,json=albumCover,proto3" json:"album_cover,omitempty"` // 相册封面
	IsDelete   int64  `protobuf:"varint,5,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`      // 是否删除
	Status     int64  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                          // 状态值 1公开 2私密
	CreatedAt  int64  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`   // 创建时间
	UpdatedAt  int64  `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`   // 更新时间
}

func (x *PhotoAlbum) Reset() {
	*x = PhotoAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoAlbum) ProtoMessage() {}

func (x *PhotoAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoAlbum.ProtoReflect.Descriptor instead.
func (*PhotoAlbum) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{81}
}

func (x *PhotoAlbum) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PhotoAlbum) GetAlbumName() string {
	if x != nil {
		return x.AlbumName
	}
	return ""
}

func (x *PhotoAlbum) GetAlbumDesc() string {
	if x != nil {
		return x.AlbumDesc
	}
	return ""
}

func (x *PhotoAlbum) GetAlbumCover() string {
	if x != nil {
		return x.AlbumCover
	}
	return ""
}

func (x *PhotoAlbum) GetIsDelete() int64 {
	if x != nil {
		return x.IsDelete
	}
	return 0
}

func (x *PhotoAlbum) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PhotoAlbum) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PhotoAlbum) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type FindPhotoAlbumListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*PhotoAlbum `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FindPhotoAlbumListResp) Reset() {
	*x = FindPhotoAlbumListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPhotoAlbumListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPhotoAlbumListResp) ProtoMessage() {}

func (x *FindPhotoAlbumListResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPhotoAlbumListResp.ProtoReflect.Descriptor instead.
func (*FindPhotoAlbumListResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{82}
}

func (x *FindPhotoAlbumListResp) GetList() []*PhotoAlbum {
	if x != nil {
		return x.List
	}
	return nil
}

// ************* blog 页面管理 *************
type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                // 页面id
	PageName  string `protobuf:"bytes,2,opt,name=page_name,json=pageName,proto3" json:"page_name,omitempty"`     // 页面名
	PageLabel string `protobuf:"bytes,3,opt,name=page_label,json=pageLabel,proto3" json:"page_label,omitempty"`  // 页面标签
	PageCover string `protobuf:"bytes,4,opt,name=page_cover,json=pageCover,proto3" json:"page_cover,omitempty"`  // 页面封面
	CreatedAt int64  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt int64  `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{83}
}

func (x *Page) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Page) GetPageName() string {
	if x != nil {
		return x.PageName
	}
	return ""
}

func (x *Page) GetPageLabel() string {
	if x != nil {
		return x.PageLabel
	}
	return ""
}

func (x *Page) GetPageCover() string {
	if x != nil {
		return x.PageCover
	}
	return ""
}

func (x *Page) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Page) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type FindPageListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Page `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FindPageListResp) Reset() {
	*x = FindPageListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPageListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPageListResp) ProtoMessage() {}

func (x *FindPageListResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPageListResp.ProtoReflect.Descriptor instead.
func (*FindPageListResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{84}
}

func (x *FindPageListResp) GetList() []*Page {
	if x != nil {
		return x.List
	}
	return nil
}

// ************* blog 友链管理 *************
type FriendLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                     // id
	LinkName    string `protobuf:"bytes,2,opt,name=link_name,json=linkName,proto3" json:"link_name,omitempty"`          // 链接名
	LinkAvatar  string `protobuf:"bytes,3,opt,name=link_avatar,json=linkAvatar,proto3" json:"link_avatar,omitempty"`    // 链接头像
	LinkAddress string `protobuf:"bytes,4,opt,name=link_address,json=linkAddress,proto3" json:"link_address,omitempty"` // 链接地址
	LinkIntro   string `protobuf:"bytes,5,opt,name=link_intro,json=linkIntro,proto3" json:"link_intro,omitempty"`       // 链接介绍
	CreatedAt   int64  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`      // 创建时间
	UpdatedAt   int64  `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`      // 更新时间
}

func (x *FriendLink) Reset() {
	*x = FriendLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendLink) ProtoMessage() {}

func (x *FriendLink) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendLink.ProtoReflect.Descriptor instead.
func (*FriendLink) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{85}
}

func (x *FriendLink) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FriendLink) GetLinkName() string {
	if x != nil {
		return x.LinkName
	}
	return ""
}

func (x *FriendLink) GetLinkAvatar() string {
	if x != nil {
		return x.LinkAvatar
	}
	return ""
}

func (x *FriendLink) GetLinkAddress() string {
	if x != nil {
		return x.LinkAddress
	}
	return ""
}

func (x *FriendLink) GetLinkIntro() string {
	if x != nil {
		return x.LinkIntro
	}
	return ""
}

func (x *FriendLink) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FriendLink) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type FindFriendLinkListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*FriendLink `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FindFriendLinkListResp) Reset() {
	*x = FindFriendLinkListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFriendLinkListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFriendLinkListResp) ProtoMessage() {}

func (x *FindFriendLinkListResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFriendLinkListResp.ProtoReflect.Descriptor instead.
func (*FindFriendLinkListResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{86}
}

func (x *FindFriendLinkListResp) GetList() []*FriendLink {
	if x != nil {
		return x.List
	}
	return nil
}

// ************* blog 说说管理 *************
type Talk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                // 说说id
	UserId    int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // 用户id
	Content   string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                       // 说说内容
	Images    string `protobuf:"bytes,4,opt,name=images,proto3" json:"images,omitempty"`                         // 图片
	IsTop     int64  `protobuf:"varint,5,opt,name=is_top,json=isTop,proto3" json:"is_top,omitempty"`             // 是否置顶
	Status    int64  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                        // 状态 1.公开 2.私密
	CreatedAt int64  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt int64  `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
	LikeCount int64  `protobuf:"varint,9,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"` // 点赞量
}

func (x *Talk) Reset() {
	*x = Talk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Talk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Talk) ProtoMessage() {}

func (x *Talk) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Talk.ProtoReflect.Descriptor instead.
func (*Talk) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{87}
}

func (x *Talk) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Talk) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Talk) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Talk) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *Talk) GetIsTop() int64 {
	if x != nil {
		return x.IsTop
	}
	return 0
}

func (x *Talk) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Talk) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Talk) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Talk) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

type TalkDetailsDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId       int64    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                    // 用户ID
	Nickname     string   `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`                               // 用户昵称
	Avatar       string   `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`                                   // 用户头像
	Content      string   `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                                 // 评论内容
	ImgList      []string `protobuf:"bytes,6,rep,name=img_list,json=imgList,proto3" json:"img_list,omitempty"`                  // 图片URL列表
	IsTop        int64    `protobuf:"varint,7,opt,name=is_top,json=isTop,proto3" json:"is_top,omitempty"`                       // 是否置顶
	Status       int64    `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`                                  // 状态
	LikeCount    int64    `protobuf:"varint,9,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`           // 点赞量
	CommentCount int64    `protobuf:"varint,10,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"` // 评论量
	CreatedAt    int64    `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`          // 创建时间
	UpdatedAt    int64    `protobuf:"varint,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`          // 更新时间
}

func (x *TalkDetailsDTO) Reset() {
	*x = TalkDetailsDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkDetailsDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkDetailsDTO) ProtoMessage() {}

func (x *TalkDetailsDTO) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkDetailsDTO.ProtoReflect.Descriptor instead.
func (*TalkDetailsDTO) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{88}
}

func (x *TalkDetailsDTO) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TalkDetailsDTO) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TalkDetailsDTO) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *TalkDetailsDTO) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *TalkDetailsDTO) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TalkDetailsDTO) GetImgList() []string {
	if x != nil {
		return x.ImgList
	}
	return nil
}

func (x *TalkDetailsDTO) GetIsTop() int64 {
	if x != nil {
		return x.IsTop
	}
	return 0
}

func (x *TalkDetailsDTO) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TalkDetailsDTO) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *TalkDetailsDTO) GetCommentCount() int64 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *TalkDetailsDTO) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TalkDetailsDTO) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type FindTalkListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Talk `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FindTalkListResp) Reset() {
	*x = FindTalkListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTalkListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTalkListResp) ProtoMessage() {}

func (x *FindTalkListResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTalkListResp.ProtoReflect.Descriptor instead.
func (*FindTalkListResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{89}
}

func (x *FindTalkListResp) GetList() []*Talk {
	if x != nil {
		return x.List
	}
	return nil
}

type FindLikeTalkResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LikeTalkList []int64 `protobuf:"varint,1,rep,packed,name=like_talk_list,json=likeTalkList,proto3" json:"like_talk_list,omitempty"`
}

func (x *FindLikeTalkResp) Reset() {
	*x = FindLikeTalkResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLikeTalkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLikeTalkResp) ProtoMessage() {}

func (x *FindLikeTalkResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLikeTalkResp.ProtoReflect.Descriptor instead.
func (*FindLikeTalkResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{90}
}

func (x *FindLikeTalkResp) GetLikeTalkList() []int64 {
	if x != nil {
		return x.LikeTalkList
	}
	return nil
}

// ************* blog 日志管理 *************
type OperationLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                // 主键id
	UserId         int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                          // 用户id
	Nickname       string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`                                     // 用户昵称
	IpAddress      string `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`                  // 操作ip
	IpSource       string `protobuf:"bytes,5,opt,name=ip_source,json=ipSource,proto3" json:"ip_source,omitempty"`                     // 操作地址
	OptModule      string `protobuf:"bytes,6,opt,name=opt_module,json=optModule,proto3" json:"opt_module,omitempty"`                  // 操作模块
	OptDesc        string `protobuf:"bytes,7,opt,name=opt_desc,json=optDesc,proto3" json:"opt_desc,omitempty"`                        // 操作描述
	RequestUrl     string `protobuf:"bytes,8,opt,name=request_url,json=requestUrl,proto3" json:"request_url,omitempty"`               // 请求地址
	RequestMethod  string `protobuf:"bytes,9,opt,name=request_method,json=requestMethod,proto3" json:"request_method,omitempty"`      // 请求方式
	RequestHeader  string `protobuf:"bytes,10,opt,name=request_header,json=requestHeader,proto3" json:"request_header,omitempty"`     // 请求头参数
	RequestData    string `protobuf:"bytes,11,opt,name=request_data,json=requestData,proto3" json:"request_data,omitempty"`           // 请求参数
	ResponseData   string `protobuf:"bytes,12,opt,name=response_data,json=responseData,proto3" json:"response_data,omitempty"`        // 返回数据
	ResponseStatus int64  `protobuf:"varint,13,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"` // 响应状态码
	Cost           string `protobuf:"bytes,14,opt,name=cost,proto3" json:"cost,omitempty"`                                            // 耗时（ms）
	CreatedAt      int64  `protobuf:"varint,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                // 创建时间
	UpdatedAt      int64  `protobuf:"varint,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                // 更新时间
}

func (x *OperationLog) Reset() {
	*x = OperationLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationLog) ProtoMessage() {}

func (x *OperationLog) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationLog.ProtoReflect.Descriptor instead.
func (*OperationLog) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{91}
}

func (x *OperationLog) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OperationLog) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OperationLog) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *OperationLog) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *OperationLog) GetIpSource() string {
	if x != nil {
		return x.IpSource
	}
	return ""
}

func (x *OperationLog) GetOptModule() string {
	if x != nil {
		return x.OptModule
	}
	return ""
}

func (x *OperationLog) GetOptDesc() string {
	if x != nil {
		return x.OptDesc
	}
	return ""
}

func (x *OperationLog) GetRequestUrl() string {
	if x != nil {
		return x.RequestUrl
	}
	return ""
}

func (x *OperationLog) GetRequestMethod() string {
	if x != nil {
		return x.RequestMethod
	}
	return ""
}

func (x *OperationLog) GetRequestHeader() string {
	if x != nil {
		return x.RequestHeader
	}
	return ""
}

func (x *OperationLog) GetRequestData() string {
	if x != nil {
		return x.RequestData
	}
	return ""
}

func (x *OperationLog) GetResponseData() string {
	if x != nil {
		return x.ResponseData
	}
	return ""
}

func (x *OperationLog) GetResponseStatus() int64 {
	if x != nil {
		return x.ResponseStatus
	}
	return 0
}

func (x *OperationLog) GetCost() string {
	if x != nil {
		return x.Cost
	}
	return ""
}

func (x *OperationLog) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *OperationLog) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type FindOperationLogListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*OperationLog `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FindOperationLogListResp) Reset() {
	*x = FindOperationLogListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindOperationLogListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOperationLogListResp) ProtoMessage() {}

func (x *FindOperationLogListResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOperationLogListResp.ProtoReflect.Descriptor instead.
func (*FindOperationLogListResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{92}
}

func (x *FindOperationLogListResp) GetList() []*OperationLog {
	if x != nil {
		return x.List
	}
	return nil
}

type ChatRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                 // 主键
	UserId    int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`           // 用户id
	Nickname  string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`                      // 昵称
	Avatar    string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`                          // 头像
	Content   string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                        // 聊天内容
	IpAddress string `protobuf:"bytes,6,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`   // ip地址
	IpSource  string `protobuf:"bytes,7,opt,name=ip_source,json=ipSource,proto3" json:"ip_source,omitempty"`      // ip来源
	Type      int64  `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`                             // 类型
	CreatedAt int64  `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`  // 创建时间
	UpdatedAt int64  `protobuf:"varint,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
}

func (x *ChatRecord) Reset() {
	*x = ChatRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRecord) ProtoMessage() {}

func (x *ChatRecord) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRecord.ProtoReflect.Descriptor instead.
func (*ChatRecord) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{93}
}

func (x *ChatRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChatRecord) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChatRecord) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ChatRecord) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *ChatRecord) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ChatRecord) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ChatRecord) GetIpSource() string {
	if x != nil {
		return x.IpSource
	}
	return ""
}

func (x *ChatRecord) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ChatRecord) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ChatRecord) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type FindChatRecordListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ChatRecord `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FindChatRecordListResp) Reset() {
	*x = FindChatRecordListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindChatRecordListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindChatRecordListResp) ProtoMessage() {}

func (x *FindChatRecordListResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindChatRecordListResp.ProtoReflect.Descriptor instead.
func (*FindChatRecordListResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{94}
}

func (x *FindChatRecordListResp) GetList() []*ChatRecord {
	if x != nil {
		return x.List
	}
	return nil
}

type UploadRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                             // id
	UserId   int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       // 用户id
	Label    string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`                        // 标签
	FileName string `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`  // 文件名称
	FileSize int64  `protobuf:"varint,5,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"` // 文件大小
	FileMd5  string `protobuf:"bytes,6,opt,name=file_md5,json=fileMd5,proto3" json:"file_md5,omitempty"`     // 文件md5值
	FileUrl  string `protobuf:"bytes,7,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`     // 上传路径
}

func (x *UploadRecordReq) Reset() {
	*x = UploadRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRecordReq) ProtoMessage() {}

func (x *UploadRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRecordReq.ProtoReflect.Descriptor instead.
func (*UploadRecordReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{95}
}

func (x *UploadRecordReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UploadRecordReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UploadRecordReq) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *UploadRecordReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UploadRecordReq) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *UploadRecordReq) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

func (x *UploadRecordReq) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

type UploadRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                // id
	UserId    int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // 用户id
	Label     string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`                           // 标签
	FileName  string `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`     // 文件名称
	FileSize  int64  `protobuf:"varint,5,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`    // 文件大小
	FileMd5   string `protobuf:"bytes,6,opt,name=file_md5,json=fileMd5,proto3" json:"file_md5,omitempty"`        // 文件md5值
	FileUrl   string `protobuf:"bytes,7,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`        // 上传路径
	CreatedAt int64  `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt int64  `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
}

func (x *UploadRecordResp) Reset() {
	*x = UploadRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRecordResp) ProtoMessage() {}

func (x *UploadRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRecordResp.ProtoReflect.Descriptor instead.
func (*UploadRecordResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{96}
}

func (x *UploadRecordResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UploadRecordResp) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UploadRecordResp) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *UploadRecordResp) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UploadRecordResp) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *UploadRecordResp) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

func (x *UploadRecordResp) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *UploadRecordResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UploadRecordResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type UserVisit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date      string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	ViewCount int64  `protobuf:"varint,2,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
}

func (x *UserVisit) Reset() {
	*x = UserVisit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserVisit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserVisit) ProtoMessage() {}

func (x *UserVisit) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserVisit.ProtoReflect.Descriptor instead.
func (*UserVisit) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{97}
}

func (x *UserVisit) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *UserVisit) GetViewCount() int64 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

type UserVisitPageRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*UserVisit `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *UserVisitPageRsp) Reset() {
	*x = UserVisitPageRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserVisitPageRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserVisitPageRsp) ProtoMessage() {}

func (x *UserVisitPageRsp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserVisitPageRsp.ProtoReflect.Descriptor instead.
func (*UserVisitPageRsp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{98}
}

func (x *UserVisitPageRsp) GetList() []*UserVisit {
	if x != nil {
		return x.List
	}
	return nil
}

// ************* blog 博客相关 *************
type FindConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigKey string `protobuf:"bytes,1,opt,name=config_key,json=configKey,proto3" json:"config_key,omitempty"`
}

func (x *FindConfigReq) Reset() {
	*x = FindConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindConfigReq) ProtoMessage() {}

func (x *FindConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindConfigReq.ProtoReflect.Descriptor instead.
func (*FindConfigReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{99}
}

func (x *FindConfigReq) GetConfigKey() string {
	if x != nil {
		return x.ConfigKey
	}
	return ""
}

type FindConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigValue string `protobuf:"bytes,1,opt,name=config_value,json=configValue,proto3" json:"config_value,omitempty"`
}

func (x *FindConfigResp) Reset() {
	*x = FindConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindConfigResp) ProtoMessage() {}

func (x *FindConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindConfigResp.ProtoReflect.Descriptor instead.
func (*FindConfigResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{100}
}

func (x *FindConfigResp) GetConfigValue() string {
	if x != nil {
		return x.ConfigValue
	}
	return ""
}

type SaveConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigKey   string `protobuf:"bytes,1,opt,name=config_key,json=configKey,proto3" json:"config_key,omitempty"`
	ConfigValue string `protobuf:"bytes,2,opt,name=config_value,json=configValue,proto3" json:"config_value,omitempty"`
}

func (x *SaveConfigReq) Reset() {
	*x = SaveConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveConfigReq) ProtoMessage() {}

func (x *SaveConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveConfigReq.ProtoReflect.Descriptor instead.
func (*SaveConfigReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{101}
}

func (x *SaveConfigReq) GetConfigKey() string {
	if x != nil {
		return x.ConfigKey
	}
	return ""
}

func (x *SaveConfigReq) GetConfigValue() string {
	if x != nil {
		return x.ConfigValue
	}
	return ""
}

var File_blog_proto protoreflect.FileDescriptor

var file_blog_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x62, 0x6c,
	0x6f, 0x67, 0x22, 0x0a, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x22, 0x0b,
	0x0a, 0x09, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x17, 0x0a, 0x05, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x06, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x22, 0x24, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22,
	0x3c, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x36, 0x0a,
	0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x6d, 0x0a, 0x0d, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0x51, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x30, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x21, 0x0a, 0x09, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x63, 0x0a, 0x08,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x66, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x09, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x24, 0x0a, 0x09, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x24, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x6f, 0x66, 0x66, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x41, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x42, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x41, 0x74, 0x22, 0x2a, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x6b, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x62,
	0x0a, 0x10, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x55, 0x0a, 0x0d, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x25, 0x0a, 0x11, 0x4f, 0x61, 0x75,
	0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x22, 0xe8, 0x02, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xca, 0x03, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x61,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x41, 0x74, 0x12, 0x29, 0x0a,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x46, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xbe, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x4f, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x63, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x03, 0x41, 0x70, 0x69, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x9b, 0x02, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x2c, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x70, 0x69, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x37, 0x0a,
	0x0f, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x70, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x93, 0x02, 0x0a, 0x04, 0x4d, 0x65, 0x6e, 0x75, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc9, 0x02, 0x0a,
	0x0b, 0x4d, 0x65, 0x6e, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x39, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64,
	0x4d, 0x65, 0x6e, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x6e, 0x75, 0x52,
	0x65, 0x71, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x04,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc6,
	0x02, 0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x4f, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x60, 0x0a, 0x11, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x61, 0x70, 0x69, 0x49, 0x64, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x07, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x73, 0x22, 0x45, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x61, 0x70, 0x69, 0x49, 0x64,
	0x73, 0x22, 0x48, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x4d,
	0x65, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x73, 0x22, 0x47, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x72, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x73, 0x22, 0xcf, 0x02, 0x0a, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x4e, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9c, 0x04, 0x0a, 0x0e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06,
	0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x73,
	0x54, 0x6f, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x52, 0x07, 0x74, 0x61,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x0f, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a,
	0x0a, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x45, 0x0a, 0x0d, 0x54, 0x6f, 0x70, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x74, 0x6f,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x22, 0x55,
	0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x31, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x19, 0x46, 0x69,
	0x6e, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x13,
	0x46, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f,
	0x6c, 0x69, 0x6b, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x42, 0x0a, 0x0b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x81, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x06,
	0x54, 0x61, 0x67, 0x4e, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x9a, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x72,
	0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x54, 0x61, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x2f, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x74,
	0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67,
	0x49, 0x64, 0x22, 0x2d, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xa6, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x42, 0x0a, 0x0c, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61,
	0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x61, 0x67, 0x4d, 0x61, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x54, 0x0a, 0x0f, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e, 0x0a, 0x13, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x74, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdd, 0x03, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69,
	0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x0f, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x38, 0x0a, 0x13, 0x46,
	0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x6b,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa0, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x36, 0x0a, 0x12, 0x46,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f,
	0x73, 0x72, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x53, 0x72, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x34,
	0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xee, 0x01, 0x0a, 0x0a, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3e, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x32, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x50,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xda, 0x01, 0x0a, 0x0a,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69,
	0x6e, 0x6b, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3e, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x04, 0x54, 0x61, 0x6c,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x73,
	0x54, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6b,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c,
	0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd3, 0x02, 0x0a, 0x0e, 0x54, 0x61, 0x6c,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69,
	0x73, 0x54, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x32,
	0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x1e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x38, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x54, 0x61,
	0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x74,
	0x61, 0x6c, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c,
	0x6c, 0x69, 0x6b, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xfb, 0x03, 0x0a,
	0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x42, 0x0a, 0x18, 0x46, 0x69,
	0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x91,
	0x02, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x3e, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xff, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x64, 0x35, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3e, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x69, 0x73, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x69,
	0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x37, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x69, 0x73, 0x69, 0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x2e, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79,
	0x22, 0x33, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x51, 0x0a, 0x0d, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x90, 0x05, 0x0a, 0x07, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x70, 0x63, 0x12, 0x28, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0e, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b,
	0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x06, 0x4c,
	0x6f, 0x67, 0x6f, 0x66, 0x66, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67,
	0x6f, 0x66, 0x66, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x38, 0x0a, 0x0d, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x16, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x11, 0x53,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x69, 0x6e, 0x64,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x0a, 0x4f, 0x61,
	0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x13, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x4f, 0x61, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x13, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4f, 0x61,
	0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x41, 0x74, 0x12, 0x14, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x41, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0x9a, 0x04, 0x0a, 0x07,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x70, 0x63, 0x12, 0x3a, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x18,
	0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0xe1, 0x02, 0x0a, 0x06, 0x41, 0x70, 0x69,
	0x52, 0x70, 0x63, 0x12, 0x1e, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x41, 0x70, 0x69, 0x12, 0x09, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x70, 0x69, 0x1a, 0x09, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x41, 0x70, 0x69, 0x12, 0x21, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69,
	0x12, 0x09, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x70, 0x69, 0x1a, 0x09, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x41, 0x70, 0x69, 0x12, 0x29, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x70, 0x69, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2e, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x21, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x69, 0x12, 0x0b, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x41, 0x70, 0x69, 0x12, 0x35, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x69, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x41, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0b, 0x53,
	0x79, 0x6e, 0x63, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x0c, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x32, 0xf3, 0x02, 0x0a,
	0x07, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x70, 0x63, 0x12, 0x21, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x4d,
	0x65, 0x6e, 0x75, 0x12, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x1a,
	0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x24, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x1a, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x6e,
	0x75, 0x12, 0x2a, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x12,
	0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23,
	0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4d,
	0x65, 0x6e, 0x75, 0x12, 0x37, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x16, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x4d, 0x65, 0x6e, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x0c,
	0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x6e, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x1a,
	0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x30, 0x0a, 0x0d, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x32, 0xaa, 0x05, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x70, 0x63, 0x12, 0x21,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x24, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x0a, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x46, 0x69, 0x6e,
	0x64, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x16, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x39, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x73,
	0x12, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x73, 0x12, 0x17, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x41,
	0x70, 0x69, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x69, 0x73, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x41, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0d, 0x46,
	0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x0f, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32,
	0xbe, 0x0a, 0x0a, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x70, 0x63, 0x12, 0x34,
	0x0a, 0x0a, 0x41, 0x64, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x10, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x65, 0x77, 0x1a, 0x14,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x4e, 0x65, 0x77, 0x1a, 0x14, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2f, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0b, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2e,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12,
	0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46,
	0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x12, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x54, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x42, 0x79,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x32, 0x0a, 0x0a, 0x54, 0x6f, 0x70, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x12, 0x13, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x6f, 0x70, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x0b, 0x4c, 0x69, 0x6b, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x6b, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0f, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x1a, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3a, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e,
	0x65, 0x77, 0x1a, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0c,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a,
	0x10, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x54,
	0x61, 0x67, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x67, 0x4e, 0x65, 0x77,
	0x1a, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12,
	0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x67, 0x4e, 0x65, 0x77, 0x1a, 0x10, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x27, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54,
	0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x32, 0xda, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x70, 0x63, 0x12,
	0x2a, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0b, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a,
	0x0b, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0b, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x19, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a,
	0x0b, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0b, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x13, 0x46, 0x69,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x69,
	0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0xdc, 0x02,
	0x0a, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x70, 0x63, 0x12, 0x27, 0x0a, 0x09, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x1a, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2a, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x1a, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x2c, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x27, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x3b, 0x0a, 0x0e, 0x46, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x18, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0xd3, 0x05, 0x0a,
	0x08, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x70, 0x63, 0x12, 0x24, 0x0a, 0x08, 0x41, 0x64, 0x64,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x1a, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12,
	0x27, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x64, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x39,
	0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x17, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x0e, 0x46, 0x69, 0x6e,
	0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a,
	0x0d, 0x41, 0x64, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x10,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x1a, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x12, 0x36, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x1a, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x0b,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x12, 0x43, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1c, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x13, 0x46, 0x69, 0x6e,
	0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x32, 0xc0, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x67, 0x65, 0x52, 0x70, 0x63, 0x12, 0x21,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x1a, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x1a, 0x0a, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x46, 0x69, 0x6e,
	0x64, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x16, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x31, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0x94, 0x03, 0x0a, 0x0d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x70, 0x63, 0x12, 0x33, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x10, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x36, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69,
	0x6e, 0x6b, 0x1a, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x30, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a,
	0x0e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x43,
	0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0xa7, 0x03, 0x0a,
	0x07, 0x54, 0x61, 0x6c, 0x6b, 0x52, 0x70, 0x63, 0x12, 0x21, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x54,
	0x61, 0x6c, 0x6b, 0x12, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x1a,
	0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x24, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x1a, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x6c,
	0x6b, 0x12, 0x2a, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x12,
	0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23,
	0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54,
	0x61, 0x6c, 0x6b, 0x12, 0x37, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x16, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x54, 0x61, 0x6c, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0d,
	0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x28, 0x0a, 0x08, 0x4c, 0x69, 0x6b, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x0b, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x10, 0x46, 0x69, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x0f, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x54, 0x61,
	0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x32, 0xa7, 0x03, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x52, 0x70,
	0x63, 0x12, 0x39, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x3c, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x12, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x32, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67,
	0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x0b, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x47, 0x0a, 0x14,
	0x46, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1e, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x32, 0x8e, 0x03, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x74, 0x52, 0x70, 0x63, 0x12, 0x33, 0x0a, 0x0d,
	0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a,
	0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x36, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0b, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2f, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1c, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x32, 0x4d, 0x0a, 0x09, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x70, 0x63, 0x12, 0x40,
	0x0a, 0x0f, 0x41, 0x64, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x32, 0x45, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x67, 0x52, 0x70, 0x63, 0x12, 0x3a, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x73, 0x70, 0x32, 0x78, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x70, 0x63, 0x12, 0x32, 0x0a, 0x0a, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x13, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x13, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x62, 0x6c, 0x6f, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_blog_proto_rawDescOnce sync.Once
	file_blog_proto_rawDescData = file_blog_proto_rawDesc
)

func file_blog_proto_rawDescGZIP() []byte {
	file_blog_proto_rawDescOnce.Do(func() {
		file_blog_proto_rawDescData = protoimpl.X.CompressGZIP(file_blog_proto_rawDescData)
	})
	return file_blog_proto_rawDescData
}

var file_blog_proto_msgTypes = make([]protoimpl.MessageInfo, 103)
var file_blog_proto_goTypes = []any{
	(*EmptyReq)(nil),                  // 0: blog.EmptyReq
	(*EmptyResp)(nil),                 // 1: blog.EmptyResp
	(*IdReq)(nil),                     // 2: blog.IdReq
	(*IdsReq)(nil),                    // 3: blog.IdsReq
	(*UserIdReq)(nil),                 // 4: blog.UserIdReq
	(*PageQuery)(nil),                 // 5: blog.PageQuery
	(*PageLimit)(nil),                 // 6: blog.PageLimit
	(*PageSort)(nil),                  // 7: blog.PageSort
	(*PageCondition)(nil),             // 8: blog.PageCondition
	(*ListResp)(nil),                  // 9: blog.ListResp
	(*BatchResp)(nil),                 // 10: blog.BatchResp
	(*CountResp)(nil),                 // 11: blog.CountResp
	(*LoginReq)(nil),                  // 12: blog.LoginReq
	(*RegisterReq)(nil),               // 13: blog.RegisterReq
	(*LoginResp)(nil),                 // 14: blog.LoginResp
	(*LogoutReq)(nil),                 // 15: blog.LogoutReq
	(*LogoffReq)(nil),                 // 16: blog.LogoffReq
	(*GetLogoutAtReq)(nil),            // 17: blog.GetLogoutAtReq
	(*LogoutResp)(nil),                // 18: blog.LogoutResp
	(*UserEmailReq)(nil),              // 19: blog.UserEmailReq
	(*ResetPasswordReq)(nil),          // 20: blog.ResetPasswordReq
	(*BindUserEmailReq)(nil),          // 21: blog.BindUserEmailReq
	(*OauthLoginReq)(nil),             // 22: blog.OauthLoginReq
	(*OauthLoginUrlResp)(nil),         // 23: blog.OauthLoginUrlResp
	(*UserInfoResp)(nil),              // 24: blog.UserInfoResp
	(*UserDetails)(nil),               // 25: blog.UserDetails
	(*UserRoleLabel)(nil),             // 26: blog.UserRoleLabel
	(*UserLoginHistory)(nil),          // 27: blog.UserLoginHistory
	(*UserRegion)(nil),                // 28: blog.UserRegion
	(*UpdateUserInfoReq)(nil),         // 29: blog.UpdateUserInfoReq
	(*UpdateUserStatusReq)(nil),       // 30: blog.UpdateUserStatusReq
	(*FindUserListReq)(nil),           // 31: blog.FindUserListReq
	(*FindUserListResp)(nil),          // 32: blog.FindUserListResp
	(*FindLoginHistoryListReq)(nil),   // 33: blog.FindLoginHistoryListReq
	(*FindLoginHistoryListResp)(nil),  // 34: blog.FindLoginHistoryListResp
	(*FindUserRegionListResp)(nil),    // 35: blog.FindUserRegionListResp
	(*Api)(nil),                       // 36: blog.Api
	(*ApiDetails)(nil),                // 37: blog.ApiDetails
	(*FindApiListResp)(nil),           // 38: blog.FindApiListResp
	(*Menu)(nil),                      // 39: blog.Menu
	(*MenuDetails)(nil),               // 40: blog.MenuDetails
	(*FindMenuListResp)(nil),          // 41: blog.FindMenuListResp
	(*SyncMenuReq)(nil),               // 42: blog.SyncMenuReq
	(*Role)(nil),                      // 43: blog.Role
	(*RoleDetails)(nil),               // 44: blog.RoleDetails
	(*FindRoleListResp)(nil),          // 45: blog.FindRoleListResp
	(*RoleResourcesResp)(nil),         // 46: blog.RoleResourcesResp
	(*UpdateRoleApisReq)(nil),         // 47: blog.UpdateRoleApisReq
	(*UpdateRoleMenusReq)(nil),        // 48: blog.UpdateRoleMenusReq
	(*UpdateUserRoleReq)(nil),         // 49: blog.UpdateUserRoleReq
	(*ArticleNew)(nil),                // 50: blog.ArticleNew
	(*ArticleDetails)(nil),            // 51: blog.ArticleDetails
	(*ArticleCategory)(nil),           // 52: blog.ArticleCategory
	(*ArticleTag)(nil),                // 53: blog.ArticleTag
	(*RecycleArticleReq)(nil),         // 54: blog.RecycleArticleReq
	(*TopArticleReq)(nil),             // 55: blog.TopArticleReq
	(*FindArticleListResp)(nil),       // 56: blog.FindArticleListResp
	(*FindArticleListReq)(nil),        // 57: blog.FindArticleListReq
	(*FindArticlesByTagReq)(nil),      // 58: blog.FindArticlesByTagReq
	(*FindArticlesByCategoryReq)(nil), // 59: blog.FindArticlesByCategoryReq
	(*FindLikeArticleResp)(nil),       // 60: blog.FindLikeArticleResp
	(*CategoryNew)(nil),               // 61: blog.CategoryNew
	(*CategoryDetails)(nil),           // 62: blog.CategoryDetails
	(*FindCategoryListReq)(nil),       // 63: blog.FindCategoryListReq
	(*FindCategoryListResp)(nil),      // 64: blog.FindCategoryListResp
	(*TagNew)(nil),                    // 65: blog.TagNew
	(*TagDetails)(nil),                // 66: blog.TagDetails
	(*FindTagListReq)(nil),            // 67: blog.FindTagListReq
	(*FindTagListResp)(nil),           // 68: blog.FindTagListResp
	(*FindTagArticleCountReq)(nil),    // 69: blog.FindTagArticleCountReq
	(*FindTagByNameReq)(nil),          // 70: blog.FindTagByNameReq
	(*TagMapResp)(nil),                // 71: blog.TagMapResp
	(*AnalysisArticleResp)(nil),       // 72: blog.AnalysisArticleResp
	(*Comment)(nil),                   // 73: blog.Comment
	(*CommentUserInfo)(nil),           // 74: blog.CommentUserInfo
	(*FindCommentListResp)(nil),       // 75: blog.FindCommentListResp
	(*FindLikeCommentResp)(nil),       // 76: blog.FindLikeCommentResp
	(*Remark)(nil),                    // 77: blog.Remark
	(*FindRemarkListResp)(nil),        // 78: blog.FindRemarkListResp
	(*Photo)(nil),                     // 79: blog.Photo
	(*FindPhotoListResp)(nil),         // 80: blog.FindPhotoListResp
	(*PhotoAlbum)(nil),                // 81: blog.PhotoAlbum
	(*FindPhotoAlbumListResp)(nil),    // 82: blog.FindPhotoAlbumListResp
	(*Page)(nil),                      // 83: blog.Page
	(*FindPageListResp)(nil),          // 84: blog.FindPageListResp
	(*FriendLink)(nil),                // 85: blog.FriendLink
	(*FindFriendLinkListResp)(nil),    // 86: blog.FindFriendLinkListResp
	(*Talk)(nil),                      // 87: blog.Talk
	(*TalkDetailsDTO)(nil),            // 88: blog.TalkDetailsDTO
	(*FindTalkListResp)(nil),          // 89: blog.FindTalkListResp
	(*FindLikeTalkResp)(nil),          // 90: blog.FindLikeTalkResp
	(*OperationLog)(nil),              // 91: blog.OperationLog
	(*FindOperationLogListResp)(nil),  // 92: blog.FindOperationLogListResp
	(*ChatRecord)(nil),                // 93: blog.ChatRecord
	(*FindChatRecordListResp)(nil),    // 94: blog.FindChatRecordListResp
	(*UploadRecordReq)(nil),           // 95: blog.UploadRecordReq
	(*UploadRecordResp)(nil),          // 96: blog.UploadRecordResp
	(*UserVisit)(nil),                 // 97: blog.UserVisit
	(*UserVisitPageRsp)(nil),          // 98: blog.UserVisitPageRsp
	(*FindConfigReq)(nil),             // 99: blog.FindConfigReq
	(*FindConfigResp)(nil),            // 100: blog.FindConfigResp
	(*SaveConfigReq)(nil),             // 101: blog.SaveConfigReq
	nil,                               // 102: blog.TagMapResp.TagMapListEntry
}
var file_blog_proto_depIdxs = []int32{
	26,  // 0: blog.UserDetails.roles:type_name -> blog.UserRoleLabel
	25,  // 1: blog.FindUserListResp.list:type_name -> blog.UserDetails
	27,  // 2: blog.FindLoginHistoryListResp.list:type_name -> blog.UserLoginHistory
	28,  // 3: blog.FindUserRegionListResp.list:type_name -> blog.UserRegion
	37,  // 4: blog.ApiDetails.children:type_name -> blog.ApiDetails
	37,  // 5: blog.FindApiListResp.list:type_name -> blog.ApiDetails
	40,  // 6: blog.MenuDetails.children:type_name -> blog.MenuDetails
	40,  // 7: blog.FindMenuListResp.list:type_name -> blog.MenuDetails
	40,  // 8: blog.SyncMenuReq.menus:type_name -> blog.MenuDetails
	44,  // 9: blog.RoleDetails.children:type_name -> blog.RoleDetails
	44,  // 10: blog.FindRoleListResp.list:type_name -> blog.RoleDetails
	52,  // 11: blog.ArticleDetails.category:type_name -> blog.ArticleCategory
	53,  // 12: blog.ArticleDetails.tag_list:type_name -> blog.ArticleTag
	51,  // 13: blog.FindArticleListResp.list:type_name -> blog.ArticleDetails
	62,  // 14: blog.FindCategoryListResp.list:type_name -> blog.CategoryDetails
	66,  // 15: blog.FindTagListResp.list:type_name -> blog.TagDetails
	102, // 16: blog.TagMapResp.tag_map_list:type_name -> blog.TagMapResp.TagMapListEntry
	74,  // 17: blog.Comment.user:type_name -> blog.CommentUserInfo
	74,  // 18: blog.Comment.reply_user:type_name -> blog.CommentUserInfo
	73,  // 19: blog.FindCommentListResp.list:type_name -> blog.Comment
	77,  // 20: blog.FindRemarkListResp.list:type_name -> blog.Remark
	79,  // 21: blog.FindPhotoListResp.list:type_name -> blog.Photo
	81,  // 22: blog.FindPhotoAlbumListResp.list:type_name -> blog.PhotoAlbum
	83,  // 23: blog.FindPageListResp.list:type_name -> blog.Page
	85,  // 24: blog.FindFriendLinkListResp.list:type_name -> blog.FriendLink
	87,  // 25: blog.FindTalkListResp.list:type_name -> blog.Talk
	91,  // 26: blog.FindOperationLogListResp.list:type_name -> blog.OperationLog
	93,  // 27: blog.FindChatRecordListResp.list:type_name -> blog.ChatRecord
	97,  // 28: blog.UserVisitPageRsp.list:type_name -> blog.UserVisit
	68,  // 29: blog.TagMapResp.TagMapListEntry.value:type_name -> blog.FindTagListResp
	12,  // 30: blog.AuthRpc.Login:input_type -> blog.LoginReq
	15,  // 31: blog.AuthRpc.Logout:input_type -> blog.LogoutReq
	16,  // 32: blog.AuthRpc.Logoff:input_type -> blog.LogoffReq
	13,  // 33: blog.AuthRpc.Register:input_type -> blog.RegisterReq
	20,  // 34: blog.AuthRpc.ResetPassword:input_type -> blog.ResetPasswordReq
	21,  // 35: blog.AuthRpc.BindUserEmail:input_type -> blog.BindUserEmailReq
	19,  // 36: blog.AuthRpc.SendRegisterEmail:input_type -> blog.UserEmailReq
	19,  // 37: blog.AuthRpc.SendResetPasswordEmail:input_type -> blog.UserEmailReq
	19,  // 38: blog.AuthRpc.SendBindEmail:input_type -> blog.UserEmailReq
	22,  // 39: blog.AuthRpc.OauthLogin:input_type -> blog.OauthLoginReq
	22,  // 40: blog.AuthRpc.GetOauthAuthorizeUrl:input_type -> blog.OauthLoginReq
	17,  // 41: blog.AuthRpc.GetLogoutAt:input_type -> blog.GetLogoutAtReq
	29,  // 42: blog.UserRpc.UpdateUserInfo:input_type -> blog.UpdateUserInfoReq
	30,  // 43: blog.UserRpc.UpdateUserStatus:input_type -> blog.UpdateUserStatusReq
	4,   // 44: blog.UserRpc.FindUserInfo:input_type -> blog.UserIdReq
	31,  // 45: blog.UserRpc.FindUserList:input_type -> blog.FindUserListReq
	31,  // 46: blog.UserRpc.FindUserOnlineList:input_type -> blog.FindUserListReq
	33,  // 47: blog.UserRpc.FindUserLoginHistoryList:input_type -> blog.FindLoginHistoryListReq
	3,   // 48: blog.UserRpc.DeleteUserLoginHistoryList:input_type -> blog.IdsReq
	0,   // 49: blog.UserRpc.FindUserRegionList:input_type -> blog.EmptyReq
	36,  // 50: blog.ApiRpc.AddApi:input_type -> blog.Api
	36,  // 51: blog.ApiRpc.UpdateApi:input_type -> blog.Api
	2,   // 52: blog.ApiRpc.DeleteApi:input_type -> blog.IdReq
	3,   // 53: blog.ApiRpc.DeleteApiList:input_type -> blog.IdsReq
	2,   // 54: blog.ApiRpc.FindApi:input_type -> blog.IdReq
	5,   // 55: blog.ApiRpc.FindApiList:input_type -> blog.PageQuery
	0,   // 56: blog.ApiRpc.SyncApiList:input_type -> blog.EmptyReq
	0,   // 57: blog.ApiRpc.CleanApiList:input_type -> blog.EmptyReq
	39,  // 58: blog.MenuRpc.AddMenu:input_type -> blog.Menu
	39,  // 59: blog.MenuRpc.UpdateMenu:input_type -> blog.Menu
	2,   // 60: blog.MenuRpc.DeleteMenu:input_type -> blog.IdReq
	3,   // 61: blog.MenuRpc.DeleteMenuList:input_type -> blog.IdsReq
	2,   // 62: blog.MenuRpc.FindMenu:input_type -> blog.IdReq
	5,   // 63: blog.MenuRpc.FindMenuList:input_type -> blog.PageQuery
	42,  // 64: blog.MenuRpc.SyncMenuList:input_type -> blog.SyncMenuReq
	0,   // 65: blog.MenuRpc.CleanMenuList:input_type -> blog.EmptyReq
	43,  // 66: blog.RoleRpc.AddRole:input_type -> blog.Role
	43,  // 67: blog.RoleRpc.UpdateRole:input_type -> blog.Role
	2,   // 68: blog.RoleRpc.DeleteRole:input_type -> blog.IdReq
	3,   // 69: blog.RoleRpc.DeleteRoleList:input_type -> blog.IdsReq
	2,   // 70: blog.RoleRpc.FindRole:input_type -> blog.IdReq
	5,   // 71: blog.RoleRpc.FindRoleList:input_type -> blog.PageQuery
	2,   // 72: blog.RoleRpc.FindRoleResources:input_type -> blog.IdReq
	48,  // 73: blog.RoleRpc.UpdateRoleMenus:input_type -> blog.UpdateRoleMenusReq
	47,  // 74: blog.RoleRpc.UpdateRoleApis:input_type -> blog.UpdateRoleApisReq
	49,  // 75: blog.RoleRpc.UpdateUserRole:input_type -> blog.UpdateUserRoleReq
	4,   // 76: blog.RoleRpc.FindUserApis:input_type -> blog.UserIdReq
	4,   // 77: blog.RoleRpc.FindUserMenus:input_type -> blog.UserIdReq
	4,   // 78: blog.RoleRpc.FindUserRoles:input_type -> blog.UserIdReq
	50,  // 79: blog.ArticleRpc.AddArticle:input_type -> blog.ArticleNew
	50,  // 80: blog.ArticleRpc.UpdateArticle:input_type -> blog.ArticleNew
	2,   // 81: blog.ArticleRpc.GetArticle:input_type -> blog.IdReq
	3,   // 82: blog.ArticleRpc.DeleteArticle:input_type -> blog.IdsReq
	57,  // 83: blog.ArticleRpc.FindArticleList:input_type -> blog.FindArticleListReq
	57,  // 84: blog.ArticleRpc.FindArticlePublicList:input_type -> blog.FindArticleListReq
	58,  // 85: blog.ArticleRpc.FindArticlesByTag:input_type -> blog.FindArticlesByTagReq
	59,  // 86: blog.ArticleRpc.FindArticlesByCategory:input_type -> blog.FindArticlesByCategoryReq
	54,  // 87: blog.ArticleRpc.RecycleArticle:input_type -> blog.RecycleArticleReq
	55,  // 88: blog.ArticleRpc.TopArticle:input_type -> blog.TopArticleReq
	2,   // 89: blog.ArticleRpc.LikeArticle:input_type -> blog.IdReq
	4,   // 90: blog.ArticleRpc.FindUserLikeArticle:input_type -> blog.UserIdReq
	0,   // 91: blog.ArticleRpc.AnalysisArticle:input_type -> blog.EmptyReq
	61,  // 92: blog.ArticleRpc.AddCategory:input_type -> blog.CategoryNew
	61,  // 93: blog.ArticleRpc.UpdateCategory:input_type -> blog.CategoryNew
	2,   // 94: blog.ArticleRpc.GetCategory:input_type -> blog.IdReq
	3,   // 95: blog.ArticleRpc.DeleteCategory:input_type -> blog.IdsReq
	63,  // 96: blog.ArticleRpc.FindCategoryList:input_type -> blog.FindCategoryListReq
	65,  // 97: blog.ArticleRpc.AddTag:input_type -> blog.TagNew
	65,  // 98: blog.ArticleRpc.UpdateTag:input_type -> blog.TagNew
	2,   // 99: blog.ArticleRpc.GetTag:input_type -> blog.IdReq
	3,   // 100: blog.ArticleRpc.DeleteTag:input_type -> blog.IdsReq
	67,  // 101: blog.ArticleRpc.FindTagList:input_type -> blog.FindTagListReq
	73,  // 102: blog.CommentRpc.AddComment:input_type -> blog.Comment
	73,  // 103: blog.CommentRpc.UpdateComment:input_type -> blog.Comment
	2,   // 104: blog.CommentRpc.DeleteComment:input_type -> blog.IdReq
	3,   // 105: blog.CommentRpc.DeleteCommentList:input_type -> blog.IdsReq
	2,   // 106: blog.CommentRpc.FindComment:input_type -> blog.IdReq
	5,   // 107: blog.CommentRpc.FindCommentList:input_type -> blog.PageQuery
	5,   // 108: blog.CommentRpc.FindCommentCount:input_type -> blog.PageQuery
	2,   // 109: blog.CommentRpc.LikeComment:input_type -> blog.IdReq
	4,   // 110: blog.CommentRpc.FindUserLikeComment:input_type -> blog.UserIdReq
	77,  // 111: blog.RemarkRpc.AddRemark:input_type -> blog.Remark
	77,  // 112: blog.RemarkRpc.UpdateRemark:input_type -> blog.Remark
	2,   // 113: blog.RemarkRpc.DeleteRemark:input_type -> blog.IdReq
	3,   // 114: blog.RemarkRpc.DeleteRemarkList:input_type -> blog.IdsReq
	2,   // 115: blog.RemarkRpc.FindRemark:input_type -> blog.IdReq
	5,   // 116: blog.RemarkRpc.FindRemarkList:input_type -> blog.PageQuery
	5,   // 117: blog.RemarkRpc.FindRemarkCount:input_type -> blog.PageQuery
	79,  // 118: blog.PhotoRpc.AddPhoto:input_type -> blog.Photo
	79,  // 119: blog.PhotoRpc.UpdatePhoto:input_type -> blog.Photo
	2,   // 120: blog.PhotoRpc.DeletePhoto:input_type -> blog.IdReq
	3,   // 121: blog.PhotoRpc.DeletePhotoList:input_type -> blog.IdsReq
	2,   // 122: blog.PhotoRpc.FindPhoto:input_type -> blog.IdReq
	5,   // 123: blog.PhotoRpc.FindPhotoList:input_type -> blog.PageQuery
	5,   // 124: blog.PhotoRpc.FindPhotoCount:input_type -> blog.PageQuery
	81,  // 125: blog.PhotoRpc.AddPhotoAlbum:input_type -> blog.PhotoAlbum
	81,  // 126: blog.PhotoRpc.UpdatePhotoAlbum:input_type -> blog.PhotoAlbum
	2,   // 127: blog.PhotoRpc.DeletePhotoAlbum:input_type -> blog.IdReq
	3,   // 128: blog.PhotoRpc.DeletePhotoAlbumList:input_type -> blog.IdsReq
	2,   // 129: blog.PhotoRpc.FindPhotoAlbum:input_type -> blog.IdReq
	5,   // 130: blog.PhotoRpc.FindPhotoAlbumList:input_type -> blog.PageQuery
	5,   // 131: blog.PhotoRpc.FindPhotoAlbumCount:input_type -> blog.PageQuery
	83,  // 132: blog.PageRpc.AddPage:input_type -> blog.Page
	83,  // 133: blog.PageRpc.UpdatePage:input_type -> blog.Page
	2,   // 134: blog.PageRpc.DeletePage:input_type -> blog.IdReq
	3,   // 135: blog.PageRpc.DeletePageList:input_type -> blog.IdsReq
	2,   // 136: blog.PageRpc.FindPage:input_type -> blog.IdReq
	5,   // 137: blog.PageRpc.FindPageList:input_type -> blog.PageQuery
	5,   // 138: blog.PageRpc.FindPageCount:input_type -> blog.PageQuery
	85,  // 139: blog.FriendLinkRpc.AddFriendLink:input_type -> blog.FriendLink
	85,  // 140: blog.FriendLinkRpc.UpdateFriendLink:input_type -> blog.FriendLink
	2,   // 141: blog.FriendLinkRpc.DeleteFriendLink:input_type -> blog.IdReq
	3,   // 142: blog.FriendLinkRpc.DeleteFriendLinkList:input_type -> blog.IdsReq
	2,   // 143: blog.FriendLinkRpc.FindFriendLink:input_type -> blog.IdReq
	5,   // 144: blog.FriendLinkRpc.FindFriendLinkList:input_type -> blog.PageQuery
	5,   // 145: blog.FriendLinkRpc.FindFriendLinkCount:input_type -> blog.PageQuery
	87,  // 146: blog.TalkRpc.AddTalk:input_type -> blog.Talk
	87,  // 147: blog.TalkRpc.UpdateTalk:input_type -> blog.Talk
	2,   // 148: blog.TalkRpc.DeleteTalk:input_type -> blog.IdReq
	3,   // 149: blog.TalkRpc.DeleteTalkList:input_type -> blog.IdsReq
	2,   // 150: blog.TalkRpc.FindTalk:input_type -> blog.IdReq
	5,   // 151: blog.TalkRpc.FindTalkList:input_type -> blog.PageQuery
	5,   // 152: blog.TalkRpc.FindTalkCount:input_type -> blog.PageQuery
	2,   // 153: blog.TalkRpc.LikeTalk:input_type -> blog.IdReq
	4,   // 154: blog.TalkRpc.FindUserLikeTalk:input_type -> blog.UserIdReq
	91,  // 155: blog.LogRpc.AddOperationLog:input_type -> blog.OperationLog
	91,  // 156: blog.LogRpc.UpdateOperationLog:input_type -> blog.OperationLog
	2,   // 157: blog.LogRpc.DeleteOperationLog:input_type -> blog.IdReq
	3,   // 158: blog.LogRpc.DeleteOperationLogList:input_type -> blog.IdsReq
	2,   // 159: blog.LogRpc.FindOperationLog:input_type -> blog.IdReq
	5,   // 160: blog.LogRpc.FindOperationLogList:input_type -> blog.PageQuery
	5,   // 161: blog.LogRpc.FindOperationLogCount:input_type -> blog.PageQuery
	93,  // 162: blog.ChatRpc.AddChatRecord:input_type -> blog.ChatRecord
	93,  // 163: blog.ChatRpc.UpdateChatRecord:input_type -> blog.ChatRecord
	2,   // 164: blog.ChatRpc.DeleteChatRecord:input_type -> blog.IdReq
	3,   // 165: blog.ChatRpc.DeleteChatRecordList:input_type -> blog.IdsReq
	2,   // 166: blog.ChatRpc.FindChatRecord:input_type -> blog.IdReq
	5,   // 167: blog.ChatRpc.FindChatRecordList:input_type -> blog.PageQuery
	5,   // 168: blog.ChatRpc.FindChatRecordCount:input_type -> blog.PageQuery
	95,  // 169: blog.UploadRpc.AddUploadRecord:input_type -> blog.UploadRecordReq
	0,   // 170: blog.BlogRpc.GetUserVisitList:input_type -> blog.EmptyReq
	101, // 171: blog.ConfigRpc.SaveConfig:input_type -> blog.SaveConfigReq
	99,  // 172: blog.ConfigRpc.FindConfig:input_type -> blog.FindConfigReq
	14,  // 173: blog.AuthRpc.Login:output_type -> blog.LoginResp
	18,  // 174: blog.AuthRpc.Logout:output_type -> blog.LogoutResp
	1,   // 175: blog.AuthRpc.Logoff:output_type -> blog.EmptyResp
	14,  // 176: blog.AuthRpc.Register:output_type -> blog.LoginResp
	1,   // 177: blog.AuthRpc.ResetPassword:output_type -> blog.EmptyResp
	1,   // 178: blog.AuthRpc.BindUserEmail:output_type -> blog.EmptyResp
	1,   // 179: blog.AuthRpc.SendRegisterEmail:output_type -> blog.EmptyResp
	1,   // 180: blog.AuthRpc.SendResetPasswordEmail:output_type -> blog.EmptyResp
	1,   // 181: blog.AuthRpc.SendBindEmail:output_type -> blog.EmptyResp
	14,  // 182: blog.AuthRpc.OauthLogin:output_type -> blog.LoginResp
	23,  // 183: blog.AuthRpc.GetOauthAuthorizeUrl:output_type -> blog.OauthLoginUrlResp
	18,  // 184: blog.AuthRpc.GetLogoutAt:output_type -> blog.LogoutResp
	1,   // 185: blog.UserRpc.UpdateUserInfo:output_type -> blog.EmptyResp
	1,   // 186: blog.UserRpc.UpdateUserStatus:output_type -> blog.EmptyResp
	24,  // 187: blog.UserRpc.FindUserInfo:output_type -> blog.UserInfoResp
	32,  // 188: blog.UserRpc.FindUserList:output_type -> blog.FindUserListResp
	32,  // 189: blog.UserRpc.FindUserOnlineList:output_type -> blog.FindUserListResp
	34,  // 190: blog.UserRpc.FindUserLoginHistoryList:output_type -> blog.FindLoginHistoryListResp
	10,  // 191: blog.UserRpc.DeleteUserLoginHistoryList:output_type -> blog.BatchResp
	35,  // 192: blog.UserRpc.FindUserRegionList:output_type -> blog.FindUserRegionListResp
	36,  // 193: blog.ApiRpc.AddApi:output_type -> blog.Api
	36,  // 194: blog.ApiRpc.UpdateApi:output_type -> blog.Api
	10,  // 195: blog.ApiRpc.DeleteApi:output_type -> blog.BatchResp
	10,  // 196: blog.ApiRpc.DeleteApiList:output_type -> blog.BatchResp
	36,  // 197: blog.ApiRpc.FindApi:output_type -> blog.Api
	38,  // 198: blog.ApiRpc.FindApiList:output_type -> blog.FindApiListResp
	10,  // 199: blog.ApiRpc.SyncApiList:output_type -> blog.BatchResp
	10,  // 200: blog.ApiRpc.CleanApiList:output_type -> blog.BatchResp
	39,  // 201: blog.MenuRpc.AddMenu:output_type -> blog.Menu
	39,  // 202: blog.MenuRpc.UpdateMenu:output_type -> blog.Menu
	10,  // 203: blog.MenuRpc.DeleteMenu:output_type -> blog.BatchResp
	10,  // 204: blog.MenuRpc.DeleteMenuList:output_type -> blog.BatchResp
	39,  // 205: blog.MenuRpc.FindMenu:output_type -> blog.Menu
	41,  // 206: blog.MenuRpc.FindMenuList:output_type -> blog.FindMenuListResp
	10,  // 207: blog.MenuRpc.SyncMenuList:output_type -> blog.BatchResp
	10,  // 208: blog.MenuRpc.CleanMenuList:output_type -> blog.BatchResp
	43,  // 209: blog.RoleRpc.AddRole:output_type -> blog.Role
	43,  // 210: blog.RoleRpc.UpdateRole:output_type -> blog.Role
	10,  // 211: blog.RoleRpc.DeleteRole:output_type -> blog.BatchResp
	10,  // 212: blog.RoleRpc.DeleteRoleList:output_type -> blog.BatchResp
	43,  // 213: blog.RoleRpc.FindRole:output_type -> blog.Role
	45,  // 214: blog.RoleRpc.FindRoleList:output_type -> blog.FindRoleListResp
	46,  // 215: blog.RoleRpc.FindRoleResources:output_type -> blog.RoleResourcesResp
	1,   // 216: blog.RoleRpc.UpdateRoleMenus:output_type -> blog.EmptyResp
	1,   // 217: blog.RoleRpc.UpdateRoleApis:output_type -> blog.EmptyResp
	1,   // 218: blog.RoleRpc.UpdateUserRole:output_type -> blog.EmptyResp
	38,  // 219: blog.RoleRpc.FindUserApis:output_type -> blog.FindApiListResp
	41,  // 220: blog.RoleRpc.FindUserMenus:output_type -> blog.FindMenuListResp
	45,  // 221: blog.RoleRpc.FindUserRoles:output_type -> blog.FindRoleListResp
	51,  // 222: blog.ArticleRpc.AddArticle:output_type -> blog.ArticleDetails
	51,  // 223: blog.ArticleRpc.UpdateArticle:output_type -> blog.ArticleDetails
	51,  // 224: blog.ArticleRpc.GetArticle:output_type -> blog.ArticleDetails
	10,  // 225: blog.ArticleRpc.DeleteArticle:output_type -> blog.BatchResp
	56,  // 226: blog.ArticleRpc.FindArticleList:output_type -> blog.FindArticleListResp
	56,  // 227: blog.ArticleRpc.FindArticlePublicList:output_type -> blog.FindArticleListResp
	56,  // 228: blog.ArticleRpc.FindArticlesByTag:output_type -> blog.FindArticleListResp
	56,  // 229: blog.ArticleRpc.FindArticlesByCategory:output_type -> blog.FindArticleListResp
	1,   // 230: blog.ArticleRpc.RecycleArticle:output_type -> blog.EmptyResp
	1,   // 231: blog.ArticleRpc.TopArticle:output_type -> blog.EmptyResp
	1,   // 232: blog.ArticleRpc.LikeArticle:output_type -> blog.EmptyResp
	60,  // 233: blog.ArticleRpc.FindUserLikeArticle:output_type -> blog.FindLikeArticleResp
	72,  // 234: blog.ArticleRpc.AnalysisArticle:output_type -> blog.AnalysisArticleResp
	62,  // 235: blog.ArticleRpc.AddCategory:output_type -> blog.CategoryDetails
	62,  // 236: blog.ArticleRpc.UpdateCategory:output_type -> blog.CategoryDetails
	62,  // 237: blog.ArticleRpc.GetCategory:output_type -> blog.CategoryDetails
	10,  // 238: blog.ArticleRpc.DeleteCategory:output_type -> blog.BatchResp
	64,  // 239: blog.ArticleRpc.FindCategoryList:output_type -> blog.FindCategoryListResp
	66,  // 240: blog.ArticleRpc.AddTag:output_type -> blog.TagDetails
	66,  // 241: blog.ArticleRpc.UpdateTag:output_type -> blog.TagDetails
	66,  // 242: blog.ArticleRpc.GetTag:output_type -> blog.TagDetails
	10,  // 243: blog.ArticleRpc.DeleteTag:output_type -> blog.BatchResp
	68,  // 244: blog.ArticleRpc.FindTagList:output_type -> blog.FindTagListResp
	73,  // 245: blog.CommentRpc.AddComment:output_type -> blog.Comment
	73,  // 246: blog.CommentRpc.UpdateComment:output_type -> blog.Comment
	10,  // 247: blog.CommentRpc.DeleteComment:output_type -> blog.BatchResp
	10,  // 248: blog.CommentRpc.DeleteCommentList:output_type -> blog.BatchResp
	73,  // 249: blog.CommentRpc.FindComment:output_type -> blog.Comment
	75,  // 250: blog.CommentRpc.FindCommentList:output_type -> blog.FindCommentListResp
	11,  // 251: blog.CommentRpc.FindCommentCount:output_type -> blog.CountResp
	1,   // 252: blog.CommentRpc.LikeComment:output_type -> blog.EmptyResp
	76,  // 253: blog.CommentRpc.FindUserLikeComment:output_type -> blog.FindLikeCommentResp
	77,  // 254: blog.RemarkRpc.AddRemark:output_type -> blog.Remark
	77,  // 255: blog.RemarkRpc.UpdateRemark:output_type -> blog.Remark
	10,  // 256: blog.RemarkRpc.DeleteRemark:output_type -> blog.BatchResp
	10,  // 257: blog.RemarkRpc.DeleteRemarkList:output_type -> blog.BatchResp
	77,  // 258: blog.RemarkRpc.FindRemark:output_type -> blog.Remark
	78,  // 259: blog.RemarkRpc.FindRemarkList:output_type -> blog.FindRemarkListResp
	11,  // 260: blog.RemarkRpc.FindRemarkCount:output_type -> blog.CountResp
	79,  // 261: blog.PhotoRpc.AddPhoto:output_type -> blog.Photo
	79,  // 262: blog.PhotoRpc.UpdatePhoto:output_type -> blog.Photo
	10,  // 263: blog.PhotoRpc.DeletePhoto:output_type -> blog.BatchResp
	10,  // 264: blog.PhotoRpc.DeletePhotoList:output_type -> blog.BatchResp
	79,  // 265: blog.PhotoRpc.FindPhoto:output_type -> blog.Photo
	80,  // 266: blog.PhotoRpc.FindPhotoList:output_type -> blog.FindPhotoListResp
	11,  // 267: blog.PhotoRpc.FindPhotoCount:output_type -> blog.CountResp
	81,  // 268: blog.PhotoRpc.AddPhotoAlbum:output_type -> blog.PhotoAlbum
	81,  // 269: blog.PhotoRpc.UpdatePhotoAlbum:output_type -> blog.PhotoAlbum
	10,  // 270: blog.PhotoRpc.DeletePhotoAlbum:output_type -> blog.BatchResp
	10,  // 271: blog.PhotoRpc.DeletePhotoAlbumList:output_type -> blog.BatchResp
	81,  // 272: blog.PhotoRpc.FindPhotoAlbum:output_type -> blog.PhotoAlbum
	82,  // 273: blog.PhotoRpc.FindPhotoAlbumList:output_type -> blog.FindPhotoAlbumListResp
	11,  // 274: blog.PhotoRpc.FindPhotoAlbumCount:output_type -> blog.CountResp
	83,  // 275: blog.PageRpc.AddPage:output_type -> blog.Page
	83,  // 276: blog.PageRpc.UpdatePage:output_type -> blog.Page
	10,  // 277: blog.PageRpc.DeletePage:output_type -> blog.BatchResp
	10,  // 278: blog.PageRpc.DeletePageList:output_type -> blog.BatchResp
	83,  // 279: blog.PageRpc.FindPage:output_type -> blog.Page
	84,  // 280: blog.PageRpc.FindPageList:output_type -> blog.FindPageListResp
	11,  // 281: blog.PageRpc.FindPageCount:output_type -> blog.CountResp
	85,  // 282: blog.FriendLinkRpc.AddFriendLink:output_type -> blog.FriendLink
	85,  // 283: blog.FriendLinkRpc.UpdateFriendLink:output_type -> blog.FriendLink
	10,  // 284: blog.FriendLinkRpc.DeleteFriendLink:output_type -> blog.BatchResp
	10,  // 285: blog.FriendLinkRpc.DeleteFriendLinkList:output_type -> blog.BatchResp
	85,  // 286: blog.FriendLinkRpc.FindFriendLink:output_type -> blog.FriendLink
	86,  // 287: blog.FriendLinkRpc.FindFriendLinkList:output_type -> blog.FindFriendLinkListResp
	11,  // 288: blog.FriendLinkRpc.FindFriendLinkCount:output_type -> blog.CountResp
	87,  // 289: blog.TalkRpc.AddTalk:output_type -> blog.Talk
	87,  // 290: blog.TalkRpc.UpdateTalk:output_type -> blog.Talk
	10,  // 291: blog.TalkRpc.DeleteTalk:output_type -> blog.BatchResp
	10,  // 292: blog.TalkRpc.DeleteTalkList:output_type -> blog.BatchResp
	87,  // 293: blog.TalkRpc.FindTalk:output_type -> blog.Talk
	89,  // 294: blog.TalkRpc.FindTalkList:output_type -> blog.FindTalkListResp
	11,  // 295: blog.TalkRpc.FindTalkCount:output_type -> blog.CountResp
	1,   // 296: blog.TalkRpc.LikeTalk:output_type -> blog.EmptyResp
	90,  // 297: blog.TalkRpc.FindUserLikeTalk:output_type -> blog.FindLikeTalkResp
	91,  // 298: blog.LogRpc.AddOperationLog:output_type -> blog.OperationLog
	91,  // 299: blog.LogRpc.UpdateOperationLog:output_type -> blog.OperationLog
	10,  // 300: blog.LogRpc.DeleteOperationLog:output_type -> blog.BatchResp
	10,  // 301: blog.LogRpc.DeleteOperationLogList:output_type -> blog.BatchResp
	91,  // 302: blog.LogRpc.FindOperationLog:output_type -> blog.OperationLog
	92,  // 303: blog.LogRpc.FindOperationLogList:output_type -> blog.FindOperationLogListResp
	11,  // 304: blog.LogRpc.FindOperationLogCount:output_type -> blog.CountResp
	93,  // 305: blog.ChatRpc.AddChatRecord:output_type -> blog.ChatRecord
	93,  // 306: blog.ChatRpc.UpdateChatRecord:output_type -> blog.ChatRecord
	10,  // 307: blog.ChatRpc.DeleteChatRecord:output_type -> blog.BatchResp
	10,  // 308: blog.ChatRpc.DeleteChatRecordList:output_type -> blog.BatchResp
	93,  // 309: blog.ChatRpc.FindChatRecord:output_type -> blog.ChatRecord
	94,  // 310: blog.ChatRpc.FindChatRecordList:output_type -> blog.FindChatRecordListResp
	11,  // 311: blog.ChatRpc.FindChatRecordCount:output_type -> blog.CountResp
	96,  // 312: blog.UploadRpc.AddUploadRecord:output_type -> blog.UploadRecordResp
	98,  // 313: blog.BlogRpc.GetUserVisitList:output_type -> blog.UserVisitPageRsp
	1,   // 314: blog.ConfigRpc.SaveConfig:output_type -> blog.EmptyResp
	100, // 315: blog.ConfigRpc.FindConfig:output_type -> blog.FindConfigResp
	173, // [173:316] is the sub-list for method output_type
	30,  // [30:173] is the sub-list for method input_type
	30,  // [30:30] is the sub-list for extension type_name
	30,  // [30:30] is the sub-list for extension extendee
	0,   // [0:30] is the sub-list for field type_name
}

func init() { file_blog_proto_init() }
func file_blog_proto_init() {
	if File_blog_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blog_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EmptyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*EmptyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*IdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*IdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UserIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PageQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PageLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PageSort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*PageCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*BatchResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*LoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*LogoutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*LogoffReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GetLogoutAtReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*LogoutResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*UserEmailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*ResetPasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*BindUserEmailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*OauthLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*OauthLoginUrlResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*UserInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*UserDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*UserRoleLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*UserLoginHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*UserRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*FindUserListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*FindUserListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*FindLoginHistoryListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*FindLoginHistoryListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*FindUserRegionListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*Api); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*ApiDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*FindApiListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*Menu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*MenuDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*FindMenuListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*SyncMenuReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*RoleDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*FindRoleListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*RoleResourcesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRoleApisReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRoleMenusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserRoleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*ArticleNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*ArticleDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*ArticleCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*ArticleTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*RecycleArticleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*TopArticleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*FindArticleListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*FindArticleListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*FindArticlesByTagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*FindArticlesByCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*FindLikeArticleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*CategoryNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*CategoryDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*FindCategoryListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*FindCategoryListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*TagNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*TagDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*FindTagListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*FindTagListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*FindTagArticleCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*FindTagByNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*TagMapResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*AnalysisArticleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*CommentUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*FindCommentListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*FindLikeCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*Remark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*FindRemarkListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*Photo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*FindPhotoListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*PhotoAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*FindPhotoAlbumListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*FindPageListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*FriendLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*FindFriendLinkListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*Talk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*TalkDetailsDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*FindTalkListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*FindLikeTalkResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*OperationLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*FindOperationLogListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*ChatRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*FindChatRecordListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*UploadRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*UploadRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*UserVisit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*UserVisitPageRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*FindConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*FindConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*SaveConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blog_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   103,
			NumExtensions: 0,
			NumServices:   17,
		},
		GoTypes:           file_blog_proto_goTypes,
		DependencyIndexes: file_blog_proto_depIdxs,
		MessageInfos:      file_blog_proto_msgTypes,
	}.Build()
	File_blog_proto = out.File
	file_blog_proto_rawDesc = nil
	file_blog_proto_goTypes = nil
	file_blog_proto_depIdxs = nil
}
