// 声明 proto 语法版本，固定值

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: resource.proto

// proto 包名

package resourcerpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResourceRpc_AddFileFolder_FullMethodName      = "/resourcerpc.ResourceRpc/AddFileFolder"
	ResourceRpc_UpdateFileFolder_FullMethodName   = "/resourcerpc.ResourceRpc/UpdateFileFolder"
	ResourceRpc_DeleteFileFolder_FullMethodName   = "/resourcerpc.ResourceRpc/DeleteFileFolder"
	ResourceRpc_FindFileFolderList_FullMethodName = "/resourcerpc.ResourceRpc/FindFileFolderList"
	ResourceRpc_AddFileUpload_FullMethodName      = "/resourcerpc.ResourceRpc/AddFileUpload"
	ResourceRpc_UpdateFileUpload_FullMethodName   = "/resourcerpc.ResourceRpc/UpdateFileUpload"
	ResourceRpc_DeleteFileUpload_FullMethodName   = "/resourcerpc.ResourceRpc/DeleteFileUpload"
	ResourceRpc_FindFileUploadList_FullMethodName = "/resourcerpc.ResourceRpc/FindFileUploadList"
)

// ResourceRpcClient is the client API for ResourceRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceRpcClient interface {
	// 创建文件夹
	AddFileFolder(ctx context.Context, in *FileFolderNewReq, opts ...grpc.CallOption) (*FileFolderDetails, error)
	// 更新文件夹
	UpdateFileFolder(ctx context.Context, in *FileFolderNewReq, opts ...grpc.CallOption) (*FileFolderDetails, error)
	// 删除文件夹
	DeleteFileFolder(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询文件夹列表
	FindFileFolderList(ctx context.Context, in *FindFileFolderListReq, opts ...grpc.CallOption) (*FindFileFolderListResp, error)
	// 创建文件上传
	AddFileUpload(ctx context.Context, in *FileUploadNewReq, opts ...grpc.CallOption) (*FileUploadDetails, error)
	// 更新文件上传
	UpdateFileUpload(ctx context.Context, in *FileUploadNewReq, opts ...grpc.CallOption) (*FileUploadDetails, error)
	// 删除文件上传
	DeleteFileUpload(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询文件上传列表
	FindFileUploadList(ctx context.Context, in *FindFileUploadListReq, opts ...grpc.CallOption) (*FindFileUploadListResp, error)
}

type resourceRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceRpcClient(cc grpc.ClientConnInterface) ResourceRpcClient {
	return &resourceRpcClient{cc}
}

func (c *resourceRpcClient) AddFileFolder(ctx context.Context, in *FileFolderNewReq, opts ...grpc.CallOption) (*FileFolderDetails, error) {
	out := new(FileFolderDetails)
	err := c.cc.Invoke(ctx, ResourceRpc_AddFileFolder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) UpdateFileFolder(ctx context.Context, in *FileFolderNewReq, opts ...grpc.CallOption) (*FileFolderDetails, error) {
	out := new(FileFolderDetails)
	err := c.cc.Invoke(ctx, ResourceRpc_UpdateFileFolder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) DeleteFileFolder(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ResourceRpc_DeleteFileFolder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) FindFileFolderList(ctx context.Context, in *FindFileFolderListReq, opts ...grpc.CallOption) (*FindFileFolderListResp, error) {
	out := new(FindFileFolderListResp)
	err := c.cc.Invoke(ctx, ResourceRpc_FindFileFolderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) AddFileUpload(ctx context.Context, in *FileUploadNewReq, opts ...grpc.CallOption) (*FileUploadDetails, error) {
	out := new(FileUploadDetails)
	err := c.cc.Invoke(ctx, ResourceRpc_AddFileUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) UpdateFileUpload(ctx context.Context, in *FileUploadNewReq, opts ...grpc.CallOption) (*FileUploadDetails, error) {
	out := new(FileUploadDetails)
	err := c.cc.Invoke(ctx, ResourceRpc_UpdateFileUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) DeleteFileUpload(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ResourceRpc_DeleteFileUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) FindFileUploadList(ctx context.Context, in *FindFileUploadListReq, opts ...grpc.CallOption) (*FindFileUploadListResp, error) {
	out := new(FindFileUploadListResp)
	err := c.cc.Invoke(ctx, ResourceRpc_FindFileUploadList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceRpcServer is the server API for ResourceRpc service.
// All implementations must embed UnimplementedResourceRpcServer
// for forward compatibility
type ResourceRpcServer interface {
	// 创建文件夹
	AddFileFolder(context.Context, *FileFolderNewReq) (*FileFolderDetails, error)
	// 更新文件夹
	UpdateFileFolder(context.Context, *FileFolderNewReq) (*FileFolderDetails, error)
	// 删除文件夹
	DeleteFileFolder(context.Context, *IdsReq) (*BatchResp, error)
	// 查询文件夹列表
	FindFileFolderList(context.Context, *FindFileFolderListReq) (*FindFileFolderListResp, error)
	// 创建文件上传
	AddFileUpload(context.Context, *FileUploadNewReq) (*FileUploadDetails, error)
	// 更新文件上传
	UpdateFileUpload(context.Context, *FileUploadNewReq) (*FileUploadDetails, error)
	// 删除文件上传
	DeleteFileUpload(context.Context, *IdsReq) (*BatchResp, error)
	// 查询文件上传列表
	FindFileUploadList(context.Context, *FindFileUploadListReq) (*FindFileUploadListResp, error)
	mustEmbedUnimplementedResourceRpcServer()
}

// UnimplementedResourceRpcServer must be embedded to have forward compatible implementations.
type UnimplementedResourceRpcServer struct {
}

func (UnimplementedResourceRpcServer) AddFileFolder(context.Context, *FileFolderNewReq) (*FileFolderDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFileFolder not implemented")
}
func (UnimplementedResourceRpcServer) UpdateFileFolder(context.Context, *FileFolderNewReq) (*FileFolderDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileFolder not implemented")
}
func (UnimplementedResourceRpcServer) DeleteFileFolder(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileFolder not implemented")
}
func (UnimplementedResourceRpcServer) FindFileFolderList(context.Context, *FindFileFolderListReq) (*FindFileFolderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFileFolderList not implemented")
}
func (UnimplementedResourceRpcServer) AddFileUpload(context.Context, *FileUploadNewReq) (*FileUploadDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFileUpload not implemented")
}
func (UnimplementedResourceRpcServer) UpdateFileUpload(context.Context, *FileUploadNewReq) (*FileUploadDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileUpload not implemented")
}
func (UnimplementedResourceRpcServer) DeleteFileUpload(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileUpload not implemented")
}
func (UnimplementedResourceRpcServer) FindFileUploadList(context.Context, *FindFileUploadListReq) (*FindFileUploadListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFileUploadList not implemented")
}
func (UnimplementedResourceRpcServer) mustEmbedUnimplementedResourceRpcServer() {}

// UnsafeResourceRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceRpcServer will
// result in compilation errors.
type UnsafeResourceRpcServer interface {
	mustEmbedUnimplementedResourceRpcServer()
}

func RegisterResourceRpcServer(s grpc.ServiceRegistrar, srv ResourceRpcServer) {
	s.RegisterService(&ResourceRpc_ServiceDesc, srv)
}

func _ResourceRpc_AddFileFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileFolderNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).AddFileFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_AddFileFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).AddFileFolder(ctx, req.(*FileFolderNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_UpdateFileFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileFolderNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).UpdateFileFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_UpdateFileFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).UpdateFileFolder(ctx, req.(*FileFolderNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_DeleteFileFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).DeleteFileFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_DeleteFileFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).DeleteFileFolder(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_FindFileFolderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileFolderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).FindFileFolderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_FindFileFolderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).FindFileFolderList(ctx, req.(*FindFileFolderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_AddFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).AddFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_AddFileUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).AddFileUpload(ctx, req.(*FileUploadNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_UpdateFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).UpdateFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_UpdateFileUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).UpdateFileUpload(ctx, req.(*FileUploadNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_DeleteFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).DeleteFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_DeleteFileUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).DeleteFileUpload(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_FindFileUploadList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileUploadListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).FindFileUploadList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_FindFileUploadList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).FindFileUploadList(ctx, req.(*FindFileUploadListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceRpc_ServiceDesc is the grpc.ServiceDesc for ResourceRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resourcerpc.ResourceRpc",
	HandlerType: (*ResourceRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFileFolder",
			Handler:    _ResourceRpc_AddFileFolder_Handler,
		},
		{
			MethodName: "UpdateFileFolder",
			Handler:    _ResourceRpc_UpdateFileFolder_Handler,
		},
		{
			MethodName: "DeleteFileFolder",
			Handler:    _ResourceRpc_DeleteFileFolder_Handler,
		},
		{
			MethodName: "FindFileFolderList",
			Handler:    _ResourceRpc_FindFileFolderList_Handler,
		},
		{
			MethodName: "AddFileUpload",
			Handler:    _ResourceRpc_AddFileUpload_Handler,
		},
		{
			MethodName: "UpdateFileUpload",
			Handler:    _ResourceRpc_UpdateFileUpload_Handler,
		},
		{
			MethodName: "DeleteFileUpload",
			Handler:    _ResourceRpc_DeleteFileUpload_Handler,
		},
		{
			MethodName: "FindFileUploadList",
			Handler:    _ResourceRpc_FindFileUploadList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource.proto",
}
