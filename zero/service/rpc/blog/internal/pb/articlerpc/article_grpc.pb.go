// 声明 proto 语法版本，固定值

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: article.proto

// proto 包名

package articlerpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArticleRpc_AddArticle_FullMethodName             = "/articlerpc.ArticleRpc/AddArticle"
	ArticleRpc_UpdateArticle_FullMethodName          = "/articlerpc.ArticleRpc/UpdateArticle"
	ArticleRpc_DeleteArticle_FullMethodName          = "/articlerpc.ArticleRpc/DeleteArticle"
	ArticleRpc_FindArticleList_FullMethodName        = "/articlerpc.ArticleRpc/FindArticleList"
	ArticleRpc_FindArticlePublicList_FullMethodName  = "/articlerpc.ArticleRpc/FindArticlePublicList"
	ArticleRpc_FindArticlePreviewList_FullMethodName = "/articlerpc.ArticleRpc/FindArticlePreviewList"
	ArticleRpc_RecycleArticle_FullMethodName         = "/articlerpc.ArticleRpc/RecycleArticle"
	ArticleRpc_TopArticle_FullMethodName             = "/articlerpc.ArticleRpc/TopArticle"
	ArticleRpc_GetArticle_FullMethodName             = "/articlerpc.ArticleRpc/GetArticle"
	ArticleRpc_GetArticleRecommend_FullMethodName    = "/articlerpc.ArticleRpc/GetArticleRecommend"
	ArticleRpc_LikeArticle_FullMethodName            = "/articlerpc.ArticleRpc/LikeArticle"
	ArticleRpc_FindUserLikeArticle_FullMethodName    = "/articlerpc.ArticleRpc/FindUserLikeArticle"
	ArticleRpc_AnalysisArticle_FullMethodName        = "/articlerpc.ArticleRpc/AnalysisArticle"
	ArticleRpc_AddCategory_FullMethodName            = "/articlerpc.ArticleRpc/AddCategory"
	ArticleRpc_UpdateCategory_FullMethodName         = "/articlerpc.ArticleRpc/UpdateCategory"
	ArticleRpc_GetCategory_FullMethodName            = "/articlerpc.ArticleRpc/GetCategory"
	ArticleRpc_DeleteCategory_FullMethodName         = "/articlerpc.ArticleRpc/DeleteCategory"
	ArticleRpc_FindCategoryList_FullMethodName       = "/articlerpc.ArticleRpc/FindCategoryList"
	ArticleRpc_AddTag_FullMethodName                 = "/articlerpc.ArticleRpc/AddTag"
	ArticleRpc_UpdateTag_FullMethodName              = "/articlerpc.ArticleRpc/UpdateTag"
	ArticleRpc_GetTag_FullMethodName                 = "/articlerpc.ArticleRpc/GetTag"
	ArticleRpc_DeleteTag_FullMethodName              = "/articlerpc.ArticleRpc/DeleteTag"
	ArticleRpc_FindTagList_FullMethodName            = "/articlerpc.ArticleRpc/FindTagList"
)

// ArticleRpcClient is the client API for ArticleRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleRpcClient interface {
	// 创建文章
	AddArticle(ctx context.Context, in *ArticleNewReq, opts ...grpc.CallOption) (*ArticleDetails, error)
	// 更新文章
	UpdateArticle(ctx context.Context, in *ArticleNewReq, opts ...grpc.CallOption) (*ArticleDetails, error)
	// 删除文章
	DeleteArticle(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询文章列表
	FindArticleList(ctx context.Context, in *FindArticleListReq, opts ...grpc.CallOption) (*FindArticleListResp, error)
	// 查询文章列表
	FindArticlePublicList(ctx context.Context, in *FindArticleListReq, opts ...grpc.CallOption) (*FindArticleListResp, error)
	// 查询文章列表
	FindArticlePreviewList(ctx context.Context, in *FindArticlePreviewListReq, opts ...grpc.CallOption) (*FindArticlePreviewListResp, error)
	// 回收文章
	RecycleArticle(ctx context.Context, in *RecycleArticleReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 置顶文章
	TopArticle(ctx context.Context, in *TopArticleReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 查询文章
	GetArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ArticleDetails, error)
	// 查询文章推荐
	GetArticleRecommend(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ArticleRecommendResp, error)
	// 点赞文章
	LikeArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 用户点赞的文章
	FindUserLikeArticle(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindLikeArticleResp, error)
	// 查询文章数量
	AnalysisArticle(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*AnalysisArticleResp, error)
	// 创建文章分类
	AddCategory(ctx context.Context, in *CategoryNewReq, opts ...grpc.CallOption) (*CategoryDetails, error)
	// 更新文章分类
	UpdateCategory(ctx context.Context, in *CategoryNewReq, opts ...grpc.CallOption) (*CategoryDetails, error)
	// 查询文章分类
	GetCategory(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*CategoryDetails, error)
	// 删除文章分类
	DeleteCategory(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询文章分类列表
	FindCategoryList(ctx context.Context, in *FindCategoryListReq, opts ...grpc.CallOption) (*FindCategoryListResp, error)
	// 创建标签
	AddTag(ctx context.Context, in *TagNewReq, opts ...grpc.CallOption) (*TagDetails, error)
	// 更新标签
	UpdateTag(ctx context.Context, in *TagNewReq, opts ...grpc.CallOption) (*TagDetails, error)
	// 查询标签
	GetTag(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*TagDetails, error)
	// 删除标签
	DeleteTag(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询标签列表
	FindTagList(ctx context.Context, in *FindTagListReq, opts ...grpc.CallOption) (*FindTagListResp, error)
}

type articleRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleRpcClient(cc grpc.ClientConnInterface) ArticleRpcClient {
	return &articleRpcClient{cc}
}

func (c *articleRpcClient) AddArticle(ctx context.Context, in *ArticleNewReq, opts ...grpc.CallOption) (*ArticleDetails, error) {
	out := new(ArticleDetails)
	err := c.cc.Invoke(ctx, ArticleRpc_AddArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) UpdateArticle(ctx context.Context, in *ArticleNewReq, opts ...grpc.CallOption) (*ArticleDetails, error) {
	out := new(ArticleDetails)
	err := c.cc.Invoke(ctx, ArticleRpc_UpdateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) DeleteArticle(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ArticleRpc_DeleteArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindArticleList(ctx context.Context, in *FindArticleListReq, opts ...grpc.CallOption) (*FindArticleListResp, error) {
	out := new(FindArticleListResp)
	err := c.cc.Invoke(ctx, ArticleRpc_FindArticleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindArticlePublicList(ctx context.Context, in *FindArticleListReq, opts ...grpc.CallOption) (*FindArticleListResp, error) {
	out := new(FindArticleListResp)
	err := c.cc.Invoke(ctx, ArticleRpc_FindArticlePublicList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindArticlePreviewList(ctx context.Context, in *FindArticlePreviewListReq, opts ...grpc.CallOption) (*FindArticlePreviewListResp, error) {
	out := new(FindArticlePreviewListResp)
	err := c.cc.Invoke(ctx, ArticleRpc_FindArticlePreviewList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) RecycleArticle(ctx context.Context, in *RecycleArticleReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, ArticleRpc_RecycleArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) TopArticle(ctx context.Context, in *TopArticleReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, ArticleRpc_TopArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) GetArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ArticleDetails, error) {
	out := new(ArticleDetails)
	err := c.cc.Invoke(ctx, ArticleRpc_GetArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) GetArticleRecommend(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ArticleRecommendResp, error) {
	out := new(ArticleRecommendResp)
	err := c.cc.Invoke(ctx, ArticleRpc_GetArticleRecommend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) LikeArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, ArticleRpc_LikeArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindUserLikeArticle(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindLikeArticleResp, error) {
	out := new(FindLikeArticleResp)
	err := c.cc.Invoke(ctx, ArticleRpc_FindUserLikeArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) AnalysisArticle(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*AnalysisArticleResp, error) {
	out := new(AnalysisArticleResp)
	err := c.cc.Invoke(ctx, ArticleRpc_AnalysisArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) AddCategory(ctx context.Context, in *CategoryNewReq, opts ...grpc.CallOption) (*CategoryDetails, error) {
	out := new(CategoryDetails)
	err := c.cc.Invoke(ctx, ArticleRpc_AddCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) UpdateCategory(ctx context.Context, in *CategoryNewReq, opts ...grpc.CallOption) (*CategoryDetails, error) {
	out := new(CategoryDetails)
	err := c.cc.Invoke(ctx, ArticleRpc_UpdateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) GetCategory(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*CategoryDetails, error) {
	out := new(CategoryDetails)
	err := c.cc.Invoke(ctx, ArticleRpc_GetCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) DeleteCategory(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ArticleRpc_DeleteCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindCategoryList(ctx context.Context, in *FindCategoryListReq, opts ...grpc.CallOption) (*FindCategoryListResp, error) {
	out := new(FindCategoryListResp)
	err := c.cc.Invoke(ctx, ArticleRpc_FindCategoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) AddTag(ctx context.Context, in *TagNewReq, opts ...grpc.CallOption) (*TagDetails, error) {
	out := new(TagDetails)
	err := c.cc.Invoke(ctx, ArticleRpc_AddTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) UpdateTag(ctx context.Context, in *TagNewReq, opts ...grpc.CallOption) (*TagDetails, error) {
	out := new(TagDetails)
	err := c.cc.Invoke(ctx, ArticleRpc_UpdateTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) GetTag(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*TagDetails, error) {
	out := new(TagDetails)
	err := c.cc.Invoke(ctx, ArticleRpc_GetTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) DeleteTag(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ArticleRpc_DeleteTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindTagList(ctx context.Context, in *FindTagListReq, opts ...grpc.CallOption) (*FindTagListResp, error) {
	out := new(FindTagListResp)
	err := c.cc.Invoke(ctx, ArticleRpc_FindTagList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleRpcServer is the server API for ArticleRpc service.
// All implementations must embed UnimplementedArticleRpcServer
// for forward compatibility
type ArticleRpcServer interface {
	// 创建文章
	AddArticle(context.Context, *ArticleNewReq) (*ArticleDetails, error)
	// 更新文章
	UpdateArticle(context.Context, *ArticleNewReq) (*ArticleDetails, error)
	// 删除文章
	DeleteArticle(context.Context, *IdsReq) (*BatchResp, error)
	// 查询文章列表
	FindArticleList(context.Context, *FindArticleListReq) (*FindArticleListResp, error)
	// 查询文章列表
	FindArticlePublicList(context.Context, *FindArticleListReq) (*FindArticleListResp, error)
	// 查询文章列表
	FindArticlePreviewList(context.Context, *FindArticlePreviewListReq) (*FindArticlePreviewListResp, error)
	// 回收文章
	RecycleArticle(context.Context, *RecycleArticleReq) (*EmptyResp, error)
	// 置顶文章
	TopArticle(context.Context, *TopArticleReq) (*EmptyResp, error)
	// 查询文章
	GetArticle(context.Context, *IdReq) (*ArticleDetails, error)
	// 查询文章推荐
	GetArticleRecommend(context.Context, *IdReq) (*ArticleRecommendResp, error)
	// 点赞文章
	LikeArticle(context.Context, *IdReq) (*EmptyResp, error)
	// 用户点赞的文章
	FindUserLikeArticle(context.Context, *UserIdReq) (*FindLikeArticleResp, error)
	// 查询文章数量
	AnalysisArticle(context.Context, *EmptyReq) (*AnalysisArticleResp, error)
	// 创建文章分类
	AddCategory(context.Context, *CategoryNewReq) (*CategoryDetails, error)
	// 更新文章分类
	UpdateCategory(context.Context, *CategoryNewReq) (*CategoryDetails, error)
	// 查询文章分类
	GetCategory(context.Context, *IdReq) (*CategoryDetails, error)
	// 删除文章分类
	DeleteCategory(context.Context, *IdsReq) (*BatchResp, error)
	// 查询文章分类列表
	FindCategoryList(context.Context, *FindCategoryListReq) (*FindCategoryListResp, error)
	// 创建标签
	AddTag(context.Context, *TagNewReq) (*TagDetails, error)
	// 更新标签
	UpdateTag(context.Context, *TagNewReq) (*TagDetails, error)
	// 查询标签
	GetTag(context.Context, *IdReq) (*TagDetails, error)
	// 删除标签
	DeleteTag(context.Context, *IdsReq) (*BatchResp, error)
	// 查询标签列表
	FindTagList(context.Context, *FindTagListReq) (*FindTagListResp, error)
	mustEmbedUnimplementedArticleRpcServer()
}

// UnimplementedArticleRpcServer must be embedded to have forward compatible implementations.
type UnimplementedArticleRpcServer struct {
}

func (UnimplementedArticleRpcServer) AddArticle(context.Context, *ArticleNewReq) (*ArticleDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArticle not implemented")
}
func (UnimplementedArticleRpcServer) UpdateArticle(context.Context, *ArticleNewReq) (*ArticleDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedArticleRpcServer) DeleteArticle(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedArticleRpcServer) FindArticleList(context.Context, *FindArticleListReq) (*FindArticleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArticleList not implemented")
}
func (UnimplementedArticleRpcServer) FindArticlePublicList(context.Context, *FindArticleListReq) (*FindArticleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArticlePublicList not implemented")
}
func (UnimplementedArticleRpcServer) FindArticlePreviewList(context.Context, *FindArticlePreviewListReq) (*FindArticlePreviewListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArticlePreviewList not implemented")
}
func (UnimplementedArticleRpcServer) RecycleArticle(context.Context, *RecycleArticleReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecycleArticle not implemented")
}
func (UnimplementedArticleRpcServer) TopArticle(context.Context, *TopArticleReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopArticle not implemented")
}
func (UnimplementedArticleRpcServer) GetArticle(context.Context, *IdReq) (*ArticleDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedArticleRpcServer) GetArticleRecommend(context.Context, *IdReq) (*ArticleRecommendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleRecommend not implemented")
}
func (UnimplementedArticleRpcServer) LikeArticle(context.Context, *IdReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeArticle not implemented")
}
func (UnimplementedArticleRpcServer) FindUserLikeArticle(context.Context, *UserIdReq) (*FindLikeArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserLikeArticle not implemented")
}
func (UnimplementedArticleRpcServer) AnalysisArticle(context.Context, *EmptyReq) (*AnalysisArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalysisArticle not implemented")
}
func (UnimplementedArticleRpcServer) AddCategory(context.Context, *CategoryNewReq) (*CategoryDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCategory not implemented")
}
func (UnimplementedArticleRpcServer) UpdateCategory(context.Context, *CategoryNewReq) (*CategoryDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedArticleRpcServer) GetCategory(context.Context, *IdReq) (*CategoryDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedArticleRpcServer) DeleteCategory(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedArticleRpcServer) FindCategoryList(context.Context, *FindCategoryListReq) (*FindCategoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCategoryList not implemented")
}
func (UnimplementedArticleRpcServer) AddTag(context.Context, *TagNewReq) (*TagDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTag not implemented")
}
func (UnimplementedArticleRpcServer) UpdateTag(context.Context, *TagNewReq) (*TagDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedArticleRpcServer) GetTag(context.Context, *IdReq) (*TagDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (UnimplementedArticleRpcServer) DeleteTag(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedArticleRpcServer) FindTagList(context.Context, *FindTagListReq) (*FindTagListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTagList not implemented")
}
func (UnimplementedArticleRpcServer) mustEmbedUnimplementedArticleRpcServer() {}

// UnsafeArticleRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleRpcServer will
// result in compilation errors.
type UnsafeArticleRpcServer interface {
	mustEmbedUnimplementedArticleRpcServer()
}

func RegisterArticleRpcServer(s grpc.ServiceRegistrar, srv ArticleRpcServer) {
	s.RegisterService(&ArticleRpc_ServiceDesc, srv)
}

func _ArticleRpc_AddArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).AddArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_AddArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).AddArticle(ctx, req.(*ArticleNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_UpdateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).UpdateArticle(ctx, req.(*ArticleNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_DeleteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).DeleteArticle(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindArticleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_FindArticleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindArticleList(ctx, req.(*FindArticleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindArticlePublicList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindArticleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindArticlePublicList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_FindArticlePublicList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindArticlePublicList(ctx, req.(*FindArticleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindArticlePreviewList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindArticlePreviewListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindArticlePreviewList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_FindArticlePreviewList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindArticlePreviewList(ctx, req.(*FindArticlePreviewListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_RecycleArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecycleArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).RecycleArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_RecycleArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).RecycleArticle(ctx, req.(*RecycleArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_TopArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).TopArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_TopArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).TopArticle(ctx, req.(*TopArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_GetArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).GetArticle(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_GetArticleRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).GetArticleRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_GetArticleRecommend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).GetArticleRecommend(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_LikeArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).LikeArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_LikeArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).LikeArticle(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindUserLikeArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindUserLikeArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_FindUserLikeArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindUserLikeArticle(ctx, req.(*UserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_AnalysisArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).AnalysisArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_AnalysisArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).AnalysisArticle(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_AddCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).AddCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_AddCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).AddCategory(ctx, req.(*CategoryNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).UpdateCategory(ctx, req.(*CategoryNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_GetCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).GetCategory(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).DeleteCategory(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_FindCategoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindCategoryList(ctx, req.(*FindCategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_AddTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).AddTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_AddTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).AddTag(ctx, req.(*TagNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_UpdateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).UpdateTag(ctx, req.(*TagNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_GetTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).GetTag(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_DeleteTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).DeleteTag(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTagListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_FindTagList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindTagList(ctx, req.(*FindTagListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleRpc_ServiceDesc is the grpc.ServiceDesc for ArticleRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "articlerpc.ArticleRpc",
	HandlerType: (*ArticleRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddArticle",
			Handler:    _ArticleRpc_AddArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _ArticleRpc_UpdateArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _ArticleRpc_DeleteArticle_Handler,
		},
		{
			MethodName: "FindArticleList",
			Handler:    _ArticleRpc_FindArticleList_Handler,
		},
		{
			MethodName: "FindArticlePublicList",
			Handler:    _ArticleRpc_FindArticlePublicList_Handler,
		},
		{
			MethodName: "FindArticlePreviewList",
			Handler:    _ArticleRpc_FindArticlePreviewList_Handler,
		},
		{
			MethodName: "RecycleArticle",
			Handler:    _ArticleRpc_RecycleArticle_Handler,
		},
		{
			MethodName: "TopArticle",
			Handler:    _ArticleRpc_TopArticle_Handler,
		},
		{
			MethodName: "GetArticle",
			Handler:    _ArticleRpc_GetArticle_Handler,
		},
		{
			MethodName: "GetArticleRecommend",
			Handler:    _ArticleRpc_GetArticleRecommend_Handler,
		},
		{
			MethodName: "LikeArticle",
			Handler:    _ArticleRpc_LikeArticle_Handler,
		},
		{
			MethodName: "FindUserLikeArticle",
			Handler:    _ArticleRpc_FindUserLikeArticle_Handler,
		},
		{
			MethodName: "AnalysisArticle",
			Handler:    _ArticleRpc_AnalysisArticle_Handler,
		},
		{
			MethodName: "AddCategory",
			Handler:    _ArticleRpc_AddCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _ArticleRpc_UpdateCategory_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _ArticleRpc_GetCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _ArticleRpc_DeleteCategory_Handler,
		},
		{
			MethodName: "FindCategoryList",
			Handler:    _ArticleRpc_FindCategoryList_Handler,
		},
		{
			MethodName: "AddTag",
			Handler:    _ArticleRpc_AddTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _ArticleRpc_UpdateTag_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _ArticleRpc_GetTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _ArticleRpc_DeleteTag_Handler,
		},
		{
			MethodName: "FindTagList",
			Handler:    _ArticleRpc_FindTagList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article.proto",
}
