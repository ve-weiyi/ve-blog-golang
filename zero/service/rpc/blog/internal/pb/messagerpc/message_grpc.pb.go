// 声明 proto 语法版本，固定值

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: message.proto

// proto 包名

package messagerpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageRpc_AddChatMessage_FullMethodName      = "/messagerpc.MessageRpc/AddChatMessage"
	MessageRpc_UpdateChatMessage_FullMethodName   = "/messagerpc.MessageRpc/UpdateChatMessage"
	MessageRpc_DeletesChatMessage_FullMethodName  = "/messagerpc.MessageRpc/DeletesChatMessage"
	MessageRpc_GetChatMessage_FullMethodName      = "/messagerpc.MessageRpc/GetChatMessage"
	MessageRpc_FindChatMessageList_FullMethodName = "/messagerpc.MessageRpc/FindChatMessageList"
	MessageRpc_AddRemark_FullMethodName           = "/messagerpc.MessageRpc/AddRemark"
	MessageRpc_UpdateRemark_FullMethodName        = "/messagerpc.MessageRpc/UpdateRemark"
	MessageRpc_DeletesRemark_FullMethodName       = "/messagerpc.MessageRpc/DeletesRemark"
	MessageRpc_GetRemark_FullMethodName           = "/messagerpc.MessageRpc/GetRemark"
	MessageRpc_FindRemarkList_FullMethodName      = "/messagerpc.MessageRpc/FindRemarkList"
)

// MessageRpcClient is the client API for MessageRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageRpcClient interface {
	// 创建聊天记录
	AddChatMessage(ctx context.Context, in *ChatMessageNewReq, opts ...grpc.CallOption) (*ChatMessageDetails, error)
	// 更新聊天记录
	UpdateChatMessage(ctx context.Context, in *ChatMessageNewReq, opts ...grpc.CallOption) (*ChatMessageDetails, error)
	// 删除聊天记录
	DeletesChatMessage(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询聊天记录
	GetChatMessage(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ChatMessageDetails, error)
	// 查询聊天记录列表
	FindChatMessageList(ctx context.Context, in *FindChatMessageListReq, opts ...grpc.CallOption) (*FindChatMessageListResp, error)
	// 创建留言
	AddRemark(ctx context.Context, in *RemarkNewReq, opts ...grpc.CallOption) (*RemarkDetails, error)
	// 更新留言
	UpdateRemark(ctx context.Context, in *RemarkUpdateReq, opts ...grpc.CallOption) (*RemarkDetails, error)
	// 删除留言
	DeletesRemark(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询留言
	GetRemark(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*RemarkDetails, error)
	// 查询留言列表
	FindRemarkList(ctx context.Context, in *FindRemarkListReq, opts ...grpc.CallOption) (*FindRemarkListResp, error)
}

type messageRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageRpcClient(cc grpc.ClientConnInterface) MessageRpcClient {
	return &messageRpcClient{cc}
}

func (c *messageRpcClient) AddChatMessage(ctx context.Context, in *ChatMessageNewReq, opts ...grpc.CallOption) (*ChatMessageDetails, error) {
	out := new(ChatMessageDetails)
	err := c.cc.Invoke(ctx, MessageRpc_AddChatMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRpcClient) UpdateChatMessage(ctx context.Context, in *ChatMessageNewReq, opts ...grpc.CallOption) (*ChatMessageDetails, error) {
	out := new(ChatMessageDetails)
	err := c.cc.Invoke(ctx, MessageRpc_UpdateChatMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRpcClient) DeletesChatMessage(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, MessageRpc_DeletesChatMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRpcClient) GetChatMessage(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ChatMessageDetails, error) {
	out := new(ChatMessageDetails)
	err := c.cc.Invoke(ctx, MessageRpc_GetChatMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRpcClient) FindChatMessageList(ctx context.Context, in *FindChatMessageListReq, opts ...grpc.CallOption) (*FindChatMessageListResp, error) {
	out := new(FindChatMessageListResp)
	err := c.cc.Invoke(ctx, MessageRpc_FindChatMessageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRpcClient) AddRemark(ctx context.Context, in *RemarkNewReq, opts ...grpc.CallOption) (*RemarkDetails, error) {
	out := new(RemarkDetails)
	err := c.cc.Invoke(ctx, MessageRpc_AddRemark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRpcClient) UpdateRemark(ctx context.Context, in *RemarkUpdateReq, opts ...grpc.CallOption) (*RemarkDetails, error) {
	out := new(RemarkDetails)
	err := c.cc.Invoke(ctx, MessageRpc_UpdateRemark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRpcClient) DeletesRemark(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, MessageRpc_DeletesRemark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRpcClient) GetRemark(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*RemarkDetails, error) {
	out := new(RemarkDetails)
	err := c.cc.Invoke(ctx, MessageRpc_GetRemark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRpcClient) FindRemarkList(ctx context.Context, in *FindRemarkListReq, opts ...grpc.CallOption) (*FindRemarkListResp, error) {
	out := new(FindRemarkListResp)
	err := c.cc.Invoke(ctx, MessageRpc_FindRemarkList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageRpcServer is the server API for MessageRpc service.
// All implementations must embed UnimplementedMessageRpcServer
// for forward compatibility
type MessageRpcServer interface {
	// 创建聊天记录
	AddChatMessage(context.Context, *ChatMessageNewReq) (*ChatMessageDetails, error)
	// 更新聊天记录
	UpdateChatMessage(context.Context, *ChatMessageNewReq) (*ChatMessageDetails, error)
	// 删除聊天记录
	DeletesChatMessage(context.Context, *IdsReq) (*BatchResp, error)
	// 查询聊天记录
	GetChatMessage(context.Context, *IdReq) (*ChatMessageDetails, error)
	// 查询聊天记录列表
	FindChatMessageList(context.Context, *FindChatMessageListReq) (*FindChatMessageListResp, error)
	// 创建留言
	AddRemark(context.Context, *RemarkNewReq) (*RemarkDetails, error)
	// 更新留言
	UpdateRemark(context.Context, *RemarkUpdateReq) (*RemarkDetails, error)
	// 删除留言
	DeletesRemark(context.Context, *IdsReq) (*BatchResp, error)
	// 查询留言
	GetRemark(context.Context, *IdReq) (*RemarkDetails, error)
	// 查询留言列表
	FindRemarkList(context.Context, *FindRemarkListReq) (*FindRemarkListResp, error)
	mustEmbedUnimplementedMessageRpcServer()
}

// UnimplementedMessageRpcServer must be embedded to have forward compatible implementations.
type UnimplementedMessageRpcServer struct {
}

func (UnimplementedMessageRpcServer) AddChatMessage(context.Context, *ChatMessageNewReq) (*ChatMessageDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChatMessage not implemented")
}
func (UnimplementedMessageRpcServer) UpdateChatMessage(context.Context, *ChatMessageNewReq) (*ChatMessageDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatMessage not implemented")
}
func (UnimplementedMessageRpcServer) DeletesChatMessage(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletesChatMessage not implemented")
}
func (UnimplementedMessageRpcServer) GetChatMessage(context.Context, *IdReq) (*ChatMessageDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMessage not implemented")
}
func (UnimplementedMessageRpcServer) FindChatMessageList(context.Context, *FindChatMessageListReq) (*FindChatMessageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindChatMessageList not implemented")
}
func (UnimplementedMessageRpcServer) AddRemark(context.Context, *RemarkNewReq) (*RemarkDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRemark not implemented")
}
func (UnimplementedMessageRpcServer) UpdateRemark(context.Context, *RemarkUpdateReq) (*RemarkDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRemark not implemented")
}
func (UnimplementedMessageRpcServer) DeletesRemark(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletesRemark not implemented")
}
func (UnimplementedMessageRpcServer) GetRemark(context.Context, *IdReq) (*RemarkDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemark not implemented")
}
func (UnimplementedMessageRpcServer) FindRemarkList(context.Context, *FindRemarkListReq) (*FindRemarkListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRemarkList not implemented")
}
func (UnimplementedMessageRpcServer) mustEmbedUnimplementedMessageRpcServer() {}

// UnsafeMessageRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageRpcServer will
// result in compilation errors.
type UnsafeMessageRpcServer interface {
	mustEmbedUnimplementedMessageRpcServer()
}

func RegisterMessageRpcServer(s grpc.ServiceRegistrar, srv MessageRpcServer) {
	s.RegisterService(&MessageRpc_ServiceDesc, srv)
}

func _MessageRpc_AddChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessageNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRpcServer).AddChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageRpc_AddChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRpcServer).AddChatMessage(ctx, req.(*ChatMessageNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRpc_UpdateChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessageNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRpcServer).UpdateChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageRpc_UpdateChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRpcServer).UpdateChatMessage(ctx, req.(*ChatMessageNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRpc_DeletesChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRpcServer).DeletesChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageRpc_DeletesChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRpcServer).DeletesChatMessage(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRpc_GetChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRpcServer).GetChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageRpc_GetChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRpcServer).GetChatMessage(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRpc_FindChatMessageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindChatMessageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRpcServer).FindChatMessageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageRpc_FindChatMessageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRpcServer).FindChatMessageList(ctx, req.(*FindChatMessageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRpc_AddRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemarkNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRpcServer).AddRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageRpc_AddRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRpcServer).AddRemark(ctx, req.(*RemarkNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRpc_UpdateRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemarkUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRpcServer).UpdateRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageRpc_UpdateRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRpcServer).UpdateRemark(ctx, req.(*RemarkUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRpc_DeletesRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRpcServer).DeletesRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageRpc_DeletesRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRpcServer).DeletesRemark(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRpc_GetRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRpcServer).GetRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageRpc_GetRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRpcServer).GetRemark(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRpc_FindRemarkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRemarkListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRpcServer).FindRemarkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageRpc_FindRemarkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRpcServer).FindRemarkList(ctx, req.(*FindRemarkListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageRpc_ServiceDesc is the grpc.ServiceDesc for MessageRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messagerpc.MessageRpc",
	HandlerType: (*MessageRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddChatMessage",
			Handler:    _MessageRpc_AddChatMessage_Handler,
		},
		{
			MethodName: "UpdateChatMessage",
			Handler:    _MessageRpc_UpdateChatMessage_Handler,
		},
		{
			MethodName: "DeletesChatMessage",
			Handler:    _MessageRpc_DeletesChatMessage_Handler,
		},
		{
			MethodName: "GetChatMessage",
			Handler:    _MessageRpc_GetChatMessage_Handler,
		},
		{
			MethodName: "FindChatMessageList",
			Handler:    _MessageRpc_FindChatMessageList_Handler,
		},
		{
			MethodName: "AddRemark",
			Handler:    _MessageRpc_AddRemark_Handler,
		},
		{
			MethodName: "UpdateRemark",
			Handler:    _MessageRpc_UpdateRemark_Handler,
		},
		{
			MethodName: "DeletesRemark",
			Handler:    _MessageRpc_DeletesRemark_Handler,
		},
		{
			MethodName: "GetRemark",
			Handler:    _MessageRpc_GetRemark_Handler,
		},
		{
			MethodName: "FindRemarkList",
			Handler:    _MessageRpc_FindRemarkList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
