// 声明 proto 语法版本，固定值

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: website.proto

// proto 包名

package websiterpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebsiteRpc_GetUserDailyVisit_FullMethodName = "/websiterpc.WebsiteRpc/GetUserDailyVisit"
)

// WebsiteRpcClient is the client API for WebsiteRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebsiteRpcClient interface {
	// 用户日浏览量
	GetUserDailyVisit(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*UserDailyVisitRsp, error)
}

type websiteRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewWebsiteRpcClient(cc grpc.ClientConnInterface) WebsiteRpcClient {
	return &websiteRpcClient{cc}
}

func (c *websiteRpcClient) GetUserDailyVisit(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*UserDailyVisitRsp, error) {
	out := new(UserDailyVisitRsp)
	err := c.cc.Invoke(ctx, WebsiteRpc_GetUserDailyVisit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebsiteRpcServer is the server API for WebsiteRpc service.
// All implementations must embed UnimplementedWebsiteRpcServer
// for forward compatibility
type WebsiteRpcServer interface {
	// 用户日浏览量
	GetUserDailyVisit(context.Context, *EmptyReq) (*UserDailyVisitRsp, error)
	mustEmbedUnimplementedWebsiteRpcServer()
}

// UnimplementedWebsiteRpcServer must be embedded to have forward compatible implementations.
type UnimplementedWebsiteRpcServer struct {
}

func (UnimplementedWebsiteRpcServer) GetUserDailyVisit(context.Context, *EmptyReq) (*UserDailyVisitRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDailyVisit not implemented")
}
func (UnimplementedWebsiteRpcServer) mustEmbedUnimplementedWebsiteRpcServer() {}

// UnsafeWebsiteRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebsiteRpcServer will
// result in compilation errors.
type UnsafeWebsiteRpcServer interface {
	mustEmbedUnimplementedWebsiteRpcServer()
}

func RegisterWebsiteRpcServer(s grpc.ServiceRegistrar, srv WebsiteRpcServer) {
	s.RegisterService(&WebsiteRpc_ServiceDesc, srv)
}

func _WebsiteRpc_GetUserDailyVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsiteRpcServer).GetUserDailyVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsiteRpc_GetUserDailyVisit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsiteRpcServer).GetUserDailyVisit(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WebsiteRpc_ServiceDesc is the grpc.ServiceDesc for WebsiteRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebsiteRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "websiterpc.WebsiteRpc",
	HandlerType: (*WebsiteRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserDailyVisit",
			Handler:    _WebsiteRpc_GetUserDailyVisit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "website.proto",
}
