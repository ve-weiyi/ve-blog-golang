// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	account "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/account"
	api "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/api"
	article "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/article"
	auth "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/auth"
	category "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/category"
	chat "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/chat"
	comment "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/comment"
	friend_link "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/friend_link"
	menu "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/menu"
	mine "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/mine"
	operation_log "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/operation_log"
	page "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/page"
	photo "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/photo"
	photo_album "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/photo_album"
	remark "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/remark"
	role "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/role"
	tag "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/tag"
	talk "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/talk"
	upload "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/upload"
	website "github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/handler/website"
	"github.com/ve-weiyi/ve-blog-golang/zero/service/blog/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				// ping
				Method:  http.MethodGet,
				Path:    "/ping",
				Handler: PingHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 查询在线用户列表
				Method:  http.MethodPost,
				Path:    "/user/find_online_user_list",
				Handler: account.FindOnlineUserListHandler(serverCtx),
			},
			{
				// 获取用户分布地区
				Method:  http.MethodPost,
				Path:    "/user/find_user_areas",
				Handler: account.FindUserAreasHandler(serverCtx),
			},
			{
				// 查询用户列表
				Method:  http.MethodPost,
				Path:    "/user/find_user_list",
				Handler: account.FindUserListHandler(serverCtx),
			},
			{
				// 修改用户角色
				Method:  http.MethodPost,
				Path:    "/user/update_user_roles",
				Handler: account.UpdateUserRolesHandler(serverCtx),
			},
			{
				// 修改用户状态
				Method:  http.MethodPost,
				Path:    "/user/update_user_status",
				Handler: account.UpdateUserStatusHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 清空接口列表
				Method:  http.MethodPost,
				Path:    "/api/clean_api_list",
				Handler: api.CleanApiListHandler(serverCtx),
			},
			{
				// 创建api路由
				Method:  http.MethodPost,
				Path:    "/api/create_api",
				Handler: api.CreateApiHandler(serverCtx),
			},
			{
				// 删除api路由
				Method:  http.MethodDelete,
				Path:    "/api/delete_api",
				Handler: api.DeleteApiHandler(serverCtx),
			},
			{
				// 批量删除api路由
				Method:  http.MethodDelete,
				Path:    "/api/delete_api_list",
				Handler: api.DeleteApiListHandler(serverCtx),
			},
			{
				// 查询api路由
				Method:  http.MethodPost,
				Path:    "/api/find_api",
				Handler: api.FindApiHandler(serverCtx),
			},
			{
				// 分页获取api路由列表
				Method:  http.MethodPost,
				Path:    "/api/find_api_list",
				Handler: api.FindApiListHandler(serverCtx),
			},
			{
				// 同步api列表
				Method:  http.MethodPost,
				Path:    "/api/sync_api_list",
				Handler: api.SyncApiListHandler(serverCtx),
			},
			{
				// 更新api路由
				Method:  http.MethodPut,
				Path:    "/api/update_api",
				Handler: api.UpdateApiHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 删除文章-物理删除
				Method:  http.MethodPost,
				Path:    "/admin/article/delete_article",
				Handler: article.DeleteArticleHandler(serverCtx),
			},
			{
				// 查询文章
				Method:  http.MethodPost,
				Path:    "/admin/article/find_article",
				Handler: article.FindArticleHandler(serverCtx),
			},
			{
				// 分页获取文章列表
				Method:  http.MethodPost,
				Path:    "/admin/article/find_article_list",
				Handler: article.FindArticleListHandler(serverCtx),
			},
			{
				// 删除文章-逻辑删除
				Method:  http.MethodPost,
				Path:    "/admin/article/pre_delete_article",
				Handler: article.PreDeleteArticleHandler(serverCtx),
			},
			{
				// 保存文章
				Method:  http.MethodPost,
				Path:    "/admin/article/save_article",
				Handler: article.SaveArticleHandler(serverCtx),
			},
			{
				// 置顶文章
				Method:  http.MethodPost,
				Path:    "/admin/article/top_article",
				Handler: article.TopArticleHandler(serverCtx),
			},
			{
				// 文章归档(时间轴)
				Method:  http.MethodPost,
				Path:    "/article/article_archives",
				Handler: article.FindArticleArchivesHandler(serverCtx),
			},
			{
				// 通过标签或者id获取文章列表
				Method:  http.MethodPost,
				Path:    "/article/article_classify_category",
				Handler: article.FindArticleClassifyCategoryHandler(serverCtx),
			},
			{
				// 通过标签或者id获取文章列表
				Method:  http.MethodPost,
				Path:    "/article/article_classify_tag",
				Handler: article.FindArticleClassifyTagHandler(serverCtx),
			},
			{
				// 分页获取文章列表
				Method:  http.MethodPost,
				Path:    "/article/find_article_home_list",
				Handler: article.FindArticleHomeListHandler(serverCtx),
			},
			{
				// 文章相关推荐
				Method:  http.MethodPost,
				Path:    "/article/find_article_recommend",
				Handler: article.FindArticleRecommendHandler(serverCtx),
			},
			{
				// 点赞文章
				Method:  http.MethodPost,
				Path:    "/article/like_article",
				Handler: article.LikeArticleHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 登录
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: auth.LoginHandler(serverCtx),
			},
			{
				// 注销
				Method:  http.MethodPost,
				Path:    "/logoff",
				Handler: auth.LogoffHandler(serverCtx),
			},
			{
				// 登出
				Method:  http.MethodPost,
				Path:    "/logout",
				Handler: auth.LogoutHandler(serverCtx),
			},
			{
				// 第三方登录授权地址
				Method:  http.MethodPost,
				Path:    "/oauth_authorize_url",
				Handler: auth.OauthAuthorizeUrlHandler(serverCtx),
			},
			{
				// 第三方登录
				Method:  http.MethodPost,
				Path:    "/oauth_login",
				Handler: auth.OauthLoginHandler(serverCtx),
			},
			{
				// 注册
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: auth.RegisterHandler(serverCtx),
			},
			{
				// 重置密码
				Method:  http.MethodPost,
				Path:    "/reset_password",
				Handler: auth.ResetPasswordHandler(serverCtx),
			},
			{
				// 发送忘记密码邮件
				Method:  http.MethodPost,
				Path:    "/send_forget_email",
				Handler: auth.SendForgetEmailHandler(serverCtx),
			},
			{
				// 发送注册账号邮件
				Method:  http.MethodPost,
				Path:    "/send_register_email",
				Handler: auth.SendRegisterEmailHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 创建文章分类
				Method:  http.MethodPost,
				Path:    "/category/create_category",
				Handler: category.CreateCategoryHandler(serverCtx),
			},
			{
				// 删除文章分类
				Method:  http.MethodDelete,
				Path:    "/category/delete_category",
				Handler: category.DeleteCategoryHandler(serverCtx),
			},
			{
				// 批量删除文章分类
				Method:  http.MethodDelete,
				Path:    "/category/delete_category_list",
				Handler: category.DeleteCategoryListHandler(serverCtx),
			},
			{
				// 查询文章分类
				Method:  http.MethodPost,
				Path:    "/category/find_category",
				Handler: category.FindCategoryHandler(serverCtx),
			},
			{
				// 分页获取文章分类列表
				Method:  http.MethodPost,
				Path:    "/category/find_category_list",
				Handler: category.FindCategoryListHandler(serverCtx),
			},
			{
				// 更新文章分类
				Method:  http.MethodPut,
				Path:    "/category/update_category",
				Handler: category.UpdateCategoryHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 查询聊天记录
				Method:  http.MethodPost,
				Path:    "/api/v1/chat/records",
				Handler: chat.FindChatRecordsHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 创建评论
				Method:  http.MethodPost,
				Path:    "/comment/create_comment",
				Handler: comment.CreateCommentHandler(serverCtx),
			},
			{
				// 删除评论
				Method:  http.MethodDelete,
				Path:    "/comment/delete_comment",
				Handler: comment.DeleteCommentHandler(serverCtx),
			},
			{
				// 批量删除评论
				Method:  http.MethodDelete,
				Path:    "/comment/delete_comment_list",
				Handler: comment.DeleteCommentListHandler(serverCtx),
			},
			{
				// 查询评论
				Method:  http.MethodPost,
				Path:    "/comment/find_comment",
				Handler: comment.FindCommentHandler(serverCtx),
			},
			{
				// 查询评论列表(后台)
				Method:  http.MethodPost,
				Path:    "/comment/find_comment_back_list",
				Handler: comment.FindCommentBackListHandler(serverCtx),
			},
			{
				// 查询评论列表
				Method:  http.MethodPost,
				Path:    "/comment/find_comment_list",
				Handler: comment.FindCommentListHandler(serverCtx),
			},
			{
				// 查询评论回复列表
				Method:  http.MethodPost,
				Path:    "/comment/find_comment_reply_list",
				Handler: comment.FindCommentReplyListHandler(serverCtx),
			},
			{
				// 点赞评论
				Method:  http.MethodPost,
				Path:    "/comment/like_comment",
				Handler: comment.LikeCommentHandler(serverCtx),
			},
			{
				// 更新评论
				Method:  http.MethodPut,
				Path:    "/comment/update_comment",
				Handler: comment.UpdateCommentHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 创建友链
				Method:  http.MethodPost,
				Path:    "/friend_link/create_friend_link",
				Handler: friend_link.CreateFriendLinkHandler(serverCtx),
			},
			{
				// 删除友链
				Method:  http.MethodDelete,
				Path:    "/friend_link/delete_friend_link",
				Handler: friend_link.DeleteFriendLinkHandler(serverCtx),
			},
			{
				// 批量删除友链
				Method:  http.MethodDelete,
				Path:    "/friend_link/delete_friend_link_list",
				Handler: friend_link.DeleteFriendLinkListHandler(serverCtx),
			},
			{
				// 查询友链
				Method:  http.MethodPost,
				Path:    "/friend_link/find_friend_link",
				Handler: friend_link.FindFriendLinkHandler(serverCtx),
			},
			{
				// 分页获取友链列表
				Method:  http.MethodPost,
				Path:    "/friend_link/find_friend_link_list",
				Handler: friend_link.FindFriendLinkListHandler(serverCtx),
			},
			{
				// 更新友链
				Method:  http.MethodPut,
				Path:    "/friend_link/update_friend_link",
				Handler: friend_link.UpdateFriendLinkHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 清空菜单列表
				Method:  http.MethodPost,
				Path:    "/menu/clean_menu_list",
				Handler: menu.CleanMenuListHandler(serverCtx),
			},
			{
				// 创建菜单
				Method:  http.MethodPost,
				Path:    "/menu/create_menu",
				Handler: menu.CreateMenuHandler(serverCtx),
			},
			{
				// 删除菜单
				Method:  http.MethodDelete,
				Path:    "/menu/delete_menu",
				Handler: menu.DeleteMenuHandler(serverCtx),
			},
			{
				// 批量删除菜单
				Method:  http.MethodDelete,
				Path:    "/menu/delete_menu_list",
				Handler: menu.DeleteMenuListHandler(serverCtx),
			},
			{
				// 查询菜单
				Method:  http.MethodPost,
				Path:    "/menu/find_menu",
				Handler: menu.FindMenuHandler(serverCtx),
			},
			{
				// 分页获取菜单列表
				Method:  http.MethodPost,
				Path:    "/menu/find_menu_list",
				Handler: menu.FindMenuListHandler(serverCtx),
			},
			{
				// 同步菜单列表
				Method:  http.MethodPost,
				Path:    "/menu/sync_menu_list",
				Handler: menu.SyncMenuListHandler(serverCtx),
			},
			{
				// 更新菜单
				Method:  http.MethodPut,
				Path:    "/menu/update_menu",
				Handler: menu.UpdateMenuHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 批量删除登录历史
				Method:  http.MethodDelete,
				Path:    "/user/delete_login_history_list",
				Handler: mine.DeleteUserLoginHistoryListHandler(serverCtx),
			},
			{
				// 获取用户接口权限
				Method:  http.MethodGet,
				Path:    "/user/get_user_apis",
				Handler: mine.GetUserApisHandler(serverCtx),
			},
			{
				// 获取用户信息
				Method:  http.MethodGet,
				Path:    "/user/get_user_info",
				Handler: mine.GetUserInfoHandler(serverCtx),
			},
			{
				// 获取用户菜单权限
				Method:  http.MethodGet,
				Path:    "/user/get_user_menus",
				Handler: mine.GetUserMenusHandler(serverCtx),
			},
			{
				// 获取用户角色
				Method:  http.MethodGet,
				Path:    "/user/get_user_roles",
				Handler: mine.GetUserRoleHandler(serverCtx),
			},
			{
				// 查询用户登录历史
				Method:  http.MethodPost,
				Path:    "/user/login_history",
				Handler: mine.FindUserLoginHistoryListHandler(serverCtx),
			},
			{
				// 更换用户头像
				Method:  http.MethodPost,
				Path:    "/user/update_user_avatar",
				Handler: mine.UpdateUserAvatarHandler(serverCtx),
			},
			{
				// 修改用户信息
				Method:  http.MethodPost,
				Path:    "/user/update_user_info",
				Handler: mine.UpdateUserInfoHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 创建操作记录
				Method:  http.MethodPost,
				Path:    "/operation_log/create_operation_log",
				Handler: operation_log.CreateOperationLogHandler(serverCtx),
			},
			{
				// 删除操作记录
				Method:  http.MethodDelete,
				Path:    "/operation_log/delete_operation_log",
				Handler: operation_log.DeleteOperationLogHandler(serverCtx),
			},
			{
				// 批量删除操作记录
				Method:  http.MethodDelete,
				Path:    "/operation_log/delete_operation_log_list",
				Handler: operation_log.DeleteOperationLogListHandler(serverCtx),
			},
			{
				// 查询操作记录
				Method:  http.MethodPost,
				Path:    "/operation_log/find_operation_log",
				Handler: operation_log.FindOperationLogHandler(serverCtx),
			},
			{
				// 分页获取操作记录列表
				Method:  http.MethodPost,
				Path:    "/operation_log/find_operation_log_list",
				Handler: operation_log.FindOperationLogListHandler(serverCtx),
			},
			{
				// 更新操作记录
				Method:  http.MethodPut,
				Path:    "/operation_log/update_operation_log",
				Handler: operation_log.UpdateOperationLogHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 创建页面
				Method:  http.MethodPost,
				Path:    "/page/create_page",
				Handler: page.CreatePageHandler(serverCtx),
			},
			{
				// 删除页面
				Method:  http.MethodDelete,
				Path:    "/page/delete_page",
				Handler: page.DeletePageHandler(serverCtx),
			},
			{
				// 批量删除页面
				Method:  http.MethodDelete,
				Path:    "/page/delete_page_list",
				Handler: page.DeletePageListHandler(serverCtx),
			},
			{
				// 查询页面
				Method:  http.MethodPost,
				Path:    "/page/find_page",
				Handler: page.FindPageHandler(serverCtx),
			},
			{
				// 分页获取页面列表
				Method:  http.MethodPost,
				Path:    "/page/find_page_list",
				Handler: page.FindPageListHandler(serverCtx),
			},
			{
				// 更新页面
				Method:  http.MethodPut,
				Path:    "/page/update_page",
				Handler: page.UpdatePageHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 创建照片
				Method:  http.MethodPost,
				Path:    "/photo/create_photo",
				Handler: photo.CreatePhotoHandler(serverCtx),
			},
			{
				// 删除照片
				Method:  http.MethodDelete,
				Path:    "/photo/delete_photo",
				Handler: photo.DeletePhotoHandler(serverCtx),
			},
			{
				// 批量删除照片
				Method:  http.MethodDelete,
				Path:    "/photo/delete_photo_list",
				Handler: photo.DeletePhotoListHandler(serverCtx),
			},
			{
				// 查询照片
				Method:  http.MethodPost,
				Path:    "/photo/find_photo",
				Handler: photo.FindPhotoHandler(serverCtx),
			},
			{
				// 分页获取照片列表
				Method:  http.MethodPost,
				Path:    "/photo/find_photo_list",
				Handler: photo.FindPhotoListHandler(serverCtx),
			},
			{
				// 更新照片
				Method:  http.MethodPut,
				Path:    "/photo/update_photo",
				Handler: photo.UpdatePhotoHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 创建相册
				Method:  http.MethodPost,
				Path:    "/photo_album/create_photo_album",
				Handler: photo_album.CreatePhotoAlbumHandler(serverCtx),
			},
			{
				// 删除相册
				Method:  http.MethodDelete,
				Path:    "/photo_album/delete_photo_album",
				Handler: photo_album.DeletePhotoAlbumHandler(serverCtx),
			},
			{
				// 批量删除相册
				Method:  http.MethodDelete,
				Path:    "/photo_album/delete_photo_album_list",
				Handler: photo_album.DeletePhotoAlbumListHandler(serverCtx),
			},
			{
				// 查询相册
				Method:  http.MethodPost,
				Path:    "/photo_album/find_photo_album",
				Handler: photo_album.FindPhotoAlbumHandler(serverCtx),
			},
			{
				// 分页获取相册列表
				Method:  http.MethodPost,
				Path:    "/photo_album/find_photo_album_list",
				Handler: photo_album.FindPhotoAlbumListHandler(serverCtx),
			},
			{
				// 更新相册
				Method:  http.MethodPut,
				Path:    "/photo_album/update_photo_album",
				Handler: photo_album.UpdatePhotoAlbumHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 创建留言
				Method:  http.MethodPost,
				Path:    "/remark/create_remark",
				Handler: remark.CreateRemarkHandler(serverCtx),
			},
			{
				// 删除留言
				Method:  http.MethodDelete,
				Path:    "/remark/delete_remark",
				Handler: remark.DeleteRemarkHandler(serverCtx),
			},
			{
				// 批量删除留言
				Method:  http.MethodDelete,
				Path:    "/remark/delete_remark_list",
				Handler: remark.DeleteRemarkListHandler(serverCtx),
			},
			{
				// 查询留言
				Method:  http.MethodPost,
				Path:    "/remark/find_remark",
				Handler: remark.FindRemarkHandler(serverCtx),
			},
			{
				// 分页获取留言列表
				Method:  http.MethodPost,
				Path:    "/remark/find_remark_list",
				Handler: remark.FindRemarkListHandler(serverCtx),
			},
			{
				// 更新留言
				Method:  http.MethodPut,
				Path:    "/remark/update_remark",
				Handler: remark.UpdateRemarkHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 创建角色
				Method:  http.MethodPost,
				Path:    "/role/create_role",
				Handler: role.CreateRoleHandler(serverCtx),
			},
			{
				// 删除角色
				Method:  http.MethodDelete,
				Path:    "/role/delete_role",
				Handler: role.DeleteRoleHandler(serverCtx),
			},
			{
				// 批量删除角色
				Method:  http.MethodDelete,
				Path:    "/role/delete_role_list",
				Handler: role.DeleteRoleListHandler(serverCtx),
			},
			{
				// 查询角色
				Method:  http.MethodPost,
				Path:    "/role/find_role",
				Handler: role.FindRoleHandler(serverCtx),
			},
			{
				// 分页获取角色列表
				Method:  http.MethodPost,
				Path:    "/role/find_role_list",
				Handler: role.FindRoleListHandler(serverCtx),
			},
			{
				// 获取角色资源列表
				Method:  http.MethodPost,
				Path:    "/role/find_role_resources",
				Handler: role.FindRoleResourcesHandler(serverCtx),
			},
			{
				// 更新角色
				Method:  http.MethodPut,
				Path:    "/role/update_role",
				Handler: role.UpdateRoleHandler(serverCtx),
			},
			{
				// 更新角色接口权限
				Method:  http.MethodPost,
				Path:    "/role/update_role_apis",
				Handler: role.UpdateRoleApisHandler(serverCtx),
			},
			{
				// 更新角色菜单权限
				Method:  http.MethodPost,
				Path:    "/role/update_role_menus",
				Handler: role.UpdateRoleMenusHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 创建标签
				Method:  http.MethodPost,
				Path:    "/tag/create_tag",
				Handler: tag.CreateTagHandler(serverCtx),
			},
			{
				// 删除标签
				Method:  http.MethodDelete,
				Path:    "/tag/delete_tag",
				Handler: tag.DeleteTagHandler(serverCtx),
			},
			{
				// 批量删除标签
				Method:  http.MethodDelete,
				Path:    "/tag/delete_tag_list",
				Handler: tag.DeleteTagListHandler(serverCtx),
			},
			{
				// 查询标签
				Method:  http.MethodPost,
				Path:    "/tag/find_tag",
				Handler: tag.FindTagHandler(serverCtx),
			},
			{
				// 分页获取标签列表
				Method:  http.MethodPost,
				Path:    "/tag/find_tag_list",
				Handler: tag.FindTagListHandler(serverCtx),
			},
			{
				// 更新标签
				Method:  http.MethodPut,
				Path:    "/tag/update_tag",
				Handler: tag.UpdateTagHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 创建说说
				Method:  http.MethodPost,
				Path:    "/talk/create_talk",
				Handler: talk.CreateTalkHandler(serverCtx),
			},
			{
				// 删除说说
				Method:  http.MethodDelete,
				Path:    "/talk/delete_talk",
				Handler: talk.DeleteTalkHandler(serverCtx),
			},
			{
				// 批量删除说说
				Method:  http.MethodDelete,
				Path:    "/talk/delete_talk_list",
				Handler: talk.DeleteTalkListHandler(serverCtx),
			},
			{
				// 查询说说
				Method:  http.MethodPost,
				Path:    "/talk/find_talk",
				Handler: talk.FindTalkHandler(serverCtx),
			},
			{
				// 分页获取说说列表
				Method:  http.MethodPost,
				Path:    "/talk/find_talk_list",
				Handler: talk.FindTalkListHandler(serverCtx),
			},
			{
				// 点赞说说
				Method:  http.MethodPut,
				Path:    "/talk/like_talk",
				Handler: talk.LikeTalkHandler(serverCtx),
			},
			{
				// 更新说说
				Method:  http.MethodPut,
				Path:    "/talk/update_talk",
				Handler: talk.UpdateTalkHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 上传文件
				Method:  http.MethodPost,
				Path:    "/upload/upload_file",
				Handler: upload.UploadFileHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 获取后台首页信息
				Method:  http.MethodGet,
				Path:    "/admin",
				Handler: website.GetAdminHomeInfoHandler(serverCtx),
			},
			{
				// 更新关于我的信息
				Method:  http.MethodPut,
				Path:    "/admin/about_me",
				Handler: website.UpdateAboutMeHandler(serverCtx),
			},
			{
				// 获取服务器信息
				Method:  http.MethodGet,
				Path:    "/admin/system_state",
				Handler: website.GetSystemStateHandler(serverCtx),
			},
			{
				// 更新网站配置
				Method:  http.MethodPut,
				Path:    "/admin/update_website_config",
				Handler: website.UpdateWebsiteConfigHandler(serverCtx),
			},
			{
				// 获取博客前台首页信息
				Method:  http.MethodGet,
				Path:    "/blog",
				Handler: website.GetBlogHomeInfoHandler(serverCtx),
			},
			{
				// 获取关于我的信息
				Method:  http.MethodGet,
				Path:    "/blog/about_me",
				Handler: website.GetAboutMeHandler(serverCtx),
			},
			{
				// 获取网站配置
				Method:  http.MethodGet,
				Path:    "/blog/get_website_config",
				Handler: website.GetWebsiteConfigHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)
}
