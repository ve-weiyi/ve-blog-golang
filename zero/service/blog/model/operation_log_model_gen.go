// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"time"

	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

var (
	cacheOperationLogIdPrefix = "cache:operationLog:id:"
)

type (
	operationLogModel interface {
		// 切换事务操作
		WithTransaction(tx *gorm.DB) (out OperationLogModel)
		Insert(ctx context.Context, in *OperationLog) (*OperationLog, error)
		InsertBatch(ctx context.Context, in ...*OperationLog) (rows int64, err error)
		First(ctx context.Context, conditions string, args ...interface{}) (out *OperationLog, err error)
		FindCount(ctx context.Context, conditions string, args ...interface{}) (count int64, err error)
		FindALL(ctx context.Context, conditions string, args ...interface{}) (out []*OperationLog, err error)
		FindList(ctx context.Context, limit int, offset int, sorts string, conditions string, args ...interface{}) (out []*OperationLog, err error)
		FindOne(ctx context.Context, id int64) (*OperationLog, error)
		Update(ctx context.Context, data *OperationLog) (*OperationLog, error)
		UpdateColumns(ctx context.Context, id int64, columns map[string]interface{}) (rows int64, err error)
		Save(ctx context.Context, data *OperationLog) (*OperationLog, error)
		Delete(ctx context.Context, id int64) (rows int64, err error)
		DeleteBatch(ctx context.Context, conditions string, args ...interface{}) (rows int64, err error)
		// add extra method in here

	}

	defaultOperationLogModel struct {
		DbEngin    *gorm.DB
		CacheEngin *redis.Client
		table      string
	}

	OperationLog struct {
		Id             int64     `gorm:"column:id"`              // 主键id
		UserId         int64     `gorm:"column:user_id"`         // 用户id
		Nickname       string    `gorm:"column:nickname"`        // 用户昵称
		IpAddress      string    `gorm:"column:ip_address"`      // 操作ip
		IpSource       string    `gorm:"column:ip_source"`       // 操作地址
		OptModule      string    `gorm:"column:opt_module"`      // 操作模块
		OptDesc        string    `gorm:"column:opt_desc"`        // 操作描述
		RequestUrl     string    `gorm:"column:request_url"`     // 请求地址
		RequestMethod  string    `gorm:"column:request_method"`  // 请求方式
		RequestHeader  string    `gorm:"column:request_header"`  // 请求头参数
		RequestData    string    `gorm:"column:request_data"`    // 请求参数
		ResponseData   string    `gorm:"column:response_data"`   // 返回数据
		ResponseStatus int64     `gorm:"column:response_status"` // 响应状态码
		Cost           string    `gorm:"column:cost"`            // 耗时（ms）
		CreatedAt      time.Time `gorm:"column:created_at"`      // 创建时间
		UpdatedAt      time.Time `gorm:"column:updated_at"`      // 更新时间
	}
)

func newOperationLogModel(db *gorm.DB, cache *redis.Client) *defaultOperationLogModel {
	return &defaultOperationLogModel{
		DbEngin:    db,
		CacheEngin: cache,
		table:      "`operation_log`",
	}
}

// 切换事务操作
func (m *defaultOperationLogModel) WithTransaction(tx *gorm.DB) (out OperationLogModel) {
	return NewOperationLogModel(tx, m.CacheEngin)
}

// 插入OperationLog记录
func (m *defaultOperationLogModel) Insert(ctx context.Context, in *OperationLog) (out *OperationLog, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	err = db.Create(&in).Error
	if err != nil {
		return nil, err
	}
	return in, err
}

// 插入OperationLog记录
func (m *defaultOperationLogModel) InsertBatch(ctx context.Context, in ...*OperationLog) (rows int64, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	err = db.CreateInBatches(&in, len(in)).Error
	if err != nil {
		return 0, err
	}
	return rows, err
}

// 更新OperationLog记录
func (m *defaultOperationLogModel) Update(ctx context.Context, in *OperationLog) (out *OperationLog, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	err = db.Updates(&in).Error
	if err != nil {
		return nil, err
	}
	return in, err
}

// 更新OperationLog记录
func (m *defaultOperationLogModel) UpdateColumns(ctx context.Context, id int64, columns map[string]interface{}) (rows int64, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	result := db.Where("`id` = ?", id).UpdateColumns(&columns)
	if result.Error != nil {
		return 0, err
	}

	return result.RowsAffected, err
}

// 更新OperationLog记录
func (m *defaultOperationLogModel) Save(ctx context.Context, in *OperationLog) (out *OperationLog, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	err = db.Save(&in).Error
	if err != nil {
		return nil, err
	}
	return in, err
}

// 删除OperationLog记录
func (m *defaultOperationLogModel) Delete(ctx context.Context, id int64) (rows int64, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	db = db.Where("id = ?", id)

	query := db.Delete(&OperationLog{})
	return query.RowsAffected, query.Error
}

// 删除OperationLog记录
func (m *defaultOperationLogModel) DeleteBatch(ctx context.Context, conditions string, args ...interface{}) (rows int64, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	// 如果有条件语句
	if len(conditions) != 0 {
		db = db.Where(conditions, args...)
	}

	result := db.Delete(&OperationLog{})
	return result.RowsAffected, result.Error
}

// 查询OperationLog记录
func (m *defaultOperationLogModel) First(ctx context.Context, conditions string, args ...interface{}) (out *OperationLog, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	// 如果有条件语句
	if len(conditions) != 0 {
		db = db.Where(conditions, args...)
	}

	out = new(OperationLog)
	err = db.First(&out).Error
	if err != nil {
		return nil, err
	}
	return out, err
}

// 查询OperationLog总数
func (m *defaultOperationLogModel) FindCount(ctx context.Context, conditions string, args ...interface{}) (count int64, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	// 如果有条件语句
	if len(conditions) != 0 {
		db = db.Where(conditions, args...)
	}

	err = db.Model(&OperationLog{}).Count(&count).Error
	if err != nil {
		return 0, err
	}
	return count, nil
}

// 查询OperationLog列表
func (m *defaultOperationLogModel) FindALL(ctx context.Context, conditions string, args ...interface{}) (out []*OperationLog, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	// 如果有条件语句
	if len(conditions) != 0 {
		db = db.Where(conditions, args...)
	}

	err = db.Find(&out).Error
	if err != nil {
		return nil, err
	}
	return out, err
}

// 分页查询OperationLog记录
func (m *defaultOperationLogModel) FindList(ctx context.Context, limit int, offset int, sorts string, conditions string, args ...interface{}) (list []*OperationLog, err error) {
	// 创建db
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	// 如果有搜索条件
	if len(conditions) != 0 {
		db = db.Where(conditions, args...)
	}

	// 如果有排序参数
	if len(sorts) != 0 {
		db = db.Order(sorts)
	}

	// 如果有分页参数
	if limit > 0 || offset > 0 {
		db = db.Limit(limit).Offset(offset)
	}

	// 查询数据
	err = db.Find(&list).Error
	if err != nil {
		return nil, err
	}

	return list, nil
}

// 查询OperationLog记录
func (m *defaultOperationLogModel) FindOne(ctx context.Context, id int64) (out *OperationLog, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	// 如果有条件语句
	err = db.Where("`id` = ?", id).First(&out).Error
	if err != nil {
		return nil, err
	}

	return out, err
}

func (m *defaultOperationLogModel) TableName() string {
	return m.table
}
