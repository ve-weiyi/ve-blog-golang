// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"time"

	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

var (
	cacheRemarkIdPrefix = "cache:remark:id:"
)

type (
	remarkModel interface {
		// 切换事务操作
		WithTransaction(tx *gorm.DB) (out RemarkModel)
		Insert(ctx context.Context, in *Remark) (*Remark, error)
		InsertBatch(ctx context.Context, in ...*Remark) (rows int64, err error)
		First(ctx context.Context, conditions string, args ...interface{}) (out *Remark, err error)
		FindCount(ctx context.Context, conditions string, args ...interface{}) (count int64, err error)
		FindALL(ctx context.Context, conditions string, args ...interface{}) (out []*Remark, err error)
		FindList(ctx context.Context, limit int, offset int, sorts string, conditions string, args ...interface{}) (out []*Remark, err error)
		FindOne(ctx context.Context, id int64) (*Remark, error)
		Update(ctx context.Context, data *Remark) (*Remark, error)
		UpdateColumns(ctx context.Context, id int64, columns map[string]interface{}) (rows int64, err error)
		Save(ctx context.Context, data *Remark) (*Remark, error)
		Delete(ctx context.Context, id int64) (rows int64, err error)
		DeleteBatch(ctx context.Context, conditions string, args ...interface{}) (rows int64, err error)
		// add extra method in here

	}

	defaultRemarkModel struct {
		DbEngin    *gorm.DB
		CacheEngin *redis.Client
		table      string
	}

	Remark struct {
		Id             int64     `gorm:"column:id"`              // 主键id
		Nickname       string    `gorm:"column:nickname"`        // 昵称
		Avatar         string    `gorm:"column:avatar"`          // 头像
		MessageContent string    `gorm:"column:message_content"` // 留言内容
		IpAddress      string    `gorm:"column:ip_address"`      // 用户ip
		IpSource       string    `gorm:"column:ip_source"`       // 用户地址
		Time           int64     `gorm:"column:time"`            // 弹幕速度
		IsReview       int64     `gorm:"column:is_review"`       // 是否审核
		CreatedAt      time.Time `gorm:"column:created_at"`      // 发布时间
		UpdatedAt      time.Time `gorm:"column:updated_at"`      // 更新时间
	}
)

func newRemarkModel(db *gorm.DB, cache *redis.Client) *defaultRemarkModel {
	return &defaultRemarkModel{
		DbEngin:    db,
		CacheEngin: cache,
		table:      "`remark`",
	}
}

// 切换事务操作
func (m *defaultRemarkModel) WithTransaction(tx *gorm.DB) (out RemarkModel) {
	return NewRemarkModel(tx, m.CacheEngin)
}

// 插入Remark记录
func (m *defaultRemarkModel) Insert(ctx context.Context, in *Remark) (out *Remark, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	err = db.Create(&in).Error
	if err != nil {
		return nil, err
	}
	return in, err
}

// 插入Remark记录
func (m *defaultRemarkModel) InsertBatch(ctx context.Context, in ...*Remark) (rows int64, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	err = db.CreateInBatches(&in, len(in)).Error
	if err != nil {
		return 0, err
	}
	return rows, err
}

// 更新Remark记录
func (m *defaultRemarkModel) Update(ctx context.Context, in *Remark) (out *Remark, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	err = db.Updates(&in).Error
	if err != nil {
		return nil, err
	}
	return in, err
}

// 更新Remark记录
func (m *defaultRemarkModel) UpdateColumns(ctx context.Context, id int64, columns map[string]interface{}) (rows int64, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	result := db.Where("`id` = ?", id).UpdateColumns(&columns)
	if result.Error != nil {
		return 0, err
	}

	return result.RowsAffected, err
}

// 更新Remark记录
func (m *defaultRemarkModel) Save(ctx context.Context, in *Remark) (out *Remark, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	err = db.Save(&in).Error
	if err != nil {
		return nil, err
	}
	return in, err
}

// 删除Remark记录
func (m *defaultRemarkModel) Delete(ctx context.Context, id int64) (rows int64, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	db = db.Where("id = ?", id)

	query := db.Delete(&Remark{})
	return query.RowsAffected, query.Error
}

// 删除Remark记录
func (m *defaultRemarkModel) DeleteBatch(ctx context.Context, conditions string, args ...interface{}) (rows int64, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	// 如果有条件语句
	if len(conditions) != 0 {
		db = db.Where(conditions, args...)
	}

	result := db.Delete(&Remark{})
	return result.RowsAffected, result.Error
}

// 查询Remark记录
func (m *defaultRemarkModel) First(ctx context.Context, conditions string, args ...interface{}) (out *Remark, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	// 如果有条件语句
	if len(conditions) != 0 {
		db = db.Where(conditions, args...)
	}

	out = new(Remark)
	err = db.First(&out).Error
	if err != nil {
		return nil, err
	}
	return out, err
}

// 查询Remark总数
func (m *defaultRemarkModel) FindCount(ctx context.Context, conditions string, args ...interface{}) (count int64, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	// 如果有条件语句
	if len(conditions) != 0 {
		db = db.Where(conditions, args...)
	}

	err = db.Model(&Remark{}).Count(&count).Error
	if err != nil {
		return 0, err
	}
	return count, nil
}

// 查询Remark列表
func (m *defaultRemarkModel) FindALL(ctx context.Context, conditions string, args ...interface{}) (out []*Remark, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	// 如果有条件语句
	if len(conditions) != 0 {
		db = db.Where(conditions, args...)
	}

	err = db.Find(&out).Error
	if err != nil {
		return nil, err
	}
	return out, err
}

// 分页查询Remark记录
func (m *defaultRemarkModel) FindList(ctx context.Context, limit int, offset int, sorts string, conditions string, args ...interface{}) (list []*Remark, err error) {
	// 创建db
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	// 如果有搜索条件
	if len(conditions) != 0 {
		db = db.Where(conditions, args...)
	}

	// 如果有排序参数
	if len(sorts) != 0 {
		db = db.Order(sorts)
	}

	// 如果有分页参数
	if limit > 0 || offset > 0 {
		db = db.Limit(limit).Offset(offset)
	}

	// 查询数据
	err = db.Find(&list).Error
	if err != nil {
		return nil, err
	}

	return list, nil
}

// 查询Remark记录
func (m *defaultRemarkModel) FindOne(ctx context.Context, id int64) (out *Remark, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	// 如果有条件语句
	err = db.Where("`id` = ?", id).First(&out).Error
	if err != nil {
		return nil, err
	}

	return out, err
}

func (m *defaultRemarkModel) TableName() string {
	return m.table
}
