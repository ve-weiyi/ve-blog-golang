// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"time"

	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

var (
	cachePageIdPrefix = "cache:page:id:"
)

type (
	pageModel interface {
		// 切换事务操作
		WithTransaction(tx *gorm.DB) (out PageModel)
		Insert(ctx context.Context, in *Page) (*Page, error)
		InsertBatch(ctx context.Context, in ...*Page) (rows int64, err error)
		First(ctx context.Context, conditions string, args ...interface{}) (out *Page, err error)
		FindCount(ctx context.Context, conditions string, args ...interface{}) (count int64, err error)
		FindALL(ctx context.Context, conditions string, args ...interface{}) (out []*Page, err error)
		FindList(ctx context.Context, limit int, offset int, sorts string, conditions string, args ...interface{}) (out []*Page, err error)
		FindOne(ctx context.Context, id int64) (*Page, error)
		Update(ctx context.Context, data *Page) (*Page, error)
		UpdateColumns(ctx context.Context, id int64, columns map[string]interface{}) (rows int64, err error)
		Save(ctx context.Context, data *Page) (*Page, error)
		Delete(ctx context.Context, id int64) (rows int64, err error)
		DeleteBatch(ctx context.Context, conditions string, args ...interface{}) (rows int64, err error)
		// add extra method in here

	}

	defaultPageModel struct {
		DbEngin    *gorm.DB
		CacheEngin *redis.Client
		table      string
	}

	Page struct {
		Id        int64     `gorm:"column:id"`         // 页面id
		PageName  string    `gorm:"column:page_name"`  // 页面名
		PageLabel string    `gorm:"column:page_label"` // 页面标签
		PageCover string    `gorm:"column:page_cover"` // 页面封面
		CreatedAt time.Time `gorm:"column:created_at"` // 创建时间
		UpdatedAt time.Time `gorm:"column:updated_at"` // 更新时间
	}
)

func newPageModel(db *gorm.DB, cache *redis.Client) *defaultPageModel {
	return &defaultPageModel{
		DbEngin:    db,
		CacheEngin: cache,
		table:      "`page`",
	}
}

// 切换事务操作
func (m *defaultPageModel) WithTransaction(tx *gorm.DB) (out PageModel) {
	return NewPageModel(tx, m.CacheEngin)
}

// 插入Page记录
func (m *defaultPageModel) Insert(ctx context.Context, in *Page) (out *Page, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	err = db.Create(&in).Error
	if err != nil {
		return nil, err
	}
	return in, err
}

// 插入Page记录
func (m *defaultPageModel) InsertBatch(ctx context.Context, in ...*Page) (rows int64, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	err = db.CreateInBatches(&in, len(in)).Error
	if err != nil {
		return 0, err
	}
	return rows, err
}

// 更新Page记录
func (m *defaultPageModel) Update(ctx context.Context, in *Page) (out *Page, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	err = db.Updates(&in).Error
	if err != nil {
		return nil, err
	}
	return in, err
}

// 更新Page记录
func (m *defaultPageModel) UpdateColumns(ctx context.Context, id int64, columns map[string]interface{}) (rows int64, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	result := db.Where("`id` = ?", id).UpdateColumns(&columns)
	if result.Error != nil {
		return 0, err
	}

	return result.RowsAffected, err
}

// 更新Page记录
func (m *defaultPageModel) Save(ctx context.Context, in *Page) (out *Page, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	err = db.Save(&in).Error
	if err != nil {
		return nil, err
	}
	return in, err
}

// 删除Page记录
func (m *defaultPageModel) Delete(ctx context.Context, id int64) (rows int64, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	db = db.Where("id = ?", id)

	query := db.Delete(&Page{})
	return query.RowsAffected, query.Error
}

// 删除Page记录
func (m *defaultPageModel) DeleteBatch(ctx context.Context, conditions string, args ...interface{}) (rows int64, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	// 如果有条件语句
	if len(conditions) != 0 {
		db = db.Where(conditions, args...)
	}

	result := db.Delete(&Page{})
	return result.RowsAffected, result.Error
}

// 查询Page记录
func (m *defaultPageModel) First(ctx context.Context, conditions string, args ...interface{}) (out *Page, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	// 如果有条件语句
	if len(conditions) != 0 {
		db = db.Where(conditions, args...)
	}

	out = new(Page)
	err = db.First(&out).Error
	if err != nil {
		return nil, err
	}
	return out, err
}

// 查询Page总数
func (m *defaultPageModel) FindCount(ctx context.Context, conditions string, args ...interface{}) (count int64, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	// 如果有条件语句
	if len(conditions) != 0 {
		db = db.Where(conditions, args...)
	}

	err = db.Model(&Page{}).Count(&count).Error
	if err != nil {
		return 0, err
	}
	return count, nil
}

// 查询Page列表
func (m *defaultPageModel) FindALL(ctx context.Context, conditions string, args ...interface{}) (out []*Page, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	// 如果有条件语句
	if len(conditions) != 0 {
		db = db.Where(conditions, args...)
	}

	err = db.Find(&out).Error
	if err != nil {
		return nil, err
	}
	return out, err
}

// 分页查询Page记录
func (m *defaultPageModel) FindList(ctx context.Context, limit int, offset int, sorts string, conditions string, args ...interface{}) (list []*Page, err error) {
	// 创建db
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	// 如果有搜索条件
	if len(conditions) != 0 {
		db = db.Where(conditions, args...)
	}

	// 如果有排序参数
	if len(sorts) != 0 {
		db = db.Order(sorts)
	}

	// 如果有分页参数
	if limit > 0 || offset > 0 {
		db = db.Limit(limit).Offset(offset)
	}

	// 查询数据
	err = db.Find(&list).Error
	if err != nil {
		return nil, err
	}

	return list, nil
}

// 查询Page记录
func (m *defaultPageModel) FindOne(ctx context.Context, id int64) (out *Page, err error) {
	db := m.DbEngin.WithContext(ctx).Table(m.table)

	// 如果有条件语句
	err = db.Where("`id` = ?", id).First(&out).Error
	if err != nil {
		return nil, err
	}

	return out, err
}

func (m *defaultPageModel) TableName() string {
	return m.table
}
