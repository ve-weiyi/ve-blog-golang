// 声明 proto 语法版本，固定值

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.19.4
// source: blog.proto

// proto 包名

package blog

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmptyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyReq) Reset() {
	*x = EmptyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyReq) ProtoMessage() {}

func (x *EmptyReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyReq.ProtoReflect.Descriptor instead.
func (*EmptyReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{0}
}

type EmptyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyResp) Reset() {
	*x = EmptyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResp) ProtoMessage() {}

func (x *EmptyResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResp.ProtoReflect.Descriptor instead.
func (*EmptyResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{1}
}

type IdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdReq) Reset() {
	*x = IdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdReq) ProtoMessage() {}

func (x *IdReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdReq.ProtoReflect.Descriptor instead.
func (*IdReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{2}
}

func (x *IdReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *IdsReq) Reset() {
	*x = IdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdsReq) ProtoMessage() {}

func (x *IdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdsReq.ProtoReflect.Descriptor instead.
func (*IdsReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{3}
}

func (x *IdsReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type PageQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int64    `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Sorts      string   `protobuf:"bytes,3,opt,name=sorts,proto3" json:"sorts,omitempty"`           // 排序
	Conditions string   `protobuf:"bytes,4,opt,name=conditions,proto3" json:"conditions,omitempty"` // 条件
	Args       []string `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`             // 参数
}

func (x *PageQuery) Reset() {
	*x = PageQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageQuery) ProtoMessage() {}

func (x *PageQuery) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageQuery.ProtoReflect.Descriptor instead.
func (*PageQuery) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{4}
}

func (x *PageQuery) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageQuery) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageQuery) GetSorts() string {
	if x != nil {
		return x.Sorts
	}
	return ""
}

func (x *PageQuery) GetConditions() string {
	if x != nil {
		return x.Conditions
	}
	return ""
}

func (x *PageQuery) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type PageLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *PageLimit) Reset() {
	*x = PageLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageLimit) ProtoMessage() {}

func (x *PageLimit) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageLimit.ProtoReflect.Descriptor instead.
func (*PageLimit) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{5}
}

func (x *PageLimit) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageLimit) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type PageSort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Order string `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *PageSort) Reset() {
	*x = PageSort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageSort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageSort) ProtoMessage() {}

func (x *PageSort) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageSort.ProtoReflect.Descriptor instead.
func (*PageSort) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{6}
}

func (x *PageSort) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *PageSort) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type PageCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field    string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`       // 字段
	Value    string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`       // 值
	Logic    string `protobuf:"bytes,3,opt,name=logic,proto3" json:"logic,omitempty"`       // 逻辑 and or
	Operator string `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"` // 操作符 = > < >= <= != like
}

func (x *PageCondition) Reset() {
	*x = PageCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageCondition) ProtoMessage() {}

func (x *PageCondition) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageCondition.ProtoReflect.Descriptor instead.
func (*PageCondition) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{7}
}

func (x *PageCondition) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *PageCondition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PageCondition) GetLogic() string {
	if x != nil {
		return x.Logic
	}
	return ""
}

func (x *PageCondition) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type PageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total    int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PageResp) Reset() {
	*x = PageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageResp) ProtoMessage() {}

func (x *PageResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageResp.ProtoReflect.Descriptor instead.
func (*PageResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{8}
}

func (x *PageResp) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type BatchResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuccessCount int64 `protobuf:"varint,1,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
}

func (x *BatchResp) Reset() {
	*x = BatchResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchResp) ProtoMessage() {}

func (x *BatchResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchResp.ProtoReflect.Descriptor instead.
func (*BatchResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{9}
}

func (x *BatchResp) GetSuccessCount() int64 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

type CountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountResp) Reset() {
	*x = CountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountResp) ProtoMessage() {}

func (x *CountResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountResp.ProtoReflect.Descriptor instead.
func (*CountResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{10}
}

func (x *CountResp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Code     string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{11}
}

func (x *LoginReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type LoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64        `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	Username string       `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`            // 用户名
	Nickname string       `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`            // 昵称
	Avatar   string       `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`                // 头像
	Intro    string       `protobuf:"bytes,5,opt,name=intro,proto3" json:"intro,omitempty"`                  // 个人简介
	Website  string       `protobuf:"bytes,6,opt,name=website,proto3" json:"website,omitempty"`              // 个人网站
	Email    string       `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`                  // 邮箱
	Roles    []*RoleLabel `protobuf:"bytes,8,rep,name=roles,proto3" json:"roles,omitempty"`                  // 角色列表
}

func (x *LoginResp) Reset() {
	*x = LoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResp) ProtoMessage() {}

func (x *LoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResp.ProtoReflect.Descriptor instead.
func (*LoginResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{12}
}

func (x *LoginResp) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LoginResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *LoginResp) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *LoginResp) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *LoginResp) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *LoginResp) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginResp) GetRoles() []*RoleLabel {
	if x != nil {
		return x.Roles
	}
	return nil
}

type RoleLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleName    string `protobuf:"bytes,1,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	RoleComment string `protobuf:"bytes,2,opt,name=role_comment,json=roleComment,proto3" json:"role_comment,omitempty"`
}

func (x *RoleLabel) Reset() {
	*x = RoleLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleLabel) ProtoMessage() {}

func (x *RoleLabel) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleLabel.ProtoReflect.Descriptor instead.
func (*RoleLabel) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{13}
}

func (x *RoleLabel) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *RoleLabel) GetRoleComment() string {
	if x != nil {
		return x.RoleComment
	}
	return ""
}

type OauthLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"` // 平台
	Code     string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`         // 授权码
	State    string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`       // 状态
}

func (x *OauthLoginReq) Reset() {
	*x = OauthLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OauthLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OauthLoginReq) ProtoMessage() {}

func (x *OauthLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OauthLoginReq.ProtoReflect.Descriptor instead.
func (*OauthLoginReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{14}
}

func (x *OauthLoginReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *OauthLoginReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *OauthLoginReq) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type OauthLoginUrlResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` // 授权地址
}

func (x *OauthLoginUrlResp) Reset() {
	*x = OauthLoginUrlResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OauthLoginUrlResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OauthLoginUrlResp) ProtoMessage() {}

func (x *OauthLoginUrlResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OauthLoginUrlResp.ProtoReflect.Descriptor instead.
func (*OauthLoginUrlResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{15}
}

func (x *OauthLoginUrlResp) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ResetPasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Code     string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ResetPasswordReq) Reset() {
	*x = ResetPasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordReq) ProtoMessage() {}

func (x *ResetPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordReq.ProtoReflect.Descriptor instead.
func (*ResetPasswordReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{16}
}

func (x *ResetPasswordReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ResetPasswordReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ResetPasswordReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type UserEmailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *UserEmailReq) Reset() {
	*x = UserEmailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEmailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEmailReq) ProtoMessage() {}

func (x *UserEmailReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEmailReq.ProtoReflect.Descriptor instead.
func (*UserEmailReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{17}
}

func (x *UserEmailReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type LogoutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *LogoutReq) Reset() {
	*x = LogoutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutReq) ProtoMessage() {}

func (x *LogoutReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutReq.ProtoReflect.Descriptor instead.
func (*LogoutReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{18}
}

func (x *LogoutReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type LogoffReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *LogoffReq) Reset() {
	*x = LogoffReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoffReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoffReq) ProtoMessage() {}

func (x *LogoffReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoffReq.ProtoReflect.Descriptor instead.
func (*LogoffReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{19}
}

func (x *LogoffReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetLogoutAtReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetLogoutAtReq) Reset() {
	*x = GetLogoutAtReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogoutAtReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogoutAtReq) ProtoMessage() {}

func (x *GetLogoutAtReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogoutAtReq.ProtoReflect.Descriptor instead.
func (*GetLogoutAtReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{20}
}

func (x *GetLogoutAtReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetLogoutAtResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LogoutAt int64 `protobuf:"varint,2,opt,name=logout_at,json=logoutAt,proto3" json:"logout_at,omitempty"`
}

func (x *GetLogoutAtResp) Reset() {
	*x = GetLogoutAtResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogoutAtResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogoutAtResp) ProtoMessage() {}

func (x *GetLogoutAtResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogoutAtResp.ProtoReflect.Descriptor instead.
func (*GetLogoutAtResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{21}
}

func (x *GetLogoutAtResp) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetLogoutAtResp) GetLogoutAt() int64 {
	if x != nil {
		return x.LogoutAt
	}
	return 0
}

// ************* rbac 权限相关 *************
type Api struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                // 主键id
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                             // api名称
	Path      string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`                             // api路径
	Method    string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`                         // api请求方法
	ParentId  int64  `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`    // 分组id
	Traceable int64  `protobuf:"varint,6,opt,name=traceable,proto3" json:"traceable,omitempty"`                  // 是否追溯操作记录 0需要，1是
	Status    int64  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                        // 状态 1开，2关
	CreatedAt int64  `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt int64  `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
}

func (x *Api) Reset() {
	*x = Api{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Api) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Api) ProtoMessage() {}

func (x *Api) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Api.ProtoReflect.Descriptor instead.
func (*Api) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{22}
}

func (x *Api) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Api) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Api) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Api) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Api) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Api) GetTraceable() int64 {
	if x != nil {
		return x.Traceable
	}
	return 0
}

func (x *Api) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Api) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Api) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type ApiDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                // 主键id
	Name      string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                             // api名称
	Path      string        `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`                             // api路径
	Method    string        `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`                         // api请求方法
	ParentId  int64         `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`    // 分组id
	Traceable int64         `protobuf:"varint,6,opt,name=traceable,proto3" json:"traceable,omitempty"`                  // 是否追溯操作记录 0需要，1是
	Status    int64         `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                        // 状态 1开，2关
	CreatedAt int64         `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt int64         `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
	Children  []*ApiDetails `protobuf:"bytes,10,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *ApiDetails) Reset() {
	*x = ApiDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiDetails) ProtoMessage() {}

func (x *ApiDetails) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiDetails.ProtoReflect.Descriptor instead.
func (*ApiDetails) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{23}
}

func (x *ApiDetails) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ApiDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApiDetails) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ApiDetails) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *ApiDetails) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *ApiDetails) GetTraceable() int64 {
	if x != nil {
		return x.Traceable
	}
	return 0
}

func (x *ApiDetails) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ApiDetails) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ApiDetails) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ApiDetails) GetChildren() []*ApiDetails {
	if x != nil {
		return x.Children
	}
	return nil
}

type ApiPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ApiDetails `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ApiPageResp) Reset() {
	*x = ApiPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiPageResp) ProtoMessage() {}

func (x *ApiPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiPageResp.ProtoReflect.Descriptor instead.
func (*ApiPageResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{24}
}

func (x *ApiPageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ApiPageResp) GetList() []*ApiDetails {
	if x != nil {
		return x.List
	}
	return nil
}

type Menu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                 // 主键
	ParentId  int64  `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`     // 父id
	Title     string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                            // 菜单标题
	Path      string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`                              // 路由路径
	Name      string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                              // 路由名称
	Component string `protobuf:"bytes,6,opt,name=component,proto3" json:"component,omitempty"`                    // 路由组件
	Redirect  string `protobuf:"bytes,7,opt,name=redirect,proto3" json:"redirect,omitempty"`                      // 路由重定向
	Type      int64  `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`                             // 菜单类型
	Extra     string `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`                            // 菜单元数据
	CreatedAt int64  `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt int64  `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
}

func (x *Menu) Reset() {
	*x = Menu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Menu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Menu) ProtoMessage() {}

func (x *Menu) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Menu.ProtoReflect.Descriptor instead.
func (*Menu) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{25}
}

func (x *Menu) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Menu) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Menu) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Menu) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Menu) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Menu) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *Menu) GetRedirect() string {
	if x != nil {
		return x.Redirect
	}
	return ""
}

func (x *Menu) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Menu) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *Menu) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Menu) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type MenuDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                 // 主键
	ParentId  int64          `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`     // 父id
	Title     string         `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                            // 菜单标题
	Type      int64          `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`                             // 菜单类型（0代表菜单、1代表iframe、2代表外链、3代表按钮）
	Path      string         `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`                              // 路由地址
	Name      string         `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                              // 路由名字
	Component string         `protobuf:"bytes,7,opt,name=component,proto3" json:"component,omitempty"`                    // Layout组件
	Redirect  string         `protobuf:"bytes,8,opt,name=redirect,proto3" json:"redirect,omitempty"`                      // 路由重定向
	Extra     string         `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`                            // 额外的配置信息
	CreatedAt int64          `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt int64          `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
	Children  []*MenuDetails `protobuf:"bytes,12,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *MenuDetails) Reset() {
	*x = MenuDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuDetails) ProtoMessage() {}

func (x *MenuDetails) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuDetails.ProtoReflect.Descriptor instead.
func (*MenuDetails) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{26}
}

func (x *MenuDetails) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MenuDetails) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *MenuDetails) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MenuDetails) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MenuDetails) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MenuDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MenuDetails) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *MenuDetails) GetRedirect() string {
	if x != nil {
		return x.Redirect
	}
	return ""
}

func (x *MenuDetails) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *MenuDetails) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MenuDetails) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *MenuDetails) GetChildren() []*MenuDetails {
	if x != nil {
		return x.Children
	}
	return nil
}

type MenuPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*MenuDetails `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MenuPageResp) Reset() {
	*x = MenuPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuPageResp) ProtoMessage() {}

func (x *MenuPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuPageResp.ProtoReflect.Descriptor instead.
func (*MenuPageResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{27}
}

func (x *MenuPageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MenuPageResp) GetList() []*MenuDetails {
	if x != nil {
		return x.List
	}
	return nil
}

type SyncMenuReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Menus []*MenuDetails `protobuf:"bytes,1,rep,name=menus,proto3" json:"menus,omitempty"`
}

func (x *SyncMenuReq) Reset() {
	*x = SyncMenuReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMenuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMenuReq) ProtoMessage() {}

func (x *SyncMenuReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMenuReq.ProtoReflect.Descriptor instead.
func (*SyncMenuReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{28}
}

func (x *SyncMenuReq) GetMenus() []*MenuDetails {
	if x != nil {
		return x.Menus
	}
	return nil
}

type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                     // 主键id
	ParentId    int64  `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`         // 父角色id
	RoleDomain  string `protobuf:"bytes,3,opt,name=role_domain,json=roleDomain,proto3" json:"role_domain,omitempty"`    // 角色域
	RoleName    string `protobuf:"bytes,4,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`          // 角色名
	RoleComment string `protobuf:"bytes,5,opt,name=role_comment,json=roleComment,proto3" json:"role_comment,omitempty"` // 角色备注
	IsDisable   int64  `protobuf:"varint,6,opt,name=is_disable,json=isDisable,proto3" json:"is_disable,omitempty"`      // 是否禁用  0否 1是
	IsDefault   int64  `protobuf:"varint,7,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`      // 是否默认角色 0否 1是
	CreatedAt   int64  `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`      // 创建时间
	UpdatedAt   int64  `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`      // 更新时间
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{29}
}

func (x *Role) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Role) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Role) GetRoleDomain() string {
	if x != nil {
		return x.RoleDomain
	}
	return ""
}

func (x *Role) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *Role) GetRoleComment() string {
	if x != nil {
		return x.RoleComment
	}
	return ""
}

func (x *Role) GetIsDisable() int64 {
	if x != nil {
		return x.IsDisable
	}
	return 0
}

func (x *Role) GetIsDefault() int64 {
	if x != nil {
		return x.IsDefault
	}
	return 0
}

func (x *Role) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Role) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type RoleDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                     // 主键id
	ParentId    int64          `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`         // 父角色id
	RoleDomain  string         `protobuf:"bytes,3,opt,name=role_domain,json=roleDomain,proto3" json:"role_domain,omitempty"`    // 角色域
	RoleName    string         `protobuf:"bytes,4,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`          // 角色名
	RoleComment string         `protobuf:"bytes,5,opt,name=role_comment,json=roleComment,proto3" json:"role_comment,omitempty"` // 角色备注
	IsDisable   int64          `protobuf:"varint,6,opt,name=is_disable,json=isDisable,proto3" json:"is_disable,omitempty"`      // 是否禁用  0否 1是
	IsDefault   int64          `protobuf:"varint,7,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`      // 是否默认角色 0否 1是
	CreatedAt   int64          `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`      // 创建时间
	UpdatedAt   int64          `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`      // 更新时间
	Children    []*RoleDetails `protobuf:"bytes,10,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *RoleDetails) Reset() {
	*x = RoleDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleDetails) ProtoMessage() {}

func (x *RoleDetails) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleDetails.ProtoReflect.Descriptor instead.
func (*RoleDetails) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{30}
}

func (x *RoleDetails) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoleDetails) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *RoleDetails) GetRoleDomain() string {
	if x != nil {
		return x.RoleDomain
	}
	return ""
}

func (x *RoleDetails) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *RoleDetails) GetRoleComment() string {
	if x != nil {
		return x.RoleComment
	}
	return ""
}

func (x *RoleDetails) GetIsDisable() int64 {
	if x != nil {
		return x.IsDisable
	}
	return 0
}

func (x *RoleDetails) GetIsDefault() int64 {
	if x != nil {
		return x.IsDefault
	}
	return 0
}

func (x *RoleDetails) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RoleDetails) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *RoleDetails) GetChildren() []*RoleDetails {
	if x != nil {
		return x.Children
	}
	return nil
}

type RolePageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*RoleDetails `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *RolePageResp) Reset() {
	*x = RolePageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolePageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolePageResp) ProtoMessage() {}

func (x *RolePageResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolePageResp.ProtoReflect.Descriptor instead.
func (*RolePageResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{31}
}

func (x *RolePageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RolePageResp) GetList() []*RoleDetails {
	if x != nil {
		return x.List
	}
	return nil
}

type RoleResourcesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId  int64   `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	ApiIds  []int64 `protobuf:"varint,2,rep,packed,name=api_ids,json=apiIds,proto3" json:"api_ids,omitempty"`
	MenuIds []int64 `protobuf:"varint,3,rep,packed,name=menu_ids,json=menuIds,proto3" json:"menu_ids,omitempty"`
}

func (x *RoleResourcesResp) Reset() {
	*x = RoleResourcesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleResourcesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleResourcesResp) ProtoMessage() {}

func (x *RoleResourcesResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleResourcesResp.ProtoReflect.Descriptor instead.
func (*RoleResourcesResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{32}
}

func (x *RoleResourcesResp) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *RoleResourcesResp) GetApiIds() []int64 {
	if x != nil {
		return x.ApiIds
	}
	return nil
}

func (x *RoleResourcesResp) GetMenuIds() []int64 {
	if x != nil {
		return x.MenuIds
	}
	return nil
}

type UpdateRoleApisReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId int64   `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	ApiIds []int64 `protobuf:"varint,2,rep,packed,name=api_ids,json=apiIds,proto3" json:"api_ids,omitempty"`
}

func (x *UpdateRoleApisReq) Reset() {
	*x = UpdateRoleApisReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoleApisReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoleApisReq) ProtoMessage() {}

func (x *UpdateRoleApisReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoleApisReq.ProtoReflect.Descriptor instead.
func (*UpdateRoleApisReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateRoleApisReq) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *UpdateRoleApisReq) GetApiIds() []int64 {
	if x != nil {
		return x.ApiIds
	}
	return nil
}

type UpdateRoleMenusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId  int64   `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	MenuIds []int64 `protobuf:"varint,2,rep,packed,name=menu_ids,json=menuIds,proto3" json:"menu_ids,omitempty"`
}

func (x *UpdateRoleMenusReq) Reset() {
	*x = UpdateRoleMenusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoleMenusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoleMenusReq) ProtoMessage() {}

func (x *UpdateRoleMenusReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoleMenusReq.ProtoReflect.Descriptor instead.
func (*UpdateRoleMenusReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateRoleMenusReq) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *UpdateRoleMenusReq) GetMenuIds() []int64 {
	if x != nil {
		return x.MenuIds
	}
	return nil
}

type LoginHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LoginType string `protobuf:"bytes,2,opt,name=login_type,json=loginType,proto3" json:"login_type,omitempty"` // 登录类型
	Agent     string `protobuf:"bytes,3,opt,name=agent,proto3" json:"agent,omitempty"`                          // 代理
	IpAddress string `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"` // ip host
	IpSource  string `protobuf:"bytes,5,opt,name=ip_source,json=ipSource,proto3" json:"ip_source,omitempty"`    // ip 源
	LoginTime string `protobuf:"bytes,6,opt,name=login_time,json=loginTime,proto3" json:"login_time,omitempty"` // 创建时间
}

func (x *LoginHistory) Reset() {
	*x = LoginHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginHistory) ProtoMessage() {}

func (x *LoginHistory) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginHistory.ProtoReflect.Descriptor instead.
func (*LoginHistory) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{35}
}

func (x *LoginHistory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LoginHistory) GetLoginType() string {
	if x != nil {
		return x.LoginType
	}
	return ""
}

func (x *LoginHistory) GetAgent() string {
	if x != nil {
		return x.Agent
	}
	return ""
}

func (x *LoginHistory) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *LoginHistory) GetIpSource() string {
	if x != nil {
		return x.IpSource
	}
	return ""
}

func (x *LoginHistory) GetLoginTime() string {
	if x != nil {
		return x.LoginTime
	}
	return ""
}

type LoginHistoryPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*LoginHistory `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *LoginHistoryPageResp) Reset() {
	*x = LoginHistoryPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginHistoryPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginHistoryPageResp) ProtoMessage() {}

func (x *LoginHistoryPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginHistoryPageResp.ProtoReflect.Descriptor instead.
func (*LoginHistoryPageResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{36}
}

func (x *LoginHistoryPageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *LoginHistoryPageResp) GetList() []*LoginHistory {
	if x != nil {
		return x.List
	}
	return nil
}

type UserInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                 // id
	UserId    int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`           // 用户id
	Email     string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`                            // 用户邮箱
	Nickname  string `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`                      // 用户昵称
	Avatar    string `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`                          // 用户头像
	Phone     string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`                            // 用户手机号
	Intro     string `protobuf:"bytes,7,opt,name=intro,proto3" json:"intro,omitempty"`                            // 个人简介
	Website   string `protobuf:"bytes,8,opt,name=website,proto3" json:"website,omitempty"`                        // 个人网站
	CreatedAt int64  `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`  // 创建时间
	UpdatedAt int64  `protobuf:"varint,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
}

func (x *UserInfoResp) Reset() {
	*x = UserInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoResp) ProtoMessage() {}

func (x *UserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoResp.ProtoReflect.Descriptor instead.
func (*UserInfoResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{37}
}

func (x *UserInfoResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserInfoResp) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserInfoResp) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfoResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserInfoResp) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserInfoResp) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserInfoResp) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *UserInfoResp) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *UserInfoResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UserInfoResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username     string       `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Email        string       `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`       // 用户邮箱
	Nickname     string       `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"` // 用户昵称
	Avatar       string       `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`     // 用户头像
	Phone        string       `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`       // 用户手机号
	Intro        string       `protobuf:"bytes,7,opt,name=intro,proto3" json:"intro,omitempty"`       // 个人简介
	Website      string       `protobuf:"bytes,8,opt,name=website,proto3" json:"website,omitempty"`   // 个人网站
	Status       int64        `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	RegisterType string       `protobuf:"bytes,10,opt,name=register_type,json=registerType,proto3" json:"register_type,omitempty"`
	IpAddress    string       `protobuf:"bytes,11,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"` // ip host
	IpSource     string       `protobuf:"bytes,12,opt,name=ip_source,json=ipSource,proto3" json:"ip_source,omitempty"`    // ip 源
	CreatedAt    int64        `protobuf:"varint,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    int64        `protobuf:"varint,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Roles        []*RoleLabel `protobuf:"bytes,15,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{38}
}

func (x *User) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *User) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *User) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *User) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *User) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *User) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *User) GetRegisterType() string {
	if x != nil {
		return x.RegisterType
	}
	return ""
}

func (x *User) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *User) GetIpSource() string {
	if x != nil {
		return x.IpSource
	}
	return ""
}

func (x *User) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *User) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *User) GetRoles() []*RoleLabel {
	if x != nil {
		return x.Roles
	}
	return nil
}

type UserPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*User `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *UserPageResp) Reset() {
	*x = UserPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPageResp) ProtoMessage() {}

func (x *UserPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPageResp.ProtoReflect.Descriptor instead.
func (*UserPageResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{39}
}

func (x *UserPageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserPageResp) GetList() []*User {
	if x != nil {
		return x.List
	}
	return nil
}

type UpdateUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"` // 昵称
	Phone    string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`       // 手机号
	Website  string `protobuf:"bytes,4,opt,name=website,proto3" json:"website,omitempty"`   // 网站
	Intro    string `protobuf:"bytes,5,opt,name=intro,proto3" json:"intro,omitempty"`       // 简介
}

func (x *UpdateUserInfoReq) Reset() {
	*x = UpdateUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoReq) ProtoMessage() {}

func (x *UpdateUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoReq.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateUserInfoReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserInfoReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UpdateUserInfoReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UpdateUserInfoReq) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *UpdateUserInfoReq) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

type UpdateUserAvatarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Avatar string `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (x *UpdateUserAvatarReq) Reset() {
	*x = UpdateUserAvatarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserAvatarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserAvatarReq) ProtoMessage() {}

func (x *UpdateUserAvatarReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserAvatarReq.ProtoReflect.Descriptor instead.
func (*UpdateUserAvatarReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateUserAvatarReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserAvatarReq) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

type UpdateUserStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status int64 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateUserStatusReq) Reset() {
	*x = UpdateUserStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserStatusReq) ProtoMessage() {}

func (x *UpdateUserStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateUserStatusReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateUserStatusReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserStatusReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UpdateUserRoleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RoleIds []int64 `protobuf:"varint,2,rep,packed,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
}

func (x *UpdateUserRoleReq) Reset() {
	*x = UpdateUserRoleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRoleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRoleReq) ProtoMessage() {}

func (x *UpdateUserRoleReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRoleReq.ProtoReflect.Descriptor instead.
func (*UpdateUserRoleReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateUserRoleReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserRoleReq) GetRoleIds() []int64 {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

type UserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserReq) Reset() {
	*x = UserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReq) ProtoMessage() {}

func (x *UserReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReq.ProtoReflect.Descriptor instead.
func (*UserReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{44}
}

func (x *UserReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// ************* blog 博客相关 *************
type FindConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigKey string `protobuf:"bytes,1,opt,name=config_key,json=configKey,proto3" json:"config_key,omitempty"`
}

func (x *FindConfigReq) Reset() {
	*x = FindConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindConfigReq) ProtoMessage() {}

func (x *FindConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindConfigReq.ProtoReflect.Descriptor instead.
func (*FindConfigReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{45}
}

func (x *FindConfigReq) GetConfigKey() string {
	if x != nil {
		return x.ConfigKey
	}
	return ""
}

type FindConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigValue string `protobuf:"bytes,1,opt,name=config_value,json=configValue,proto3" json:"config_value,omitempty"`
}

func (x *FindConfigResp) Reset() {
	*x = FindConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindConfigResp) ProtoMessage() {}

func (x *FindConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindConfigResp.ProtoReflect.Descriptor instead.
func (*FindConfigResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{46}
}

func (x *FindConfigResp) GetConfigValue() string {
	if x != nil {
		return x.ConfigValue
	}
	return ""
}

type SaveConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigKey   string `protobuf:"bytes,1,opt,name=config_key,json=configKey,proto3" json:"config_key,omitempty"`
	ConfigValue string `protobuf:"bytes,2,opt,name=config_value,json=configValue,proto3" json:"config_value,omitempty"`
}

func (x *SaveConfigReq) Reset() {
	*x = SaveConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveConfigReq) ProtoMessage() {}

func (x *SaveConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveConfigReq.ProtoReflect.Descriptor instead.
func (*SaveConfigReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{47}
}

func (x *SaveConfigReq) GetConfigKey() string {
	if x != nil {
		return x.ConfigKey
	}
	return ""
}

func (x *SaveConfigReq) GetConfigValue() string {
	if x != nil {
		return x.ConfigValue
	}
	return ""
}

// article结构体
type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                              // id
	UserId         int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // 作者
	CategoryId     int64  `protobuf:"varint,3,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`            // 文章分类
	ArticleCover   string `protobuf:"bytes,4,opt,name=article_cover,json=articleCover,proto3" json:"article_cover,omitempty"`       // 文章缩略图
	ArticleTitle   string `protobuf:"bytes,5,opt,name=article_title,json=articleTitle,proto3" json:"article_title,omitempty"`       // 标题
	ArticleContent string `protobuf:"bytes,6,opt,name=article_content,json=articleContent,proto3" json:"article_content,omitempty"` // 内容
	Type           int64  `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`                                          // 文章类型 1原创 2转载 3翻译
	OriginalUrl    string `protobuf:"bytes,8,opt,name=original_url,json=originalUrl,proto3" json:"original_url,omitempty"`          // 原文链接
	IsTop          int64  `protobuf:"varint,9,opt,name=is_top,json=isTop,proto3" json:"is_top,omitempty"`                           // 是否置顶 0否 1是
	IsDelete       int64  `protobuf:"varint,10,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`                 // 是否删除  0否 1是
	Status         int64  `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`                                     // 状态值 1公开 2私密 3评论可见
	CreatedAt      int64  `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`              // 发表时间
	UpdatedAt      int64  `protobuf:"varint,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`              // 更新时间
}

func (x *Article) Reset() {
	*x = Article{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{48}
}

func (x *Article) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Article) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Article) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *Article) GetArticleCover() string {
	if x != nil {
		return x.ArticleCover
	}
	return ""
}

func (x *Article) GetArticleTitle() string {
	if x != nil {
		return x.ArticleTitle
	}
	return ""
}

func (x *Article) GetArticleContent() string {
	if x != nil {
		return x.ArticleContent
	}
	return ""
}

func (x *Article) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Article) GetOriginalUrl() string {
	if x != nil {
		return x.OriginalUrl
	}
	return ""
}

func (x *Article) GetIsTop() int64 {
	if x != nil {
		return x.IsTop
	}
	return 0
}

func (x *Article) GetIsDelete() int64 {
	if x != nil {
		return x.IsDelete
	}
	return 0
}

func (x *Article) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Article) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Article) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type ArticlePageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Article `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ArticlePageResp) Reset() {
	*x = ArticlePageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticlePageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticlePageResp) ProtoMessage() {}

func (x *ArticlePageResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticlePageResp.ProtoReflect.Descriptor instead.
func (*ArticlePageResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{49}
}

func (x *ArticlePageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ArticlePageResp) GetList() []*Article {
	if x != nil {
		return x.List
	}
	return nil
}

type FindArticleByTagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagIds []int64 `protobuf:"varint,1,rep,packed,name=tag_ids,json=tagIds,proto3" json:"tag_ids,omitempty"`
}

func (x *FindArticleByTagReq) Reset() {
	*x = FindArticleByTagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindArticleByTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindArticleByTagReq) ProtoMessage() {}

func (x *FindArticleByTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindArticleByTagReq.ProtoReflect.Descriptor instead.
func (*FindArticleByTagReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{50}
}

func (x *FindArticleByTagReq) GetTagIds() []int64 {
	if x != nil {
		return x.TagIds
	}
	return nil
}

type FindArticleByCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryIds []int64 `protobuf:"varint,1,rep,packed,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
}

func (x *FindArticleByCategoryReq) Reset() {
	*x = FindArticleByCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindArticleByCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindArticleByCategoryReq) ProtoMessage() {}

func (x *FindArticleByCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindArticleByCategoryReq.ProtoReflect.Descriptor instead.
func (*FindArticleByCategoryReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{51}
}

func (x *FindArticleByCategoryReq) GetCategoryIds() []int64 {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                        // id
	CategoryName string `protobuf:"bytes,2,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"` // 分类名
	CreatedAt    int64  `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`         // 创建时间
	UpdatedAt    int64  `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`         // 更新时间
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{52}
}

func (x *Category) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Category) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *Category) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Category) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type CategoryPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Category `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CategoryPageResp) Reset() {
	*x = CategoryPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryPageResp) ProtoMessage() {}

func (x *CategoryPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryPageResp.ProtoReflect.Descriptor instead.
func (*CategoryPageResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{53}
}

func (x *CategoryPageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CategoryPageResp) GetList() []*Category {
	if x != nil {
		return x.List
	}
	return nil
}

type FindCategoryByNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryName string `protobuf:"bytes,1,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`
}

func (x *FindCategoryByNameReq) Reset() {
	*x = FindCategoryByNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCategoryByNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCategoryByNameReq) ProtoMessage() {}

func (x *FindCategoryByNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCategoryByNameReq.ProtoReflect.Descriptor instead.
func (*FindCategoryByNameReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{54}
}

func (x *FindCategoryByNameReq) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                // id
	TagName   string `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`        // 标签名
	CreatedAt int64  `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt int64  `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{55}
}

func (x *Tag) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tag) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *Tag) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Tag) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type TagPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Tag `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TagPageResp) Reset() {
	*x = TagPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagPageResp) ProtoMessage() {}

func (x *TagPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagPageResp.ProtoReflect.Descriptor instead.
func (*TagPageResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{56}
}

func (x *TagPageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TagPageResp) GetList() []*Tag {
	if x != nil {
		return x.List
	}
	return nil
}

type FindTagArticleCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId int64 `protobuf:"varint,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
}

func (x *FindTagArticleCountReq) Reset() {
	*x = FindTagArticleCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTagArticleCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTagArticleCountReq) ProtoMessage() {}

func (x *FindTagArticleCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTagArticleCountReq.ProtoReflect.Descriptor instead.
func (*FindTagArticleCountReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{57}
}

func (x *FindTagArticleCountReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

type FindTagByNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagName string `protobuf:"bytes,1,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
}

func (x *FindTagByNameReq) Reset() {
	*x = FindTagByNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTagByNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTagByNameReq) ProtoMessage() {}

func (x *FindTagByNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTagByNameReq.ProtoReflect.Descriptor instead.
func (*FindTagByNameReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{58}
}

func (x *FindTagByNameReq) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type TagMapResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagMapList map[int64]*TagPageResp `protobuf:"bytes,1,rep,name=tag_map_list,json=tagMapList,proto3" json:"tag_map_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TagMapResp) Reset() {
	*x = TagMapResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagMapResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagMapResp) ProtoMessage() {}

func (x *TagMapResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagMapResp.ProtoReflect.Descriptor instead.
func (*TagMapResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{59}
}

func (x *TagMapResp) GetTagMapList() map[int64]*TagPageResp {
	if x != nil {
		return x.TagMapList
	}
	return nil
}

// ************* blog 消息管理 *************
type FriendLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                     // id
	LinkName    string `protobuf:"bytes,2,opt,name=link_name,json=linkName,proto3" json:"link_name,omitempty"`          // 链接名
	LinkAvatar  string `protobuf:"bytes,3,opt,name=link_avatar,json=linkAvatar,proto3" json:"link_avatar,omitempty"`    // 链接头像
	LinkAddress string `protobuf:"bytes,4,opt,name=link_address,json=linkAddress,proto3" json:"link_address,omitempty"` // 链接地址
	LinkIntro   string `protobuf:"bytes,5,opt,name=link_intro,json=linkIntro,proto3" json:"link_intro,omitempty"`       // 链接介绍
	CreatedAt   int64  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`      // 创建时间
	UpdatedAt   int64  `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`      // 更新时间
}

func (x *FriendLink) Reset() {
	*x = FriendLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendLink) ProtoMessage() {}

func (x *FriendLink) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendLink.ProtoReflect.Descriptor instead.
func (*FriendLink) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{60}
}

func (x *FriendLink) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FriendLink) GetLinkName() string {
	if x != nil {
		return x.LinkName
	}
	return ""
}

func (x *FriendLink) GetLinkAvatar() string {
	if x != nil {
		return x.LinkAvatar
	}
	return ""
}

func (x *FriendLink) GetLinkAddress() string {
	if x != nil {
		return x.LinkAddress
	}
	return ""
}

func (x *FriendLink) GetLinkIntro() string {
	if x != nil {
		return x.LinkIntro
	}
	return ""
}

func (x *FriendLink) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FriendLink) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type FriendLinkPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*FriendLink `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FriendLinkPageResp) Reset() {
	*x = FriendLinkPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendLinkPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendLinkPageResp) ProtoMessage() {}

func (x *FriendLinkPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendLinkPageResp.ProtoReflect.Descriptor instead.
func (*FriendLinkPageResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{61}
}

func (x *FriendLinkPageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FriendLinkPageResp) GetList() []*FriendLink {
	if x != nil {
		return x.List
	}
	return nil
}

type Remark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                              // 主键id
	Nickname       string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`                                   // 昵称
	Avatar         string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`                                       // 头像
	MessageContent string `protobuf:"bytes,4,opt,name=message_content,json=messageContent,proto3" json:"message_content,omitempty"` // 留言内容
	IpAddress      string `protobuf:"bytes,5,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`                // 用户ip
	IpSource       string `protobuf:"bytes,6,opt,name=ip_source,json=ipSource,proto3" json:"ip_source,omitempty"`                   // 用户地址
	Time           int64  `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`                                          // 弹幕速度
	IsReview       int64  `protobuf:"varint,8,opt,name=is_review,json=isReview,proto3" json:"is_review,omitempty"`                  // 是否审核
	CreatedAt      int64  `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`               // 发布时间
	UpdatedAt      int64  `protobuf:"varint,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`              // 更新时间
}

func (x *Remark) Reset() {
	*x = Remark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Remark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Remark) ProtoMessage() {}

func (x *Remark) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Remark.ProtoReflect.Descriptor instead.
func (*Remark) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{62}
}

func (x *Remark) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Remark) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Remark) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Remark) GetMessageContent() string {
	if x != nil {
		return x.MessageContent
	}
	return ""
}

func (x *Remark) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Remark) GetIpSource() string {
	if x != nil {
		return x.IpSource
	}
	return ""
}

func (x *Remark) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Remark) GetIsReview() int64 {
	if x != nil {
		return x.IsReview
	}
	return 0
}

func (x *Remark) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Remark) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type RemarkPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Remark `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *RemarkPageResp) Reset() {
	*x = RemarkPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemarkPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemarkPageResp) ProtoMessage() {}

func (x *RemarkPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemarkPageResp.ProtoReflect.Descriptor instead.
func (*RemarkPageResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{63}
}

func (x *RemarkPageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RemarkPageResp) GetList() []*Remark {
	if x != nil {
		return x.List
	}
	return nil
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                              // 主键
	TopicId        int64  `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`                     // 主题id
	ParentId       int64  `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`                  // 父评论id
	SessionId      int64  `protobuf:"varint,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`               // 会话id
	UserId         int64  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // 评论用户id
	ReplyUserId    int64  `protobuf:"varint,6,opt,name=reply_user_id,json=replyUserId,proto3" json:"reply_user_id,omitempty"`       // 评论回复用户id
	CommentContent string `protobuf:"bytes,7,opt,name=comment_content,json=commentContent,proto3" json:"comment_content,omitempty"` // 评论内容
	Type           int64  `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`                                          // 评论类型 1.文章 2.友链 3.说说
	Status         int64  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                                      // 状态 0.正常 1.已编辑 2.已删除
	IsReview       int64  `protobuf:"varint,10,opt,name=is_review,json=isReview,proto3" json:"is_review,omitempty"`                 // 是否审核
	CreatedAt      int64  `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`              // 评论时间
	UpdatedAt      int64  `protobuf:"varint,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`              // 更新时间
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{64}
}

func (x *Comment) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Comment) GetTopicId() int64 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *Comment) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Comment) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *Comment) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Comment) GetReplyUserId() int64 {
	if x != nil {
		return x.ReplyUserId
	}
	return 0
}

func (x *Comment) GetCommentContent() string {
	if x != nil {
		return x.CommentContent
	}
	return ""
}

func (x *Comment) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Comment) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Comment) GetIsReview() int64 {
	if x != nil {
		return x.IsReview
	}
	return 0
}

func (x *Comment) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Comment) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type CommentPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Comment `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CommentPageResp) Reset() {
	*x = CommentPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentPageResp) ProtoMessage() {}

func (x *CommentPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentPageResp.ProtoReflect.Descriptor instead.
func (*CommentPageResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{65}
}

func (x *CommentPageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CommentPageResp) GetList() []*Comment {
	if x != nil {
		return x.List
	}
	return nil
}

type CommentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                              // 主键
	TopicId        int64         `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`                     // 主题id
	ParentId       int64         `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`                  // 父评论id
	SessionId      int64         `protobuf:"varint,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`               // 会话id
	UserId         int64         `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // 评论用户id
	ReplyUserId    int64         `protobuf:"varint,6,opt,name=reply_user_id,json=replyUserId,proto3" json:"reply_user_id,omitempty"`       // 评论回复用户id
	CommentContent string        `protobuf:"bytes,7,opt,name=comment_content,json=commentContent,proto3" json:"comment_content,omitempty"` // 评论内容
	Type           int64         `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`                                          // 评论类型 1.文章 2.友链 3.说说
	Status         int64         `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                                      // 状态 0.正常 1.已编辑 2.已删除
	IsReview       int64         `protobuf:"varint,10,opt,name=is_review,json=isReview,proto3" json:"is_review,omitempty"`                 // 是否审核
	CreatedAt      int64         `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`              // 评论时间
	UpdatedAt      int64         `protobuf:"varint,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`              // 更新时间
	User           *UserInfoResp `protobuf:"bytes,13,opt,name=user,proto3" json:"user,omitempty"`                                          // 用户信息
	ReplyUser      *UserInfoResp `protobuf:"bytes,14,opt,name=reply_user,json=replyUser,proto3" json:"reply_user,omitempty"`               // 回复用户信息
	LikeCount      int64         `protobuf:"varint,15,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`              // 点赞数
}

func (x *CommentReply) Reset() {
	*x = CommentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentReply) ProtoMessage() {}

func (x *CommentReply) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentReply.ProtoReflect.Descriptor instead.
func (*CommentReply) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{66}
}

func (x *CommentReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommentReply) GetTopicId() int64 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *CommentReply) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CommentReply) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *CommentReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CommentReply) GetReplyUserId() int64 {
	if x != nil {
		return x.ReplyUserId
	}
	return 0
}

func (x *CommentReply) GetCommentContent() string {
	if x != nil {
		return x.CommentContent
	}
	return ""
}

func (x *CommentReply) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CommentReply) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CommentReply) GetIsReview() int64 {
	if x != nil {
		return x.IsReview
	}
	return 0
}

func (x *CommentReply) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CommentReply) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *CommentReply) GetUser() *UserInfoResp {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CommentReply) GetReplyUser() *UserInfoResp {
	if x != nil {
		return x.ReplyUser
	}
	return nil
}

func (x *CommentReply) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

type CommentReplyPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*CommentReply `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CommentReplyPageResp) Reset() {
	*x = CommentReplyPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentReplyPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentReplyPageResp) ProtoMessage() {}

func (x *CommentReplyPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentReplyPageResp.ProtoReflect.Descriptor instead.
func (*CommentReplyPageResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{67}
}

func (x *CommentReplyPageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CommentReplyPageResp) GetList() []*CommentReply {
	if x != nil {
		return x.List
	}
	return nil
}

type Photo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                // 主键
	AlbumId   int64  `protobuf:"varint,2,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`       // 相册id
	PhotoName string `protobuf:"bytes,3,opt,name=photo_name,json=photoName,proto3" json:"photo_name,omitempty"`  // 照片名
	PhotoDesc string `protobuf:"bytes,4,opt,name=photo_desc,json=photoDesc,proto3" json:"photo_desc,omitempty"`  // 照片描述
	PhotoSrc  string `protobuf:"bytes,5,opt,name=photo_src,json=photoSrc,proto3" json:"photo_src,omitempty"`     // 照片地址
	IsDelete  int64  `protobuf:"varint,6,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`    // 是否删除
	CreatedAt int64  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt int64  `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
}

func (x *Photo) Reset() {
	*x = Photo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Photo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Photo) ProtoMessage() {}

func (x *Photo) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Photo.ProtoReflect.Descriptor instead.
func (*Photo) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{68}
}

func (x *Photo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Photo) GetAlbumId() int64 {
	if x != nil {
		return x.AlbumId
	}
	return 0
}

func (x *Photo) GetPhotoName() string {
	if x != nil {
		return x.PhotoName
	}
	return ""
}

func (x *Photo) GetPhotoDesc() string {
	if x != nil {
		return x.PhotoDesc
	}
	return ""
}

func (x *Photo) GetPhotoSrc() string {
	if x != nil {
		return x.PhotoSrc
	}
	return ""
}

func (x *Photo) GetIsDelete() int64 {
	if x != nil {
		return x.IsDelete
	}
	return 0
}

func (x *Photo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Photo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type PhotoPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Photo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PhotoPageResp) Reset() {
	*x = PhotoPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoPageResp) ProtoMessage() {}

func (x *PhotoPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoPageResp.ProtoReflect.Descriptor instead.
func (*PhotoPageResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{69}
}

func (x *PhotoPageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PhotoPageResp) GetList() []*Photo {
	if x != nil {
		return x.List
	}
	return nil
}

type PhotoAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                  // 主键
	AlbumName  string `protobuf:"bytes,2,opt,name=album_name,json=albumName,proto3" json:"album_name,omitempty"`    // 相册名
	AlbumDesc  string `protobuf:"bytes,3,opt,name=album_desc,json=albumDesc,proto3" json:"album_desc,omitempty"`    // 相册描述
	AlbumCover string `protobuf:"bytes,4,opt,name=album_cover,json=albumCover,proto3" json:"album_cover,omitempty"` // 相册封面
	IsDelete   int64  `protobuf:"varint,5,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`      // 是否删除
	Status     int64  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                          // 状态值 1公开 2私密
	CreatedAt  int64  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`   // 创建时间
	UpdatedAt  int64  `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`   // 更新时间
}

func (x *PhotoAlbum) Reset() {
	*x = PhotoAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoAlbum) ProtoMessage() {}

func (x *PhotoAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoAlbum.ProtoReflect.Descriptor instead.
func (*PhotoAlbum) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{70}
}

func (x *PhotoAlbum) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PhotoAlbum) GetAlbumName() string {
	if x != nil {
		return x.AlbumName
	}
	return ""
}

func (x *PhotoAlbum) GetAlbumDesc() string {
	if x != nil {
		return x.AlbumDesc
	}
	return ""
}

func (x *PhotoAlbum) GetAlbumCover() string {
	if x != nil {
		return x.AlbumCover
	}
	return ""
}

func (x *PhotoAlbum) GetIsDelete() int64 {
	if x != nil {
		return x.IsDelete
	}
	return 0
}

func (x *PhotoAlbum) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PhotoAlbum) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PhotoAlbum) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type PhotoAlbumPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*PhotoAlbum `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PhotoAlbumPageResp) Reset() {
	*x = PhotoAlbumPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoAlbumPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoAlbumPageResp) ProtoMessage() {}

func (x *PhotoAlbumPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoAlbumPageResp.ProtoReflect.Descriptor instead.
func (*PhotoAlbumPageResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{71}
}

func (x *PhotoAlbumPageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PhotoAlbumPageResp) GetList() []*PhotoAlbum {
	if x != nil {
		return x.List
	}
	return nil
}

// ************* blog 页面管理 *************
type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                // 页面id
	PageName  string `protobuf:"bytes,2,opt,name=page_name,json=pageName,proto3" json:"page_name,omitempty"`     // 页面名
	PageLabel string `protobuf:"bytes,3,opt,name=page_label,json=pageLabel,proto3" json:"page_label,omitempty"`  // 页面标签
	PageCover string `protobuf:"bytes,4,opt,name=page_cover,json=pageCover,proto3" json:"page_cover,omitempty"`  // 页面封面
	CreatedAt int64  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt int64  `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{72}
}

func (x *Page) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Page) GetPageName() string {
	if x != nil {
		return x.PageName
	}
	return ""
}

func (x *Page) GetPageLabel() string {
	if x != nil {
		return x.PageLabel
	}
	return ""
}

func (x *Page) GetPageCover() string {
	if x != nil {
		return x.PageCover
	}
	return ""
}

func (x *Page) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Page) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type PagePageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Page `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PagePageResp) Reset() {
	*x = PagePageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagePageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagePageResp) ProtoMessage() {}

func (x *PagePageResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagePageResp.ProtoReflect.Descriptor instead.
func (*PagePageResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{73}
}

func (x *PagePageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PagePageResp) GetList() []*Page {
	if x != nil {
		return x.List
	}
	return nil
}

// ************* blog 说说管理 *************
type Talk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                // 说说id
	UserId    int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // 用户id
	Content   string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                       // 说说内容
	Images    string `protobuf:"bytes,4,opt,name=images,proto3" json:"images,omitempty"`                         // 图片
	IsTop     int64  `protobuf:"varint,5,opt,name=is_top,json=isTop,proto3" json:"is_top,omitempty"`             // 是否置顶
	Status    int64  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                        // 状态 1.公开 2.私密
	CreatedAt int64  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt int64  `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
}

func (x *Talk) Reset() {
	*x = Talk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Talk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Talk) ProtoMessage() {}

func (x *Talk) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Talk.ProtoReflect.Descriptor instead.
func (*Talk) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{74}
}

func (x *Talk) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Talk) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Talk) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Talk) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *Talk) GetIsTop() int64 {
	if x != nil {
		return x.IsTop
	}
	return 0
}

func (x *Talk) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Talk) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Talk) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type TalkDetailsDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId       int64    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                    // 用户ID
	Nickname     string   `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`                               // 用户昵称
	Avatar       string   `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`                                   // 用户头像
	Content      string   `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                                 // 评论内容
	ImgList      []string `protobuf:"bytes,6,rep,name=img_list,json=imgList,proto3" json:"img_list,omitempty"`                  // 图片URL列表
	IsTop        int64    `protobuf:"varint,7,opt,name=is_top,json=isTop,proto3" json:"is_top,omitempty"`                       // 是否置顶
	Status       int64    `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`                                  // 状态
	LikeCount    int64    `protobuf:"varint,9,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`           // 点赞量
	CommentCount int64    `protobuf:"varint,10,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"` // 评论量
	CreatedAt    int64    `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`          // 创建时间
	UpdatedAt    int64    `protobuf:"varint,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`          // 更新时间
}

func (x *TalkDetailsDTO) Reset() {
	*x = TalkDetailsDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkDetailsDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkDetailsDTO) ProtoMessage() {}

func (x *TalkDetailsDTO) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkDetailsDTO.ProtoReflect.Descriptor instead.
func (*TalkDetailsDTO) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{75}
}

func (x *TalkDetailsDTO) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TalkDetailsDTO) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TalkDetailsDTO) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *TalkDetailsDTO) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *TalkDetailsDTO) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TalkDetailsDTO) GetImgList() []string {
	if x != nil {
		return x.ImgList
	}
	return nil
}

func (x *TalkDetailsDTO) GetIsTop() int64 {
	if x != nil {
		return x.IsTop
	}
	return 0
}

func (x *TalkDetailsDTO) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TalkDetailsDTO) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *TalkDetailsDTO) GetCommentCount() int64 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *TalkDetailsDTO) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TalkDetailsDTO) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type TalkPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Talk `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TalkPageResp) Reset() {
	*x = TalkPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkPageResp) ProtoMessage() {}

func (x *TalkPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkPageResp.ProtoReflect.Descriptor instead.
func (*TalkPageResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{76}
}

func (x *TalkPageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TalkPageResp) GetList() []*Talk {
	if x != nil {
		return x.List
	}
	return nil
}

// ************* blog 日志管理 *************
type OperationLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                // 主键id
	UserId         int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                          // 用户id
	Nickname       string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`                                     // 用户昵称
	IpAddress      string `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`                  // 操作ip
	IpSource       string `protobuf:"bytes,5,opt,name=ip_source,json=ipSource,proto3" json:"ip_source,omitempty"`                     // 操作地址
	OptModule      string `protobuf:"bytes,6,opt,name=opt_module,json=optModule,proto3" json:"opt_module,omitempty"`                  // 操作模块
	OptDesc        string `protobuf:"bytes,7,opt,name=opt_desc,json=optDesc,proto3" json:"opt_desc,omitempty"`                        // 操作描述
	RequestUrl     string `protobuf:"bytes,8,opt,name=request_url,json=requestUrl,proto3" json:"request_url,omitempty"`               // 请求地址
	RequestMethod  string `protobuf:"bytes,9,opt,name=request_method,json=requestMethod,proto3" json:"request_method,omitempty"`      // 请求方式
	RequestHeader  string `protobuf:"bytes,10,opt,name=request_header,json=requestHeader,proto3" json:"request_header,omitempty"`     // 请求头参数
	RequestData    string `protobuf:"bytes,11,opt,name=request_data,json=requestData,proto3" json:"request_data,omitempty"`           // 请求参数
	ResponseData   string `protobuf:"bytes,12,opt,name=response_data,json=responseData,proto3" json:"response_data,omitempty"`        // 返回数据
	ResponseStatus int64  `protobuf:"varint,13,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"` // 响应状态码
	Cost           string `protobuf:"bytes,14,opt,name=cost,proto3" json:"cost,omitempty"`                                            // 耗时（ms）
	CreatedAt      int64  `protobuf:"varint,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                // 创建时间
	UpdatedAt      int64  `protobuf:"varint,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                // 更新时间
}

func (x *OperationLog) Reset() {
	*x = OperationLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationLog) ProtoMessage() {}

func (x *OperationLog) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationLog.ProtoReflect.Descriptor instead.
func (*OperationLog) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{77}
}

func (x *OperationLog) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OperationLog) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OperationLog) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *OperationLog) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *OperationLog) GetIpSource() string {
	if x != nil {
		return x.IpSource
	}
	return ""
}

func (x *OperationLog) GetOptModule() string {
	if x != nil {
		return x.OptModule
	}
	return ""
}

func (x *OperationLog) GetOptDesc() string {
	if x != nil {
		return x.OptDesc
	}
	return ""
}

func (x *OperationLog) GetRequestUrl() string {
	if x != nil {
		return x.RequestUrl
	}
	return ""
}

func (x *OperationLog) GetRequestMethod() string {
	if x != nil {
		return x.RequestMethod
	}
	return ""
}

func (x *OperationLog) GetRequestHeader() string {
	if x != nil {
		return x.RequestHeader
	}
	return ""
}

func (x *OperationLog) GetRequestData() string {
	if x != nil {
		return x.RequestData
	}
	return ""
}

func (x *OperationLog) GetResponseData() string {
	if x != nil {
		return x.ResponseData
	}
	return ""
}

func (x *OperationLog) GetResponseStatus() int64 {
	if x != nil {
		return x.ResponseStatus
	}
	return 0
}

func (x *OperationLog) GetCost() string {
	if x != nil {
		return x.Cost
	}
	return ""
}

func (x *OperationLog) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *OperationLog) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type OperationLogPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*OperationLog `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *OperationLogPageResp) Reset() {
	*x = OperationLogPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationLogPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationLogPageResp) ProtoMessage() {}

func (x *OperationLogPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationLogPageResp.ProtoReflect.Descriptor instead.
func (*OperationLogPageResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{78}
}

func (x *OperationLogPageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OperationLogPageResp) GetList() []*OperationLog {
	if x != nil {
		return x.List
	}
	return nil
}

type ChatRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                 // 主键
	UserId    int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`           // 用户id
	Nickname  string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`                      // 昵称
	Avatar    string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`                          // 头像
	Content   string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                        // 聊天内容
	IpAddress string `protobuf:"bytes,6,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`   // ip地址
	IpSource  string `protobuf:"bytes,7,opt,name=ip_source,json=ipSource,proto3" json:"ip_source,omitempty"`      // ip来源
	Type      int64  `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`                             // 类型
	CreatedAt int64  `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`  // 创建时间
	UpdatedAt int64  `protobuf:"varint,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
}

func (x *ChatRecord) Reset() {
	*x = ChatRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRecord) ProtoMessage() {}

func (x *ChatRecord) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRecord.ProtoReflect.Descriptor instead.
func (*ChatRecord) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{79}
}

func (x *ChatRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChatRecord) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChatRecord) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ChatRecord) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *ChatRecord) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ChatRecord) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ChatRecord) GetIpSource() string {
	if x != nil {
		return x.IpSource
	}
	return ""
}

func (x *ChatRecord) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ChatRecord) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ChatRecord) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type ChatRecordPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ChatRecord `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ChatRecordPageResp) Reset() {
	*x = ChatRecordPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRecordPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRecordPageResp) ProtoMessage() {}

func (x *ChatRecordPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRecordPageResp.ProtoReflect.Descriptor instead.
func (*ChatRecordPageResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{80}
}

func (x *ChatRecordPageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ChatRecordPageResp) GetList() []*ChatRecord {
	if x != nil {
		return x.List
	}
	return nil
}

type UploadRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                             // id
	UserId   int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       // 用户id
	Label    string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`                        // 标签
	FileName string `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`  // 文件名称
	FileSize int64  `protobuf:"varint,5,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"` // 文件大小
	FileMd5  string `protobuf:"bytes,6,opt,name=file_md5,json=fileMd5,proto3" json:"file_md5,omitempty"`     // 文件md5值
	FileUrl  string `protobuf:"bytes,7,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`     // 上传路径
}

func (x *UploadRecordReq) Reset() {
	*x = UploadRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRecordReq) ProtoMessage() {}

func (x *UploadRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRecordReq.ProtoReflect.Descriptor instead.
func (*UploadRecordReq) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{81}
}

func (x *UploadRecordReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UploadRecordReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UploadRecordReq) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *UploadRecordReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UploadRecordReq) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *UploadRecordReq) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

func (x *UploadRecordReq) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

type UploadRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                // id
	UserId    int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // 用户id
	Label     string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`                           // 标签
	FileName  string `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`     // 文件名称
	FileSize  int64  `protobuf:"varint,5,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`    // 文件大小
	FileMd5   string `protobuf:"bytes,6,opt,name=file_md5,json=fileMd5,proto3" json:"file_md5,omitempty"`        // 文件md5值
	FileUrl   string `protobuf:"bytes,7,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`        // 上传路径
	CreatedAt int64  `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt int64  `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
}

func (x *UploadRecordResp) Reset() {
	*x = UploadRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blog_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRecordResp) ProtoMessage() {}

func (x *UploadRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_blog_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRecordResp.ProtoReflect.Descriptor instead.
func (*UploadRecordResp) Descriptor() ([]byte, []int) {
	return file_blog_proto_rawDescGZIP(), []int{82}
}

func (x *UploadRecordResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UploadRecordResp) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UploadRecordResp) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *UploadRecordResp) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UploadRecordResp) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *UploadRecordResp) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

func (x *UploadRecordResp) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *UploadRecordResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UploadRecordResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

var File_blog_proto protoreflect.FileDescriptor

var file_blog_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x62, 0x6c,
	0x6f, 0x67, 0x22, 0x0a, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x22, 0x0b,
	0x0a, 0x09, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x17, 0x0a, 0x05, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x06, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x22, 0x86, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x3c, 0x0a, 0x09, 0x50, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x36, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22,
	0x6d, 0x0a, 0x0d, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x51,
	0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x30, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x21, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xe1,
	0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x22, 0x4b, 0x0a, 0x09, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x55, 0x0a, 0x0d, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x25, 0x0a, 0x11, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x5e, 0x0a,
	0x10, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2a, 0x0a,
	0x0c, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x09, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x24, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x6f, 0x66, 0x66, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x41, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x47, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x41, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x41, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x03, 0x41, 0x70,
	0x69, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x9b, 0x02, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x70, 0x69, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x22, 0x49, 0x0a, 0x0b, 0x41, 0x70, 0x69, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x70, 0x69, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x93, 0x02, 0x0a, 0x04,
	0x4d, 0x65, 0x6e, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xc9, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x6e, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x4b, 0x0a,
	0x0c, 0x4d, 0x65, 0x6e, 0x75, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x0b, 0x53, 0x79,
	0x6e, 0x63, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x65, 0x6e,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x4d, 0x65, 0x6e, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x6d, 0x65, 0x6e,
	0x75, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x6f, 0x6c, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69,
	0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc6, 0x02, 0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x2d, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x4b,
	0x0a, 0x0c, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x11, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x61, 0x70, 0x69, 0x49,
	0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x73, 0x22, 0x45, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61,
	0x70, 0x69, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x61, 0x70,
	0x69, 0x49, 0x64, 0x73, 0x22, 0x48, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x73, 0x22, 0xae,
	0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x54, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x85, 0x02, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa0, 0x03,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x22, 0x44, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x22, 0x46, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22,
	0x46, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x47, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73,
	0x22, 0x22, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4b, 0x65, 0x79, 0x22, 0x33, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x51, 0x0a, 0x0d, 0x53, 0x61, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x87, 0x03, 0x0a,
	0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06,
	0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x73,
	0x54, 0x6f, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x4a, 0x0a, 0x0f, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x21, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x2e, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x42, 0x79, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x67,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49,
	0x64, 0x73, 0x22, 0x3d, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x73, 0x22, 0x7d, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x4c, 0x0a, 0x10, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3c,
	0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x03,
	0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x42, 0x0a, 0x0b,
	0x54, 0x61, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x2f, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49,
	0x64, 0x22, 0x2d, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xa2, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x42, 0x0a, 0x0c, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x67,
	0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0x50, 0x0a, 0x0f, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54,
	0x61, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01, 0x0a, 0x0a, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x49,
	0x6e, 0x74, 0x72, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x50, 0x0a, 0x12, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xa0, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x48, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x20, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xdd, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x4a, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xdc, 0x03,
	0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x14,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x73,
	0x72, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x53,
	0x72, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x46, 0x0a,
	0x0d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xee, 0x01, 0x0a, 0x0a, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x50, 0x0a, 0x12, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x04, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x44, 0x0a, 0x0c, 0x50, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xce, 0x01, 0x0a, 0x04, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xd3, 0x02, 0x0a, 0x0e, 0x54, 0x61, 0x6c, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x6d, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6d, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x44, 0x0a, 0x0c, 0x54, 0x61, 0x6c, 0x6b, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xfb, 0x03,
	0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x54, 0x0a, 0x14, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x91, 0x02, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x50, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x64, 0x35,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xff, 0x01, 0x0a, 0x10, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6d, 0x64, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65,
	0x4d, 0x64, 0x35, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x32, 0xa4, 0x04, 0x0a,
	0x07, 0x41, 0x75, 0x74, 0x68, 0x52, 0x70, 0x63, 0x12, 0x28, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2a, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x0f, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a,
	0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x66, 0x66, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x4c, 0x6f, 0x67, 0x6f, 0x66, 0x66, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x08, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d,
	0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a,
	0x0a, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x13, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x44, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x13, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x41, 0x74, 0x12, 0x14, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x41, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x41, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x32, 0xe0, 0x02, 0x0a, 0x06, 0x41, 0x70, 0x69, 0x52, 0x70, 0x63, 0x12, 0x21,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x12, 0x09, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x41, 0x70, 0x69, 0x1a, 0x09, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x70,
	0x69, 0x12, 0x21, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x12, 0x09,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x70, 0x69, 0x1a, 0x09, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x41, 0x70, 0x69, 0x12, 0x29, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70,
	0x69, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2e, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x21, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x69, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41,
	0x70, 0x69, 0x12, 0x31, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x70, 0x69, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x70, 0x69,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x0c, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x41, 0x70,
	0x69, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x32, 0xf2, 0x02, 0x0a, 0x07, 0x4d, 0x65, 0x6e, 0x75, 0x52,
	0x70, 0x63, 0x12, 0x24, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75,
	0x12, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x1a, 0x0a, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x24, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65,
	0x6e, 0x75, 0x1a, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x2a,
	0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x0b, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x08, 0x46,
	0x69, 0x6e, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x6e, 0x75,
	0x12, 0x33, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x6e,
	0x75, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0d, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x32, 0xc1, 0x03, 0x0a, 0x07,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x70, 0x63, 0x12, 0x24, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x1a, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x24, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2f, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x23, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0b, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x11, 0x46, 0x69,
	0x6e, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x41, 0x70, 0x69, 0x73, 0x12, 0x17, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x32,
	0x89, 0x05, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x52, 0x70, 0x63, 0x12, 0x47, 0x0a, 0x18, 0x46,
	0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x33, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x69, 0x73, 0x12, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x70, 0x69,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x4d, 0x65, 0x6e, 0x75, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x0d,
	0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x0d, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x31, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x0f,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3e, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x0f,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3e, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3a, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x17, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x32, 0x78, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x70, 0x63, 0x12, 0x32, 0x0a, 0x0a, 0x53, 0x61, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x13, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x61,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x0a,
	0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x13, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x14, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x32, 0xff, 0x03, 0x0a, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x70, 0x63, 0x12, 0x2d, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x1a, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x12, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x1a, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x32, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x12, 0x39, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x10, 0x46,
	0x69, 0x6e, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x44, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x42, 0x79, 0x54, 0x61, 0x67, 0x12, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x1e, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x32, 0xb6, 0x03, 0x0a, 0x0b, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x70, 0x63, 0x12, 0x30, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1a, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1a, 0x0e, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0b, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2b, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x35, 0x0a,
	0x11, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x16, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3d, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x32, 0xb1, 0x03, 0x0a, 0x06, 0x54, 0x61, 0x67, 0x52, 0x70, 0x63, 0x12, 0x21, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x09, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x54, 0x61, 0x67, 0x1a, 0x09, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x67, 0x12, 0x21,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x09, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x54, 0x61, 0x67, 0x1a, 0x09, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61,
	0x67, 0x12, 0x29, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x0b,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x21, 0x0a, 0x07,
	0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x67, 0x12,
	0x31, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x30, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x16, 0x46, 0x69,
	0x6e, 0x64, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x32, 0x93, 0x03, 0x0a, 0x0d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x70, 0x63, 0x12, 0x36, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x10, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x10, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x36,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x30, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2f, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x10,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x3f, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69,
	0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x37, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c,
	0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0xdb, 0x02, 0x0a, 0x09, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x70, 0x63, 0x12, 0x2a, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x1a, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2a, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x1a, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x2c, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x27, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x37, 0x0a, 0x0e, 0x46, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x14, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0xdb, 0x03, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x70, 0x63, 0x12, 0x2d, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43,
	0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x0b, 0x4c, 0x69, 0x6b,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x32, 0xd1, 0x05, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x52, 0x70, 0x63, 0x12, 0x27, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x1a,
	0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x27, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x30, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0b,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x35, 0x0a, 0x0d, 0x46,
	0x69, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x13, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x32, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x10, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x1a, 0x10, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x36,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x12, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x1a, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2f, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x10,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x12, 0x3f, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x37, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0xbf, 0x02, 0x0a, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x52, 0x70, 0x63, 0x12, 0x24, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x1a, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0a, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x1a, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x23, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0b, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0d, 0x46, 0x69, 0x6e,
	0x64, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0xe9, 0x02, 0x0a,
	0x07, 0x74, 0x61, 0x6c, 0x6b, 0x52, 0x70, 0x63, 0x12, 0x24, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61,
	0x6c, 0x6b, 0x1a, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x24,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x0a, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x1a, 0x0a, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x54, 0x61, 0x6c, 0x6b, 0x12, 0x2a, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x6c, 0x6b, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2f, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x23, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x0b, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x33, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61,
	0x6c, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x54,
	0x61, 0x6c, 0x6b, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0d, 0x46,
	0x69, 0x6e, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x62,
	0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28,
	0x0a, 0x08, 0x4c, 0x69, 0x6b, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x32, 0xa6, 0x03, 0x0a, 0x06, 0x6c, 0x6f, 0x67,
	0x52, 0x70, 0x63, 0x12, 0x3c, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x12, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x67, 0x12, 0x3c, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x12, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12,
	0x32, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x10,
	0x46, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67,
	0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x67, 0x12, 0x43, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x62, 0x6c, 0x6f,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x32, 0x8d, 0x03, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x52, 0x70, 0x63, 0x12, 0x36, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x1a, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x10, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x30, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x35, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0b, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x18,
	0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x32, 0x86, 0x01, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x70, 0x63, 0x12,
	0x3b, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x15, 0x2e,
	0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0b,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x15, 0x2e, 0x62, 0x6c,
	0x6f, 0x67, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f,
	0x62, 0x6c, 0x6f, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blog_proto_rawDescOnce sync.Once
	file_blog_proto_rawDescData = file_blog_proto_rawDesc
)

func file_blog_proto_rawDescGZIP() []byte {
	file_blog_proto_rawDescOnce.Do(func() {
		file_blog_proto_rawDescData = protoimpl.X.CompressGZIP(file_blog_proto_rawDescData)
	})
	return file_blog_proto_rawDescData
}

var file_blog_proto_msgTypes = make([]protoimpl.MessageInfo, 84)
var file_blog_proto_goTypes = []any{
	(*EmptyReq)(nil),                 // 0: blog.EmptyReq
	(*EmptyResp)(nil),                // 1: blog.EmptyResp
	(*IdReq)(nil),                    // 2: blog.IdReq
	(*IdsReq)(nil),                   // 3: blog.IdsReq
	(*PageQuery)(nil),                // 4: blog.PageQuery
	(*PageLimit)(nil),                // 5: blog.PageLimit
	(*PageSort)(nil),                 // 6: blog.PageSort
	(*PageCondition)(nil),            // 7: blog.PageCondition
	(*PageResp)(nil),                 // 8: blog.PageResp
	(*BatchResp)(nil),                // 9: blog.BatchResp
	(*CountResp)(nil),                // 10: blog.CountResp
	(*LoginReq)(nil),                 // 11: blog.LoginReq
	(*LoginResp)(nil),                // 12: blog.LoginResp
	(*RoleLabel)(nil),                // 13: blog.RoleLabel
	(*OauthLoginReq)(nil),            // 14: blog.OauthLoginReq
	(*OauthLoginUrlResp)(nil),        // 15: blog.OauthLoginUrlResp
	(*ResetPasswordReq)(nil),         // 16: blog.ResetPasswordReq
	(*UserEmailReq)(nil),             // 17: blog.UserEmailReq
	(*LogoutReq)(nil),                // 18: blog.LogoutReq
	(*LogoffReq)(nil),                // 19: blog.LogoffReq
	(*GetLogoutAtReq)(nil),           // 20: blog.GetLogoutAtReq
	(*GetLogoutAtResp)(nil),          // 21: blog.GetLogoutAtResp
	(*Api)(nil),                      // 22: blog.Api
	(*ApiDetails)(nil),               // 23: blog.ApiDetails
	(*ApiPageResp)(nil),              // 24: blog.ApiPageResp
	(*Menu)(nil),                     // 25: blog.Menu
	(*MenuDetails)(nil),              // 26: blog.MenuDetails
	(*MenuPageResp)(nil),             // 27: blog.MenuPageResp
	(*SyncMenuReq)(nil),              // 28: blog.SyncMenuReq
	(*Role)(nil),                     // 29: blog.Role
	(*RoleDetails)(nil),              // 30: blog.RoleDetails
	(*RolePageResp)(nil),             // 31: blog.RolePageResp
	(*RoleResourcesResp)(nil),        // 32: blog.RoleResourcesResp
	(*UpdateRoleApisReq)(nil),        // 33: blog.UpdateRoleApisReq
	(*UpdateRoleMenusReq)(nil),       // 34: blog.UpdateRoleMenusReq
	(*LoginHistory)(nil),             // 35: blog.LoginHistory
	(*LoginHistoryPageResp)(nil),     // 36: blog.LoginHistoryPageResp
	(*UserInfoResp)(nil),             // 37: blog.UserInfoResp
	(*User)(nil),                     // 38: blog.User
	(*UserPageResp)(nil),             // 39: blog.UserPageResp
	(*UpdateUserInfoReq)(nil),        // 40: blog.UpdateUserInfoReq
	(*UpdateUserAvatarReq)(nil),      // 41: blog.UpdateUserAvatarReq
	(*UpdateUserStatusReq)(nil),      // 42: blog.UpdateUserStatusReq
	(*UpdateUserRoleReq)(nil),        // 43: blog.UpdateUserRoleReq
	(*UserReq)(nil),                  // 44: blog.UserReq
	(*FindConfigReq)(nil),            // 45: blog.FindConfigReq
	(*FindConfigResp)(nil),           // 46: blog.FindConfigResp
	(*SaveConfigReq)(nil),            // 47: blog.SaveConfigReq
	(*Article)(nil),                  // 48: blog.Article
	(*ArticlePageResp)(nil),          // 49: blog.ArticlePageResp
	(*FindArticleByTagReq)(nil),      // 50: blog.FindArticleByTagReq
	(*FindArticleByCategoryReq)(nil), // 51: blog.FindArticleByCategoryReq
	(*Category)(nil),                 // 52: blog.Category
	(*CategoryPageResp)(nil),         // 53: blog.CategoryPageResp
	(*FindCategoryByNameReq)(nil),    // 54: blog.FindCategoryByNameReq
	(*Tag)(nil),                      // 55: blog.Tag
	(*TagPageResp)(nil),              // 56: blog.TagPageResp
	(*FindTagArticleCountReq)(nil),   // 57: blog.FindTagArticleCountReq
	(*FindTagByNameReq)(nil),         // 58: blog.FindTagByNameReq
	(*TagMapResp)(nil),               // 59: blog.TagMapResp
	(*FriendLink)(nil),               // 60: blog.FriendLink
	(*FriendLinkPageResp)(nil),       // 61: blog.FriendLinkPageResp
	(*Remark)(nil),                   // 62: blog.Remark
	(*RemarkPageResp)(nil),           // 63: blog.RemarkPageResp
	(*Comment)(nil),                  // 64: blog.Comment
	(*CommentPageResp)(nil),          // 65: blog.CommentPageResp
	(*CommentReply)(nil),             // 66: blog.CommentReply
	(*CommentReplyPageResp)(nil),     // 67: blog.CommentReplyPageResp
	(*Photo)(nil),                    // 68: blog.Photo
	(*PhotoPageResp)(nil),            // 69: blog.PhotoPageResp
	(*PhotoAlbum)(nil),               // 70: blog.PhotoAlbum
	(*PhotoAlbumPageResp)(nil),       // 71: blog.PhotoAlbumPageResp
	(*Page)(nil),                     // 72: blog.Page
	(*PagePageResp)(nil),             // 73: blog.PagePageResp
	(*Talk)(nil),                     // 74: blog.Talk
	(*TalkDetailsDTO)(nil),           // 75: blog.TalkDetailsDTO
	(*TalkPageResp)(nil),             // 76: blog.TalkPageResp
	(*OperationLog)(nil),             // 77: blog.OperationLog
	(*OperationLogPageResp)(nil),     // 78: blog.OperationLogPageResp
	(*ChatRecord)(nil),               // 79: blog.ChatRecord
	(*ChatRecordPageResp)(nil),       // 80: blog.ChatRecordPageResp
	(*UploadRecordReq)(nil),          // 81: blog.UploadRecordReq
	(*UploadRecordResp)(nil),         // 82: blog.UploadRecordResp
	nil,                              // 83: blog.TagMapResp.TagMapListEntry
}
var file_blog_proto_depIdxs = []int32{
	13,  // 0: blog.LoginResp.roles:type_name -> blog.RoleLabel
	23,  // 1: blog.ApiDetails.children:type_name -> blog.ApiDetails
	23,  // 2: blog.ApiPageResp.list:type_name -> blog.ApiDetails
	26,  // 3: blog.MenuDetails.children:type_name -> blog.MenuDetails
	26,  // 4: blog.MenuPageResp.list:type_name -> blog.MenuDetails
	26,  // 5: blog.SyncMenuReq.menus:type_name -> blog.MenuDetails
	30,  // 6: blog.RoleDetails.children:type_name -> blog.RoleDetails
	30,  // 7: blog.RolePageResp.list:type_name -> blog.RoleDetails
	35,  // 8: blog.LoginHistoryPageResp.list:type_name -> blog.LoginHistory
	13,  // 9: blog.User.roles:type_name -> blog.RoleLabel
	38,  // 10: blog.UserPageResp.list:type_name -> blog.User
	48,  // 11: blog.ArticlePageResp.list:type_name -> blog.Article
	52,  // 12: blog.CategoryPageResp.list:type_name -> blog.Category
	55,  // 13: blog.TagPageResp.list:type_name -> blog.Tag
	83,  // 14: blog.TagMapResp.tag_map_list:type_name -> blog.TagMapResp.TagMapListEntry
	60,  // 15: blog.FriendLinkPageResp.list:type_name -> blog.FriendLink
	62,  // 16: blog.RemarkPageResp.list:type_name -> blog.Remark
	64,  // 17: blog.CommentPageResp.list:type_name -> blog.Comment
	37,  // 18: blog.CommentReply.user:type_name -> blog.UserInfoResp
	37,  // 19: blog.CommentReply.reply_user:type_name -> blog.UserInfoResp
	66,  // 20: blog.CommentReplyPageResp.list:type_name -> blog.CommentReply
	68,  // 21: blog.PhotoPageResp.list:type_name -> blog.Photo
	70,  // 22: blog.PhotoAlbumPageResp.list:type_name -> blog.PhotoAlbum
	72,  // 23: blog.PagePageResp.list:type_name -> blog.Page
	74,  // 24: blog.TalkPageResp.list:type_name -> blog.Talk
	77,  // 25: blog.OperationLogPageResp.list:type_name -> blog.OperationLog
	79,  // 26: blog.ChatRecordPageResp.list:type_name -> blog.ChatRecord
	56,  // 27: blog.TagMapResp.TagMapListEntry.value:type_name -> blog.TagPageResp
	11,  // 28: blog.AuthRpc.Login:input_type -> blog.LoginReq
	18,  // 29: blog.AuthRpc.Logout:input_type -> blog.LogoutReq
	19,  // 30: blog.AuthRpc.Logoff:input_type -> blog.LogoffReq
	11,  // 31: blog.AuthRpc.Register:input_type -> blog.LoginReq
	16,  // 32: blog.AuthRpc.ResetPassword:input_type -> blog.ResetPasswordReq
	17,  // 33: blog.AuthRpc.SendRegisterEmail:input_type -> blog.UserEmailReq
	17,  // 34: blog.AuthRpc.SendResetPasswordEmail:input_type -> blog.UserEmailReq
	14,  // 35: blog.AuthRpc.OauthLogin:input_type -> blog.OauthLoginReq
	14,  // 36: blog.AuthRpc.GetOauthAuthorizeUrl:input_type -> blog.OauthLoginReq
	20,  // 37: blog.AuthRpc.GetLogoutAt:input_type -> blog.GetLogoutAtReq
	22,  // 38: blog.ApiRpc.CreateApi:input_type -> blog.Api
	22,  // 39: blog.ApiRpc.UpdateApi:input_type -> blog.Api
	2,   // 40: blog.ApiRpc.DeleteApi:input_type -> blog.IdReq
	3,   // 41: blog.ApiRpc.DeleteApiList:input_type -> blog.IdsReq
	2,   // 42: blog.ApiRpc.FindApi:input_type -> blog.IdReq
	4,   // 43: blog.ApiRpc.FindApiList:input_type -> blog.PageQuery
	0,   // 44: blog.ApiRpc.SyncApiList:input_type -> blog.EmptyReq
	0,   // 45: blog.ApiRpc.CleanApiList:input_type -> blog.EmptyReq
	25,  // 46: blog.MenuRpc.CreateMenu:input_type -> blog.Menu
	25,  // 47: blog.MenuRpc.UpdateMenu:input_type -> blog.Menu
	2,   // 48: blog.MenuRpc.DeleteMenu:input_type -> blog.IdReq
	3,   // 49: blog.MenuRpc.DeleteMenuList:input_type -> blog.IdsReq
	2,   // 50: blog.MenuRpc.FindMenu:input_type -> blog.IdReq
	4,   // 51: blog.MenuRpc.FindMenuList:input_type -> blog.PageQuery
	28,  // 52: blog.MenuRpc.SyncMenuList:input_type -> blog.SyncMenuReq
	0,   // 53: blog.MenuRpc.CleanMenuList:input_type -> blog.EmptyReq
	29,  // 54: blog.RoleRpc.CreateRole:input_type -> blog.Role
	29,  // 55: blog.RoleRpc.UpdateRole:input_type -> blog.Role
	2,   // 56: blog.RoleRpc.DeleteRole:input_type -> blog.IdReq
	3,   // 57: blog.RoleRpc.DeleteRoleList:input_type -> blog.IdsReq
	2,   // 58: blog.RoleRpc.FindRole:input_type -> blog.IdReq
	4,   // 59: blog.RoleRpc.FindRoleList:input_type -> blog.PageQuery
	2,   // 60: blog.RoleRpc.FindRoleResources:input_type -> blog.IdReq
	34,  // 61: blog.RoleRpc.UpdateRoleMenus:input_type -> blog.UpdateRoleMenusReq
	33,  // 62: blog.RoleRpc.UpdateRoleApis:input_type -> blog.UpdateRoleApisReq
	4,   // 63: blog.UserRpc.FindUserLoginHistoryList:input_type -> blog.PageQuery
	3,   // 64: blog.UserRpc.DeleteUserLoginHistoryList:input_type -> blog.IdsReq
	4,   // 65: blog.UserRpc.FindUserList:input_type -> blog.PageQuery
	44,  // 66: blog.UserRpc.FindUserApis:input_type -> blog.UserReq
	44,  // 67: blog.UserRpc.FindUserMenus:input_type -> blog.UserReq
	44,  // 68: blog.UserRpc.FindUserRoles:input_type -> blog.UserReq
	44,  // 69: blog.UserRpc.FindUserInfo:input_type -> blog.UserReq
	40,  // 70: blog.UserRpc.UpdateUserInfo:input_type -> blog.UpdateUserInfoReq
	41,  // 71: blog.UserRpc.UpdateUserAvatar:input_type -> blog.UpdateUserAvatarReq
	42,  // 72: blog.UserRpc.UpdateUserStatus:input_type -> blog.UpdateUserStatusReq
	43,  // 73: blog.UserRpc.UpdateUserRole:input_type -> blog.UpdateUserRoleReq
	47,  // 74: blog.ConfigRpc.SaveConfig:input_type -> blog.SaveConfigReq
	45,  // 75: blog.ConfigRpc.FindConfig:input_type -> blog.FindConfigReq
	48,  // 76: blog.ArticleRpc.CreateArticle:input_type -> blog.Article
	48,  // 77: blog.ArticleRpc.UpdateArticle:input_type -> blog.Article
	2,   // 78: blog.ArticleRpc.DeleteArticle:input_type -> blog.IdReq
	3,   // 79: blog.ArticleRpc.DeleteArticleList:input_type -> blog.IdsReq
	2,   // 80: blog.ArticleRpc.FindArticle:input_type -> blog.IdReq
	4,   // 81: blog.ArticleRpc.FindArticleList:input_type -> blog.PageQuery
	4,   // 82: blog.ArticleRpc.FindArticleCount:input_type -> blog.PageQuery
	50,  // 83: blog.ArticleRpc.FindArticleByTag:input_type -> blog.FindArticleByTagReq
	51,  // 84: blog.ArticleRpc.FindArticleByCategory:input_type -> blog.FindArticleByCategoryReq
	52,  // 85: blog.CategoryRpc.CreateCategory:input_type -> blog.Category
	52,  // 86: blog.CategoryRpc.UpdateCategory:input_type -> blog.Category
	2,   // 87: blog.CategoryRpc.DeleteCategory:input_type -> blog.IdReq
	3,   // 88: blog.CategoryRpc.DeleteCategoryList:input_type -> blog.IdsReq
	2,   // 89: blog.CategoryRpc.FindCategory:input_type -> blog.IdReq
	4,   // 90: blog.CategoryRpc.FindCategoryCount:input_type -> blog.PageQuery
	4,   // 91: blog.CategoryRpc.FindCategoryList:input_type -> blog.PageQuery
	3,   // 92: blog.CategoryRpc.FindCategoryListByIds:input_type -> blog.IdsReq
	55,  // 93: blog.TagRpc.CreateTag:input_type -> blog.Tag
	55,  // 94: blog.TagRpc.UpdateTag:input_type -> blog.Tag
	2,   // 95: blog.TagRpc.DeleteTag:input_type -> blog.IdReq
	3,   // 96: blog.TagRpc.DeleteTagList:input_type -> blog.IdsReq
	2,   // 97: blog.TagRpc.FindTag:input_type -> blog.IdReq
	4,   // 98: blog.TagRpc.FindTagList:input_type -> blog.PageQuery
	4,   // 99: blog.TagRpc.FindTagCount:input_type -> blog.PageQuery
	57,  // 100: blog.TagRpc.FindTagArticleCount:input_type -> blog.FindTagArticleCountReq
	3,   // 101: blog.TagRpc.FindTagMapByArticleIds:input_type -> blog.IdsReq
	60,  // 102: blog.FriendLinkRpc.CreateFriendLink:input_type -> blog.FriendLink
	60,  // 103: blog.FriendLinkRpc.UpdateFriendLink:input_type -> blog.FriendLink
	2,   // 104: blog.FriendLinkRpc.DeleteFriendLink:input_type -> blog.IdReq
	3,   // 105: blog.FriendLinkRpc.DeleteFriendLinkList:input_type -> blog.IdsReq
	2,   // 106: blog.FriendLinkRpc.FindFriendLink:input_type -> blog.IdReq
	4,   // 107: blog.FriendLinkRpc.FindFriendLinkList:input_type -> blog.PageQuery
	4,   // 108: blog.FriendLinkRpc.FindFriendLinkCount:input_type -> blog.PageQuery
	62,  // 109: blog.remarkRpc.CreateRemark:input_type -> blog.Remark
	62,  // 110: blog.remarkRpc.UpdateRemark:input_type -> blog.Remark
	2,   // 111: blog.remarkRpc.DeleteRemark:input_type -> blog.IdReq
	3,   // 112: blog.remarkRpc.DeleteRemarkList:input_type -> blog.IdsReq
	2,   // 113: blog.remarkRpc.FindRemark:input_type -> blog.IdReq
	4,   // 114: blog.remarkRpc.FindRemarkList:input_type -> blog.PageQuery
	4,   // 115: blog.remarkRpc.FindRemarkCount:input_type -> blog.PageQuery
	64,  // 116: blog.commentRpc.CreateComment:input_type -> blog.Comment
	64,  // 117: blog.commentRpc.UpdateComment:input_type -> blog.Comment
	2,   // 118: blog.commentRpc.DeleteComment:input_type -> blog.IdReq
	3,   // 119: blog.commentRpc.DeleteCommentList:input_type -> blog.IdsReq
	2,   // 120: blog.commentRpc.FindComment:input_type -> blog.IdReq
	4,   // 121: blog.commentRpc.FindCommentList:input_type -> blog.PageQuery
	4,   // 122: blog.commentRpc.FindCommentReplyList:input_type -> blog.PageQuery
	4,   // 123: blog.commentRpc.FindCommentCount:input_type -> blog.PageQuery
	2,   // 124: blog.commentRpc.LikeComment:input_type -> blog.IdReq
	68,  // 125: blog.photoRpc.CreatePhoto:input_type -> blog.Photo
	68,  // 126: blog.photoRpc.UpdatePhoto:input_type -> blog.Photo
	2,   // 127: blog.photoRpc.DeletePhoto:input_type -> blog.IdReq
	3,   // 128: blog.photoRpc.DeletePhotoList:input_type -> blog.IdsReq
	2,   // 129: blog.photoRpc.FindPhoto:input_type -> blog.IdReq
	4,   // 130: blog.photoRpc.FindPhotoList:input_type -> blog.PageQuery
	4,   // 131: blog.photoRpc.FindPhotoCount:input_type -> blog.PageQuery
	70,  // 132: blog.photoRpc.CreatePhotoAlbum:input_type -> blog.PhotoAlbum
	70,  // 133: blog.photoRpc.UpdatePhotoAlbum:input_type -> blog.PhotoAlbum
	2,   // 134: blog.photoRpc.DeletePhotoAlbum:input_type -> blog.IdReq
	3,   // 135: blog.photoRpc.DeletePhotoAlbumList:input_type -> blog.IdsReq
	2,   // 136: blog.photoRpc.FindPhotoAlbum:input_type -> blog.IdReq
	4,   // 137: blog.photoRpc.FindPhotoAlbumList:input_type -> blog.PageQuery
	4,   // 138: blog.photoRpc.FindPhotoAlbumCount:input_type -> blog.PageQuery
	72,  // 139: blog.pageRpc.CreatePage:input_type -> blog.Page
	72,  // 140: blog.pageRpc.UpdatePage:input_type -> blog.Page
	2,   // 141: blog.pageRpc.DeletePage:input_type -> blog.IdReq
	3,   // 142: blog.pageRpc.DeletePageList:input_type -> blog.IdsReq
	2,   // 143: blog.pageRpc.FindPage:input_type -> blog.IdReq
	4,   // 144: blog.pageRpc.FindPageList:input_type -> blog.PageQuery
	4,   // 145: blog.pageRpc.FindPageCount:input_type -> blog.PageQuery
	74,  // 146: blog.talkRpc.CreateTalk:input_type -> blog.Talk
	74,  // 147: blog.talkRpc.UpdateTalk:input_type -> blog.Talk
	2,   // 148: blog.talkRpc.DeleteTalk:input_type -> blog.IdReq
	3,   // 149: blog.talkRpc.DeleteTalkList:input_type -> blog.IdsReq
	2,   // 150: blog.talkRpc.FindTalk:input_type -> blog.IdReq
	4,   // 151: blog.talkRpc.FindTalkList:input_type -> blog.PageQuery
	4,   // 152: blog.talkRpc.FindTalkCount:input_type -> blog.PageQuery
	2,   // 153: blog.talkRpc.LikeTalk:input_type -> blog.IdReq
	77,  // 154: blog.logRpc.CreateOperationLog:input_type -> blog.OperationLog
	77,  // 155: blog.logRpc.UpdateOperationLog:input_type -> blog.OperationLog
	2,   // 156: blog.logRpc.DeleteOperationLog:input_type -> blog.IdReq
	3,   // 157: blog.logRpc.DeleteOperationLogList:input_type -> blog.IdsReq
	2,   // 158: blog.logRpc.FindOperationLog:input_type -> blog.IdReq
	4,   // 159: blog.logRpc.FindOperationLogList:input_type -> blog.PageQuery
	4,   // 160: blog.logRpc.FindOperationLogCount:input_type -> blog.PageQuery
	79,  // 161: blog.chatRpc.CreateChatRecord:input_type -> blog.ChatRecord
	79,  // 162: blog.chatRpc.UpdateChatRecord:input_type -> blog.ChatRecord
	2,   // 163: blog.chatRpc.DeleteChatRecord:input_type -> blog.IdReq
	3,   // 164: blog.chatRpc.DeleteChatRecordList:input_type -> blog.IdsReq
	2,   // 165: blog.chatRpc.FindChatRecord:input_type -> blog.IdReq
	4,   // 166: blog.chatRpc.FindChatRecordList:input_type -> blog.PageQuery
	4,   // 167: blog.chatRpc.FindChatRecordCount:input_type -> blog.PageQuery
	81,  // 168: blog.uploadRpc.UploadFile:input_type -> blog.UploadRecordReq
	81,  // 169: blog.uploadRpc.UploadVoice:input_type -> blog.UploadRecordReq
	12,  // 170: blog.AuthRpc.Login:output_type -> blog.LoginResp
	1,   // 171: blog.AuthRpc.Logout:output_type -> blog.EmptyResp
	1,   // 172: blog.AuthRpc.Logoff:output_type -> blog.EmptyResp
	37,  // 173: blog.AuthRpc.Register:output_type -> blog.UserInfoResp
	1,   // 174: blog.AuthRpc.ResetPassword:output_type -> blog.EmptyResp
	1,   // 175: blog.AuthRpc.SendRegisterEmail:output_type -> blog.EmptyResp
	1,   // 176: blog.AuthRpc.SendResetPasswordEmail:output_type -> blog.EmptyResp
	12,  // 177: blog.AuthRpc.OauthLogin:output_type -> blog.LoginResp
	15,  // 178: blog.AuthRpc.GetOauthAuthorizeUrl:output_type -> blog.OauthLoginUrlResp
	21,  // 179: blog.AuthRpc.GetLogoutAt:output_type -> blog.GetLogoutAtResp
	22,  // 180: blog.ApiRpc.CreateApi:output_type -> blog.Api
	22,  // 181: blog.ApiRpc.UpdateApi:output_type -> blog.Api
	9,   // 182: blog.ApiRpc.DeleteApi:output_type -> blog.BatchResp
	9,   // 183: blog.ApiRpc.DeleteApiList:output_type -> blog.BatchResp
	22,  // 184: blog.ApiRpc.FindApi:output_type -> blog.Api
	24,  // 185: blog.ApiRpc.FindApiList:output_type -> blog.ApiPageResp
	9,   // 186: blog.ApiRpc.SyncApiList:output_type -> blog.BatchResp
	9,   // 187: blog.ApiRpc.CleanApiList:output_type -> blog.BatchResp
	25,  // 188: blog.MenuRpc.CreateMenu:output_type -> blog.Menu
	25,  // 189: blog.MenuRpc.UpdateMenu:output_type -> blog.Menu
	9,   // 190: blog.MenuRpc.DeleteMenu:output_type -> blog.BatchResp
	9,   // 191: blog.MenuRpc.DeleteMenuList:output_type -> blog.BatchResp
	25,  // 192: blog.MenuRpc.FindMenu:output_type -> blog.Menu
	27,  // 193: blog.MenuRpc.FindMenuList:output_type -> blog.MenuPageResp
	9,   // 194: blog.MenuRpc.SyncMenuList:output_type -> blog.BatchResp
	9,   // 195: blog.MenuRpc.CleanMenuList:output_type -> blog.BatchResp
	29,  // 196: blog.RoleRpc.CreateRole:output_type -> blog.Role
	29,  // 197: blog.RoleRpc.UpdateRole:output_type -> blog.Role
	9,   // 198: blog.RoleRpc.DeleteRole:output_type -> blog.BatchResp
	9,   // 199: blog.RoleRpc.DeleteRoleList:output_type -> blog.BatchResp
	29,  // 200: blog.RoleRpc.FindRole:output_type -> blog.Role
	31,  // 201: blog.RoleRpc.FindRoleList:output_type -> blog.RolePageResp
	32,  // 202: blog.RoleRpc.FindRoleResources:output_type -> blog.RoleResourcesResp
	1,   // 203: blog.RoleRpc.UpdateRoleMenus:output_type -> blog.EmptyResp
	1,   // 204: blog.RoleRpc.UpdateRoleApis:output_type -> blog.EmptyResp
	36,  // 205: blog.UserRpc.FindUserLoginHistoryList:output_type -> blog.LoginHistoryPageResp
	9,   // 206: blog.UserRpc.DeleteUserLoginHistoryList:output_type -> blog.BatchResp
	39,  // 207: blog.UserRpc.FindUserList:output_type -> blog.UserPageResp
	24,  // 208: blog.UserRpc.FindUserApis:output_type -> blog.ApiPageResp
	27,  // 209: blog.UserRpc.FindUserMenus:output_type -> blog.MenuPageResp
	31,  // 210: blog.UserRpc.FindUserRoles:output_type -> blog.RolePageResp
	37,  // 211: blog.UserRpc.FindUserInfo:output_type -> blog.UserInfoResp
	1,   // 212: blog.UserRpc.UpdateUserInfo:output_type -> blog.EmptyResp
	1,   // 213: blog.UserRpc.UpdateUserAvatar:output_type -> blog.EmptyResp
	1,   // 214: blog.UserRpc.UpdateUserStatus:output_type -> blog.EmptyResp
	1,   // 215: blog.UserRpc.UpdateUserRole:output_type -> blog.EmptyResp
	1,   // 216: blog.ConfigRpc.SaveConfig:output_type -> blog.EmptyResp
	46,  // 217: blog.ConfigRpc.FindConfig:output_type -> blog.FindConfigResp
	48,  // 218: blog.ArticleRpc.CreateArticle:output_type -> blog.Article
	48,  // 219: blog.ArticleRpc.UpdateArticle:output_type -> blog.Article
	9,   // 220: blog.ArticleRpc.DeleteArticle:output_type -> blog.BatchResp
	9,   // 221: blog.ArticleRpc.DeleteArticleList:output_type -> blog.BatchResp
	48,  // 222: blog.ArticleRpc.FindArticle:output_type -> blog.Article
	49,  // 223: blog.ArticleRpc.FindArticleList:output_type -> blog.ArticlePageResp
	10,  // 224: blog.ArticleRpc.FindArticleCount:output_type -> blog.CountResp
	49,  // 225: blog.ArticleRpc.FindArticleByTag:output_type -> blog.ArticlePageResp
	49,  // 226: blog.ArticleRpc.FindArticleByCategory:output_type -> blog.ArticlePageResp
	52,  // 227: blog.CategoryRpc.CreateCategory:output_type -> blog.Category
	52,  // 228: blog.CategoryRpc.UpdateCategory:output_type -> blog.Category
	9,   // 229: blog.CategoryRpc.DeleteCategory:output_type -> blog.BatchResp
	9,   // 230: blog.CategoryRpc.DeleteCategoryList:output_type -> blog.BatchResp
	52,  // 231: blog.CategoryRpc.FindCategory:output_type -> blog.Category
	10,  // 232: blog.CategoryRpc.FindCategoryCount:output_type -> blog.CountResp
	53,  // 233: blog.CategoryRpc.FindCategoryList:output_type -> blog.CategoryPageResp
	53,  // 234: blog.CategoryRpc.FindCategoryListByIds:output_type -> blog.CategoryPageResp
	55,  // 235: blog.TagRpc.CreateTag:output_type -> blog.Tag
	55,  // 236: blog.TagRpc.UpdateTag:output_type -> blog.Tag
	9,   // 237: blog.TagRpc.DeleteTag:output_type -> blog.BatchResp
	9,   // 238: blog.TagRpc.DeleteTagList:output_type -> blog.BatchResp
	55,  // 239: blog.TagRpc.FindTag:output_type -> blog.Tag
	56,  // 240: blog.TagRpc.FindTagList:output_type -> blog.TagPageResp
	10,  // 241: blog.TagRpc.FindTagCount:output_type -> blog.CountResp
	10,  // 242: blog.TagRpc.FindTagArticleCount:output_type -> blog.CountResp
	59,  // 243: blog.TagRpc.FindTagMapByArticleIds:output_type -> blog.TagMapResp
	60,  // 244: blog.FriendLinkRpc.CreateFriendLink:output_type -> blog.FriendLink
	60,  // 245: blog.FriendLinkRpc.UpdateFriendLink:output_type -> blog.FriendLink
	9,   // 246: blog.FriendLinkRpc.DeleteFriendLink:output_type -> blog.BatchResp
	9,   // 247: blog.FriendLinkRpc.DeleteFriendLinkList:output_type -> blog.BatchResp
	60,  // 248: blog.FriendLinkRpc.FindFriendLink:output_type -> blog.FriendLink
	61,  // 249: blog.FriendLinkRpc.FindFriendLinkList:output_type -> blog.FriendLinkPageResp
	10,  // 250: blog.FriendLinkRpc.FindFriendLinkCount:output_type -> blog.CountResp
	62,  // 251: blog.remarkRpc.CreateRemark:output_type -> blog.Remark
	62,  // 252: blog.remarkRpc.UpdateRemark:output_type -> blog.Remark
	9,   // 253: blog.remarkRpc.DeleteRemark:output_type -> blog.BatchResp
	9,   // 254: blog.remarkRpc.DeleteRemarkList:output_type -> blog.BatchResp
	62,  // 255: blog.remarkRpc.FindRemark:output_type -> blog.Remark
	63,  // 256: blog.remarkRpc.FindRemarkList:output_type -> blog.RemarkPageResp
	10,  // 257: blog.remarkRpc.FindRemarkCount:output_type -> blog.CountResp
	64,  // 258: blog.commentRpc.CreateComment:output_type -> blog.Comment
	64,  // 259: blog.commentRpc.UpdateComment:output_type -> blog.Comment
	9,   // 260: blog.commentRpc.DeleteComment:output_type -> blog.BatchResp
	9,   // 261: blog.commentRpc.DeleteCommentList:output_type -> blog.BatchResp
	64,  // 262: blog.commentRpc.FindComment:output_type -> blog.Comment
	65,  // 263: blog.commentRpc.FindCommentList:output_type -> blog.CommentPageResp
	67,  // 264: blog.commentRpc.FindCommentReplyList:output_type -> blog.CommentReplyPageResp
	10,  // 265: blog.commentRpc.FindCommentCount:output_type -> blog.CountResp
	1,   // 266: blog.commentRpc.LikeComment:output_type -> blog.EmptyResp
	68,  // 267: blog.photoRpc.CreatePhoto:output_type -> blog.Photo
	68,  // 268: blog.photoRpc.UpdatePhoto:output_type -> blog.Photo
	9,   // 269: blog.photoRpc.DeletePhoto:output_type -> blog.BatchResp
	9,   // 270: blog.photoRpc.DeletePhotoList:output_type -> blog.BatchResp
	68,  // 271: blog.photoRpc.FindPhoto:output_type -> blog.Photo
	69,  // 272: blog.photoRpc.FindPhotoList:output_type -> blog.PhotoPageResp
	10,  // 273: blog.photoRpc.FindPhotoCount:output_type -> blog.CountResp
	70,  // 274: blog.photoRpc.CreatePhotoAlbum:output_type -> blog.PhotoAlbum
	70,  // 275: blog.photoRpc.UpdatePhotoAlbum:output_type -> blog.PhotoAlbum
	9,   // 276: blog.photoRpc.DeletePhotoAlbum:output_type -> blog.BatchResp
	9,   // 277: blog.photoRpc.DeletePhotoAlbumList:output_type -> blog.BatchResp
	70,  // 278: blog.photoRpc.FindPhotoAlbum:output_type -> blog.PhotoAlbum
	71,  // 279: blog.photoRpc.FindPhotoAlbumList:output_type -> blog.PhotoAlbumPageResp
	10,  // 280: blog.photoRpc.FindPhotoAlbumCount:output_type -> blog.CountResp
	72,  // 281: blog.pageRpc.CreatePage:output_type -> blog.Page
	72,  // 282: blog.pageRpc.UpdatePage:output_type -> blog.Page
	9,   // 283: blog.pageRpc.DeletePage:output_type -> blog.BatchResp
	9,   // 284: blog.pageRpc.DeletePageList:output_type -> blog.BatchResp
	72,  // 285: blog.pageRpc.FindPage:output_type -> blog.Page
	73,  // 286: blog.pageRpc.FindPageList:output_type -> blog.PagePageResp
	10,  // 287: blog.pageRpc.FindPageCount:output_type -> blog.CountResp
	74,  // 288: blog.talkRpc.CreateTalk:output_type -> blog.Talk
	74,  // 289: blog.talkRpc.UpdateTalk:output_type -> blog.Talk
	9,   // 290: blog.talkRpc.DeleteTalk:output_type -> blog.BatchResp
	9,   // 291: blog.talkRpc.DeleteTalkList:output_type -> blog.BatchResp
	74,  // 292: blog.talkRpc.FindTalk:output_type -> blog.Talk
	76,  // 293: blog.talkRpc.FindTalkList:output_type -> blog.TalkPageResp
	10,  // 294: blog.talkRpc.FindTalkCount:output_type -> blog.CountResp
	1,   // 295: blog.talkRpc.LikeTalk:output_type -> blog.EmptyResp
	77,  // 296: blog.logRpc.CreateOperationLog:output_type -> blog.OperationLog
	77,  // 297: blog.logRpc.UpdateOperationLog:output_type -> blog.OperationLog
	9,   // 298: blog.logRpc.DeleteOperationLog:output_type -> blog.BatchResp
	9,   // 299: blog.logRpc.DeleteOperationLogList:output_type -> blog.BatchResp
	77,  // 300: blog.logRpc.FindOperationLog:output_type -> blog.OperationLog
	78,  // 301: blog.logRpc.FindOperationLogList:output_type -> blog.OperationLogPageResp
	10,  // 302: blog.logRpc.FindOperationLogCount:output_type -> blog.CountResp
	79,  // 303: blog.chatRpc.CreateChatRecord:output_type -> blog.ChatRecord
	79,  // 304: blog.chatRpc.UpdateChatRecord:output_type -> blog.ChatRecord
	9,   // 305: blog.chatRpc.DeleteChatRecord:output_type -> blog.BatchResp
	9,   // 306: blog.chatRpc.DeleteChatRecordList:output_type -> blog.BatchResp
	79,  // 307: blog.chatRpc.FindChatRecord:output_type -> blog.ChatRecord
	80,  // 308: blog.chatRpc.FindChatRecordList:output_type -> blog.ChatRecordPageResp
	10,  // 309: blog.chatRpc.FindChatRecordCount:output_type -> blog.CountResp
	82,  // 310: blog.uploadRpc.UploadFile:output_type -> blog.UploadRecordResp
	82,  // 311: blog.uploadRpc.UploadVoice:output_type -> blog.UploadRecordResp
	170, // [170:312] is the sub-list for method output_type
	28,  // [28:170] is the sub-list for method input_type
	28,  // [28:28] is the sub-list for extension type_name
	28,  // [28:28] is the sub-list for extension extendee
	0,   // [0:28] is the sub-list for field type_name
}

func init() { file_blog_proto_init() }
func file_blog_proto_init() {
	if File_blog_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blog_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EmptyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*EmptyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*IdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*IdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PageQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PageLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PageSort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PageCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*PageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*BatchResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*LoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*RoleLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*OauthLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*OauthLoginUrlResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ResetPasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*UserEmailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*LogoutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*LogoffReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*GetLogoutAtReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*GetLogoutAtResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*Api); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ApiDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ApiPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*Menu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*MenuDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*MenuPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*SyncMenuReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*RoleDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*RolePageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*RoleResourcesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRoleApisReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRoleMenusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*LoginHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*LoginHistoryPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*UserInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*UserPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserAvatarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserRoleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*UserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*FindConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*FindConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*SaveConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*Article); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*ArticlePageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*FindArticleByTagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*FindArticleByCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*CategoryPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*FindCategoryByNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*TagPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*FindTagArticleCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*FindTagByNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*TagMapResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*FriendLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*FriendLinkPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*Remark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*RemarkPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*CommentPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*CommentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*CommentReplyPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*Photo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*PhotoPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*PhotoAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*PhotoAlbumPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*PagePageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*Talk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*TalkDetailsDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*TalkPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*OperationLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*OperationLogPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*ChatRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*ChatRecordPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*UploadRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blog_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*UploadRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blog_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   84,
			NumExtensions: 0,
			NumServices:   18,
		},
		GoTypes:           file_blog_proto_goTypes,
		DependencyIndexes: file_blog_proto_depIdxs,
		MessageInfos:      file_blog_proto_msgTypes,
	}.Build()
	File_blog_proto = out.File
	file_blog_proto_rawDesc = nil
	file_blog_proto_goTypes = nil
	file_blog_proto_depIdxs = nil
}
