// 声明 proto 语法版本，固定值

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: blog.proto

// proto 包名

package blog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthRpc_Login_FullMethodName                  = "/blog.AuthRpc/Login"
	AuthRpc_Logout_FullMethodName                 = "/blog.AuthRpc/Logout"
	AuthRpc_Logoff_FullMethodName                 = "/blog.AuthRpc/Logoff"
	AuthRpc_Register_FullMethodName               = "/blog.AuthRpc/Register"
	AuthRpc_ResetPassword_FullMethodName          = "/blog.AuthRpc/ResetPassword"
	AuthRpc_SendRegisterEmail_FullMethodName      = "/blog.AuthRpc/SendRegisterEmail"
	AuthRpc_SendResetPasswordEmail_FullMethodName = "/blog.AuthRpc/SendResetPasswordEmail"
	AuthRpc_OauthLogin_FullMethodName             = "/blog.AuthRpc/OauthLogin"
	AuthRpc_GetOauthAuthorizeUrl_FullMethodName   = "/blog.AuthRpc/GetOauthAuthorizeUrl"
)

// AuthRpcClient is the client API for AuthRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthRpcClient interface {
	// 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 登出
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 注销
	Logoff(ctx context.Context, in *LogoffReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 注册
	Register(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*UserInfoResp, error)
	// 重置密码
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 发送注册邮件
	SendRegisterEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 发送重置密码邮件
	SendResetPasswordEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 第三方登录
	OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 获取第三方登录授权地址
	GetOauthAuthorizeUrl(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthLoginUrlResp, error)
}

type authRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthRpcClient(cc grpc.ClientConnInterface) AuthRpcClient {
	return &authRpcClient{cc}
}

func (c *authRpcClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, AuthRpc_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AuthRpc_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) Logoff(ctx context.Context, in *LogoffReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AuthRpc_Logoff_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) Register(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	out := new(UserInfoResp)
	err := c.cc.Invoke(ctx, AuthRpc_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AuthRpc_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) SendRegisterEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AuthRpc_SendRegisterEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) SendResetPasswordEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AuthRpc_SendResetPasswordEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, AuthRpc_OauthLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) GetOauthAuthorizeUrl(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthLoginUrlResp, error) {
	out := new(OauthLoginUrlResp)
	err := c.cc.Invoke(ctx, AuthRpc_GetOauthAuthorizeUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthRpcServer is the server API for AuthRpc service.
// All implementations must embed UnimplementedAuthRpcServer
// for forward compatibility
type AuthRpcServer interface {
	// 登录
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// 登出
	Logout(context.Context, *LogoutReq) (*EmptyResp, error)
	// 注销
	Logoff(context.Context, *LogoffReq) (*EmptyResp, error)
	// 注册
	Register(context.Context, *LoginReq) (*UserInfoResp, error)
	// 重置密码
	ResetPassword(context.Context, *ResetPasswordReq) (*EmptyResp, error)
	// 发送注册邮件
	SendRegisterEmail(context.Context, *UserEmailReq) (*EmptyResp, error)
	// 发送重置密码邮件
	SendResetPasswordEmail(context.Context, *UserEmailReq) (*EmptyResp, error)
	// 第三方登录
	OauthLogin(context.Context, *OauthLoginReq) (*LoginResp, error)
	// 获取第三方登录授权地址
	GetOauthAuthorizeUrl(context.Context, *OauthLoginReq) (*OauthLoginUrlResp, error)
	mustEmbedUnimplementedAuthRpcServer()
}

// UnimplementedAuthRpcServer must be embedded to have forward compatible implementations.
type UnimplementedAuthRpcServer struct {
}

func (UnimplementedAuthRpcServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthRpcServer) Logout(context.Context, *LogoutReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthRpcServer) Logoff(context.Context, *LogoffReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logoff not implemented")
}
func (UnimplementedAuthRpcServer) Register(context.Context, *LoginReq) (*UserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthRpcServer) ResetPassword(context.Context, *ResetPasswordReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedAuthRpcServer) SendRegisterEmail(context.Context, *UserEmailReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRegisterEmail not implemented")
}
func (UnimplementedAuthRpcServer) SendResetPasswordEmail(context.Context, *UserEmailReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResetPasswordEmail not implemented")
}
func (UnimplementedAuthRpcServer) OauthLogin(context.Context, *OauthLoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthLogin not implemented")
}
func (UnimplementedAuthRpcServer) GetOauthAuthorizeUrl(context.Context, *OauthLoginReq) (*OauthLoginUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthAuthorizeUrl not implemented")
}
func (UnimplementedAuthRpcServer) mustEmbedUnimplementedAuthRpcServer() {}

// UnsafeAuthRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthRpcServer will
// result in compilation errors.
type UnsafeAuthRpcServer interface {
	mustEmbedUnimplementedAuthRpcServer()
}

func RegisterAuthRpcServer(s grpc.ServiceRegistrar, srv AuthRpcServer) {
	s.RegisterService(&AuthRpc_ServiceDesc, srv)
}

func _AuthRpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_Logoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).Logoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_Logoff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).Logoff(ctx, req.(*LogoffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).Register(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_SendRegisterEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).SendRegisterEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_SendRegisterEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).SendRegisterEmail(ctx, req.(*UserEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_SendResetPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).SendResetPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_SendResetPasswordEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).SendResetPasswordEmail(ctx, req.(*UserEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_OauthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).OauthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_OauthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).OauthLogin(ctx, req.(*OauthLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_GetOauthAuthorizeUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).GetOauthAuthorizeUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRpc_GetOauthAuthorizeUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).GetOauthAuthorizeUrl(ctx, req.(*OauthLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthRpc_ServiceDesc is the grpc.ServiceDesc for AuthRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.AuthRpc",
	HandlerType: (*AuthRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthRpc_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthRpc_Logout_Handler,
		},
		{
			MethodName: "Logoff",
			Handler:    _AuthRpc_Logoff_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AuthRpc_Register_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _AuthRpc_ResetPassword_Handler,
		},
		{
			MethodName: "SendRegisterEmail",
			Handler:    _AuthRpc_SendRegisterEmail_Handler,
		},
		{
			MethodName: "SendResetPasswordEmail",
			Handler:    _AuthRpc_SendResetPasswordEmail_Handler,
		},
		{
			MethodName: "OauthLogin",
			Handler:    _AuthRpc_OauthLogin_Handler,
		},
		{
			MethodName: "GetOauthAuthorizeUrl",
			Handler:    _AuthRpc_GetOauthAuthorizeUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	ApiRpc_CreateApi_FullMethodName     = "/blog.ApiRpc/CreateApi"
	ApiRpc_UpdateApi_FullMethodName     = "/blog.ApiRpc/UpdateApi"
	ApiRpc_DeleteApi_FullMethodName     = "/blog.ApiRpc/DeleteApi"
	ApiRpc_DeleteApiList_FullMethodName = "/blog.ApiRpc/DeleteApiList"
	ApiRpc_FindApi_FullMethodName       = "/blog.ApiRpc/FindApi"
	ApiRpc_FindApiList_FullMethodName   = "/blog.ApiRpc/FindApiList"
	ApiRpc_SyncApiList_FullMethodName   = "/blog.ApiRpc/SyncApiList"
	ApiRpc_CleanApiList_FullMethodName  = "/blog.ApiRpc/CleanApiList"
)

// ApiRpcClient is the client API for ApiRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiRpcClient interface {
	// 创建接口
	CreateApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*Api, error)
	// 更新接口
	UpdateApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*Api, error)
	// 删除接口
	DeleteApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除接口
	DeleteApiList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询接口
	FindApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Api, error)
	// 查询接口列表
	FindApiList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*ApiPageResp, error)
	// 同步接口列表
	SyncApiList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 清空接口列表
	CleanApiList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BatchResp, error)
}

type apiRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewApiRpcClient(cc grpc.ClientConnInterface) ApiRpcClient {
	return &apiRpcClient{cc}
}

func (c *apiRpcClient) CreateApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*Api, error) {
	out := new(Api)
	err := c.cc.Invoke(ctx, ApiRpc_CreateApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) UpdateApi(ctx context.Context, in *Api, opts ...grpc.CallOption) (*Api, error) {
	out := new(Api)
	err := c.cc.Invoke(ctx, ApiRpc_UpdateApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) DeleteApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ApiRpc_DeleteApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) DeleteApiList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ApiRpc_DeleteApiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) FindApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Api, error) {
	out := new(Api)
	err := c.cc.Invoke(ctx, ApiRpc_FindApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) FindApiList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*ApiPageResp, error) {
	out := new(ApiPageResp)
	err := c.cc.Invoke(ctx, ApiRpc_FindApiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) SyncApiList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ApiRpc_SyncApiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiRpcClient) CleanApiList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ApiRpc_CleanApiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiRpcServer is the server API for ApiRpc service.
// All implementations must embed UnimplementedApiRpcServer
// for forward compatibility
type ApiRpcServer interface {
	// 创建接口
	CreateApi(context.Context, *Api) (*Api, error)
	// 更新接口
	UpdateApi(context.Context, *Api) (*Api, error)
	// 删除接口
	DeleteApi(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除接口
	DeleteApiList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询接口
	FindApi(context.Context, *IdReq) (*Api, error)
	// 查询接口列表
	FindApiList(context.Context, *PageQuery) (*ApiPageResp, error)
	// 同步接口列表
	SyncApiList(context.Context, *EmptyReq) (*BatchResp, error)
	// 清空接口列表
	CleanApiList(context.Context, *EmptyReq) (*BatchResp, error)
	mustEmbedUnimplementedApiRpcServer()
}

// UnimplementedApiRpcServer must be embedded to have forward compatible implementations.
type UnimplementedApiRpcServer struct {
}

func (UnimplementedApiRpcServer) CreateApi(context.Context, *Api) (*Api, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApi not implemented")
}
func (UnimplementedApiRpcServer) UpdateApi(context.Context, *Api) (*Api, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApi not implemented")
}
func (UnimplementedApiRpcServer) DeleteApi(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApi not implemented")
}
func (UnimplementedApiRpcServer) DeleteApiList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiList not implemented")
}
func (UnimplementedApiRpcServer) FindApi(context.Context, *IdReq) (*Api, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindApi not implemented")
}
func (UnimplementedApiRpcServer) FindApiList(context.Context, *PageQuery) (*ApiPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindApiList not implemented")
}
func (UnimplementedApiRpcServer) SyncApiList(context.Context, *EmptyReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncApiList not implemented")
}
func (UnimplementedApiRpcServer) CleanApiList(context.Context, *EmptyReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanApiList not implemented")
}
func (UnimplementedApiRpcServer) mustEmbedUnimplementedApiRpcServer() {}

// UnsafeApiRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiRpcServer will
// result in compilation errors.
type UnsafeApiRpcServer interface {
	mustEmbedUnimplementedApiRpcServer()
}

func RegisterApiRpcServer(s grpc.ServiceRegistrar, srv ApiRpcServer) {
	s.RegisterService(&ApiRpc_ServiceDesc, srv)
}

func _ApiRpc_CreateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Api)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).CreateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiRpc_CreateApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).CreateApi(ctx, req.(*Api))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_UpdateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Api)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).UpdateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiRpc_UpdateApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).UpdateApi(ctx, req.(*Api))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_DeleteApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).DeleteApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiRpc_DeleteApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).DeleteApi(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_DeleteApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).DeleteApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiRpc_DeleteApiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).DeleteApiList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_FindApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).FindApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiRpc_FindApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).FindApi(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_FindApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).FindApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiRpc_FindApiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).FindApiList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_SyncApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).SyncApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiRpc_SyncApiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).SyncApiList(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiRpc_CleanApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiRpcServer).CleanApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiRpc_CleanApiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiRpcServer).CleanApiList(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiRpc_ServiceDesc is the grpc.ServiceDesc for ApiRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.ApiRpc",
	HandlerType: (*ApiRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApi",
			Handler:    _ApiRpc_CreateApi_Handler,
		},
		{
			MethodName: "UpdateApi",
			Handler:    _ApiRpc_UpdateApi_Handler,
		},
		{
			MethodName: "DeleteApi",
			Handler:    _ApiRpc_DeleteApi_Handler,
		},
		{
			MethodName: "DeleteApiList",
			Handler:    _ApiRpc_DeleteApiList_Handler,
		},
		{
			MethodName: "FindApi",
			Handler:    _ApiRpc_FindApi_Handler,
		},
		{
			MethodName: "FindApiList",
			Handler:    _ApiRpc_FindApiList_Handler,
		},
		{
			MethodName: "SyncApiList",
			Handler:    _ApiRpc_SyncApiList_Handler,
		},
		{
			MethodName: "CleanApiList",
			Handler:    _ApiRpc_CleanApiList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	MenuRpc_CreateMenu_FullMethodName     = "/blog.MenuRpc/CreateMenu"
	MenuRpc_UpdateMenu_FullMethodName     = "/blog.MenuRpc/UpdateMenu"
	MenuRpc_DeleteMenu_FullMethodName     = "/blog.MenuRpc/DeleteMenu"
	MenuRpc_DeleteMenuList_FullMethodName = "/blog.MenuRpc/DeleteMenuList"
	MenuRpc_FindMenu_FullMethodName       = "/blog.MenuRpc/FindMenu"
	MenuRpc_FindMenuList_FullMethodName   = "/blog.MenuRpc/FindMenuList"
	MenuRpc_SyncMenuList_FullMethodName   = "/blog.MenuRpc/SyncMenuList"
	MenuRpc_CleanMenuList_FullMethodName  = "/blog.MenuRpc/CleanMenuList"
)

// MenuRpcClient is the client API for MenuRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MenuRpcClient interface {
	// 创建菜单
	CreateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error)
	// 更新菜单
	UpdateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error)
	// 删除菜单
	DeleteMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除菜单
	DeleteMenuList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询菜单
	FindMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Menu, error)
	// 查询菜单列表
	FindMenuList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*MenuPageResp, error)
	// 同步菜单列表
	SyncMenuList(ctx context.Context, in *SyncMenuReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 清空菜单列表
	CleanMenuList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BatchResp, error)
}

type menuRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewMenuRpcClient(cc grpc.ClientConnInterface) MenuRpcClient {
	return &menuRpcClient{cc}
}

func (c *menuRpcClient) CreateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, MenuRpc_CreateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) UpdateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, MenuRpc_UpdateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) DeleteMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, MenuRpc_DeleteMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) DeleteMenuList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, MenuRpc_DeleteMenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) FindMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, MenuRpc_FindMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) FindMenuList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*MenuPageResp, error) {
	out := new(MenuPageResp)
	err := c.cc.Invoke(ctx, MenuRpc_FindMenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) SyncMenuList(ctx context.Context, in *SyncMenuReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, MenuRpc_SyncMenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuRpcClient) CleanMenuList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, MenuRpc_CleanMenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MenuRpcServer is the server API for MenuRpc service.
// All implementations must embed UnimplementedMenuRpcServer
// for forward compatibility
type MenuRpcServer interface {
	// 创建菜单
	CreateMenu(context.Context, *Menu) (*Menu, error)
	// 更新菜单
	UpdateMenu(context.Context, *Menu) (*Menu, error)
	// 删除菜单
	DeleteMenu(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除菜单
	DeleteMenuList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询菜单
	FindMenu(context.Context, *IdReq) (*Menu, error)
	// 查询菜单列表
	FindMenuList(context.Context, *PageQuery) (*MenuPageResp, error)
	// 同步菜单列表
	SyncMenuList(context.Context, *SyncMenuReq) (*BatchResp, error)
	// 清空菜单列表
	CleanMenuList(context.Context, *EmptyReq) (*BatchResp, error)
	mustEmbedUnimplementedMenuRpcServer()
}

// UnimplementedMenuRpcServer must be embedded to have forward compatible implementations.
type UnimplementedMenuRpcServer struct {
}

func (UnimplementedMenuRpcServer) CreateMenu(context.Context, *Menu) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedMenuRpcServer) UpdateMenu(context.Context, *Menu) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedMenuRpcServer) DeleteMenu(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedMenuRpcServer) DeleteMenuList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenuList not implemented")
}
func (UnimplementedMenuRpcServer) FindMenu(context.Context, *IdReq) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMenu not implemented")
}
func (UnimplementedMenuRpcServer) FindMenuList(context.Context, *PageQuery) (*MenuPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMenuList not implemented")
}
func (UnimplementedMenuRpcServer) SyncMenuList(context.Context, *SyncMenuReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncMenuList not implemented")
}
func (UnimplementedMenuRpcServer) CleanMenuList(context.Context, *EmptyReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanMenuList not implemented")
}
func (UnimplementedMenuRpcServer) mustEmbedUnimplementedMenuRpcServer() {}

// UnsafeMenuRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MenuRpcServer will
// result in compilation errors.
type UnsafeMenuRpcServer interface {
	mustEmbedUnimplementedMenuRpcServer()
}

func RegisterMenuRpcServer(s grpc.ServiceRegistrar, srv MenuRpcServer) {
	s.RegisterService(&MenuRpc_ServiceDesc, srv)
}

func _MenuRpc_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Menu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuRpc_CreateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).CreateMenu(ctx, req.(*Menu))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Menu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuRpc_UpdateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).UpdateMenu(ctx, req.(*Menu))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuRpc_DeleteMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).DeleteMenu(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_DeleteMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).DeleteMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuRpc_DeleteMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).DeleteMenuList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_FindMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).FindMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuRpc_FindMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).FindMenu(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_FindMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).FindMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuRpc_FindMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).FindMenuList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_SyncMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).SyncMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuRpc_SyncMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).SyncMenuList(ctx, req.(*SyncMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuRpc_CleanMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuRpcServer).CleanMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuRpc_CleanMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuRpcServer).CleanMenuList(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MenuRpc_ServiceDesc is the grpc.ServiceDesc for MenuRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MenuRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.MenuRpc",
	HandlerType: (*MenuRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMenu",
			Handler:    _MenuRpc_CreateMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _MenuRpc_UpdateMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _MenuRpc_DeleteMenu_Handler,
		},
		{
			MethodName: "DeleteMenuList",
			Handler:    _MenuRpc_DeleteMenuList_Handler,
		},
		{
			MethodName: "FindMenu",
			Handler:    _MenuRpc_FindMenu_Handler,
		},
		{
			MethodName: "FindMenuList",
			Handler:    _MenuRpc_FindMenuList_Handler,
		},
		{
			MethodName: "SyncMenuList",
			Handler:    _MenuRpc_SyncMenuList_Handler,
		},
		{
			MethodName: "CleanMenuList",
			Handler:    _MenuRpc_CleanMenuList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	RoleRpc_CreateRole_FullMethodName        = "/blog.RoleRpc/CreateRole"
	RoleRpc_UpdateRole_FullMethodName        = "/blog.RoleRpc/UpdateRole"
	RoleRpc_DeleteRole_FullMethodName        = "/blog.RoleRpc/DeleteRole"
	RoleRpc_DeleteRoleList_FullMethodName    = "/blog.RoleRpc/DeleteRoleList"
	RoleRpc_FindRole_FullMethodName          = "/blog.RoleRpc/FindRole"
	RoleRpc_FindRoleList_FullMethodName      = "/blog.RoleRpc/FindRoleList"
	RoleRpc_FindRoleResources_FullMethodName = "/blog.RoleRpc/FindRoleResources"
	RoleRpc_UpdateRoleMenus_FullMethodName   = "/blog.RoleRpc/UpdateRoleMenus"
	RoleRpc_UpdateRoleApis_FullMethodName    = "/blog.RoleRpc/UpdateRoleApis"
)

// RoleRpcClient is the client API for RoleRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleRpcClient interface {
	// 创建角色
	CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	// 更新角色
	UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	// 删除角色
	DeleteRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除角色
	DeleteRoleList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询角色
	FindRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Role, error)
	// 查询角色列表
	FindRoleList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*RolePageResp, error)
	// 查询角色
	FindRoleResources(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*RoleResourcesResp, error)
	// 更新角色菜单
	UpdateRoleMenus(ctx context.Context, in *UpdateRoleMenusReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 更新角色资源
	UpdateRoleApis(ctx context.Context, in *UpdateRoleApisReq, opts ...grpc.CallOption) (*EmptyResp, error)
}

type roleRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleRpcClient(cc grpc.ClientConnInterface) RoleRpcClient {
	return &roleRpcClient{cc}
}

func (c *roleRpcClient) CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, RoleRpc_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, RoleRpc_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) DeleteRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, RoleRpc_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) DeleteRoleList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, RoleRpc_DeleteRoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) FindRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, RoleRpc_FindRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) FindRoleList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*RolePageResp, error) {
	out := new(RolePageResp)
	err := c.cc.Invoke(ctx, RoleRpc_FindRoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) FindRoleResources(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*RoleResourcesResp, error) {
	out := new(RoleResourcesResp)
	err := c.cc.Invoke(ctx, RoleRpc_FindRoleResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) UpdateRoleMenus(ctx context.Context, in *UpdateRoleMenusReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, RoleRpc_UpdateRoleMenus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) UpdateRoleApis(ctx context.Context, in *UpdateRoleApisReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, RoleRpc_UpdateRoleApis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleRpcServer is the server API for RoleRpc service.
// All implementations must embed UnimplementedRoleRpcServer
// for forward compatibility
type RoleRpcServer interface {
	// 创建角色
	CreateRole(context.Context, *Role) (*Role, error)
	// 更新角色
	UpdateRole(context.Context, *Role) (*Role, error)
	// 删除角色
	DeleteRole(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除角色
	DeleteRoleList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询角色
	FindRole(context.Context, *IdReq) (*Role, error)
	// 查询角色列表
	FindRoleList(context.Context, *PageQuery) (*RolePageResp, error)
	// 查询角色
	FindRoleResources(context.Context, *IdReq) (*RoleResourcesResp, error)
	// 更新角色菜单
	UpdateRoleMenus(context.Context, *UpdateRoleMenusReq) (*EmptyResp, error)
	// 更新角色资源
	UpdateRoleApis(context.Context, *UpdateRoleApisReq) (*EmptyResp, error)
	mustEmbedUnimplementedRoleRpcServer()
}

// UnimplementedRoleRpcServer must be embedded to have forward compatible implementations.
type UnimplementedRoleRpcServer struct {
}

func (UnimplementedRoleRpcServer) CreateRole(context.Context, *Role) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRoleRpcServer) UpdateRole(context.Context, *Role) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRoleRpcServer) DeleteRole(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRoleRpcServer) DeleteRoleList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleList not implemented")
}
func (UnimplementedRoleRpcServer) FindRole(context.Context, *IdReq) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRole not implemented")
}
func (UnimplementedRoleRpcServer) FindRoleList(context.Context, *PageQuery) (*RolePageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoleList not implemented")
}
func (UnimplementedRoleRpcServer) FindRoleResources(context.Context, *IdReq) (*RoleResourcesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoleResources not implemented")
}
func (UnimplementedRoleRpcServer) UpdateRoleMenus(context.Context, *UpdateRoleMenusReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleMenus not implemented")
}
func (UnimplementedRoleRpcServer) UpdateRoleApis(context.Context, *UpdateRoleApisReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleApis not implemented")
}
func (UnimplementedRoleRpcServer) mustEmbedUnimplementedRoleRpcServer() {}

// UnsafeRoleRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleRpcServer will
// result in compilation errors.
type UnsafeRoleRpcServer interface {
	mustEmbedUnimplementedRoleRpcServer()
}

func RegisterRoleRpcServer(s grpc.ServiceRegistrar, srv RoleRpcServer) {
	s.RegisterService(&RoleRpc_ServiceDesc, srv)
}

func _RoleRpc_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).CreateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).UpdateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).DeleteRole(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_DeleteRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).DeleteRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_DeleteRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).DeleteRoleList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_FindRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).FindRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_FindRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).FindRole(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_FindRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).FindRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_FindRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).FindRoleList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_FindRoleResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).FindRoleResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_FindRoleResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).FindRoleResources(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_UpdateRoleMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleMenusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).UpdateRoleMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_UpdateRoleMenus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).UpdateRoleMenus(ctx, req.(*UpdateRoleMenusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_UpdateRoleApis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleApisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).UpdateRoleApis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleRpc_UpdateRoleApis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).UpdateRoleApis(ctx, req.(*UpdateRoleApisReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleRpc_ServiceDesc is the grpc.ServiceDesc for RoleRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.RoleRpc",
	HandlerType: (*RoleRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRole",
			Handler:    _RoleRpc_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RoleRpc_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RoleRpc_DeleteRole_Handler,
		},
		{
			MethodName: "DeleteRoleList",
			Handler:    _RoleRpc_DeleteRoleList_Handler,
		},
		{
			MethodName: "FindRole",
			Handler:    _RoleRpc_FindRole_Handler,
		},
		{
			MethodName: "FindRoleList",
			Handler:    _RoleRpc_FindRoleList_Handler,
		},
		{
			MethodName: "FindRoleResources",
			Handler:    _RoleRpc_FindRoleResources_Handler,
		},
		{
			MethodName: "UpdateRoleMenus",
			Handler:    _RoleRpc_UpdateRoleMenus_Handler,
		},
		{
			MethodName: "UpdateRoleApis",
			Handler:    _RoleRpc_UpdateRoleApis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	UserRpc_FindUserLoginHistoryList_FullMethodName   = "/blog.UserRpc/FindUserLoginHistoryList"
	UserRpc_DeleteUserLoginHistoryList_FullMethodName = "/blog.UserRpc/DeleteUserLoginHistoryList"
	UserRpc_FindUserApis_FullMethodName               = "/blog.UserRpc/FindUserApis"
	UserRpc_FindUserMenus_FullMethodName              = "/blog.UserRpc/FindUserMenus"
	UserRpc_FindUserRoles_FullMethodName              = "/blog.UserRpc/FindUserRoles"
	UserRpc_FindUserInfo_FullMethodName               = "/blog.UserRpc/FindUserInfo"
	UserRpc_UpdateUserInfo_FullMethodName             = "/blog.UserRpc/UpdateUserInfo"
	UserRpc_UpdateUserAvatar_FullMethodName           = "/blog.UserRpc/UpdateUserAvatar"
	UserRpc_UpdateUserStatus_FullMethodName           = "/blog.UserRpc/UpdateUserStatus"
	UserRpc_UpdateUserRole_FullMethodName             = "/blog.UserRpc/UpdateUserRole"
	UserRpc_FindUserList_FullMethodName               = "/blog.UserRpc/FindUserList"
)

// UserRpcClient is the client API for UserRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRpcClient interface {
	// 查询用户登录历史
	FindUserLoginHistoryList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*LoginHistoryPageResp, error)
	// 批量删除登录历史
	DeleteUserLoginHistoryList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 获取用户接口权限
	FindUserApis(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*ApiPageResp, error)
	// 获取用户菜单权限
	FindUserMenus(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*MenuPageResp, error)
	// 获取用户角色信息
	FindUserRoles(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*RolePageResp, error)
	// 获取用户信息
	FindUserInfo(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserInfoResp, error)
	// 修改用户信息
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
	// 修改用户头像
	UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarReq, opts ...grpc.CallOption) (*UserInfoResp, error)
	// 修改用户状态
	UpdateUserStatus(ctx context.Context, in *UpdateUserStatusReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 修改用户角色
	UpdateUserRole(ctx context.Context, in *UpdateUserRoleReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 查找用户列表
	FindUserList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*UserInfoPageResp, error)
}

type userRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRpcClient(cc grpc.ClientConnInterface) UserRpcClient {
	return &userRpcClient{cc}
}

func (c *userRpcClient) FindUserLoginHistoryList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*LoginHistoryPageResp, error) {
	out := new(LoginHistoryPageResp)
	err := c.cc.Invoke(ctx, UserRpc_FindUserLoginHistoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) DeleteUserLoginHistoryList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, UserRpc_DeleteUserLoginHistoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) FindUserApis(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*ApiPageResp, error) {
	out := new(ApiPageResp)
	err := c.cc.Invoke(ctx, UserRpc_FindUserApis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) FindUserMenus(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*MenuPageResp, error) {
	out := new(MenuPageResp)
	err := c.cc.Invoke(ctx, UserRpc_FindUserMenus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) FindUserRoles(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*RolePageResp, error) {
	out := new(RolePageResp)
	err := c.cc.Invoke(ctx, UserRpc_FindUserRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) FindUserInfo(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	out := new(UserInfoResp)
	err := c.cc.Invoke(ctx, UserRpc_FindUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	out := new(UserInfoResp)
	err := c.cc.Invoke(ctx, UserRpc_UpdateUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	out := new(UserInfoResp)
	err := c.cc.Invoke(ctx, UserRpc_UpdateUserAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UpdateUserStatus(ctx context.Context, in *UpdateUserStatusReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, UserRpc_UpdateUserStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UpdateUserRole(ctx context.Context, in *UpdateUserRoleReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, UserRpc_UpdateUserRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) FindUserList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*UserInfoPageResp, error) {
	out := new(UserInfoPageResp)
	err := c.cc.Invoke(ctx, UserRpc_FindUserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRpcServer is the server API for UserRpc service.
// All implementations must embed UnimplementedUserRpcServer
// for forward compatibility
type UserRpcServer interface {
	// 查询用户登录历史
	FindUserLoginHistoryList(context.Context, *PageQuery) (*LoginHistoryPageResp, error)
	// 批量删除登录历史
	DeleteUserLoginHistoryList(context.Context, *IdsReq) (*BatchResp, error)
	// 获取用户接口权限
	FindUserApis(context.Context, *UserReq) (*ApiPageResp, error)
	// 获取用户菜单权限
	FindUserMenus(context.Context, *UserReq) (*MenuPageResp, error)
	// 获取用户角色信息
	FindUserRoles(context.Context, *UserReq) (*RolePageResp, error)
	// 获取用户信息
	FindUserInfo(context.Context, *UserReq) (*UserInfoResp, error)
	// 修改用户信息
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UserInfoResp, error)
	// 修改用户头像
	UpdateUserAvatar(context.Context, *UpdateUserAvatarReq) (*UserInfoResp, error)
	// 修改用户状态
	UpdateUserStatus(context.Context, *UpdateUserStatusReq) (*EmptyResp, error)
	// 修改用户角色
	UpdateUserRole(context.Context, *UpdateUserRoleReq) (*EmptyResp, error)
	// 查找用户列表
	FindUserList(context.Context, *PageQuery) (*UserInfoPageResp, error)
	mustEmbedUnimplementedUserRpcServer()
}

// UnimplementedUserRpcServer must be embedded to have forward compatible implementations.
type UnimplementedUserRpcServer struct {
}

func (UnimplementedUserRpcServer) FindUserLoginHistoryList(context.Context, *PageQuery) (*LoginHistoryPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserLoginHistoryList not implemented")
}
func (UnimplementedUserRpcServer) DeleteUserLoginHistoryList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserLoginHistoryList not implemented")
}
func (UnimplementedUserRpcServer) FindUserApis(context.Context, *UserReq) (*ApiPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserApis not implemented")
}
func (UnimplementedUserRpcServer) FindUserMenus(context.Context, *UserReq) (*MenuPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserMenus not implemented")
}
func (UnimplementedUserRpcServer) FindUserRoles(context.Context, *UserReq) (*RolePageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserRoles not implemented")
}
func (UnimplementedUserRpcServer) FindUserInfo(context.Context, *UserReq) (*UserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserInfo not implemented")
}
func (UnimplementedUserRpcServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedUserRpcServer) UpdateUserAvatar(context.Context, *UpdateUserAvatarReq) (*UserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAvatar not implemented")
}
func (UnimplementedUserRpcServer) UpdateUserStatus(context.Context, *UpdateUserStatusReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStatus not implemented")
}
func (UnimplementedUserRpcServer) UpdateUserRole(context.Context, *UpdateUserRoleReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRole not implemented")
}
func (UnimplementedUserRpcServer) FindUserList(context.Context, *PageQuery) (*UserInfoPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserList not implemented")
}
func (UnimplementedUserRpcServer) mustEmbedUnimplementedUserRpcServer() {}

// UnsafeUserRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRpcServer will
// result in compilation errors.
type UnsafeUserRpcServer interface {
	mustEmbedUnimplementedUserRpcServer()
}

func RegisterUserRpcServer(s grpc.ServiceRegistrar, srv UserRpcServer) {
	s.RegisterService(&UserRpc_ServiceDesc, srv)
}

func _UserRpc_FindUserLoginHistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).FindUserLoginHistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_FindUserLoginHistoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).FindUserLoginHistoryList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_DeleteUserLoginHistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).DeleteUserLoginHistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_DeleteUserLoginHistoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).DeleteUserLoginHistoryList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_FindUserApis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).FindUserApis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_FindUserApis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).FindUserApis(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_FindUserMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).FindUserMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_FindUserMenus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).FindUserMenus(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_FindUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).FindUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_FindUserRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).FindUserRoles(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_FindUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).FindUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_FindUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).FindUserInfo(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UpdateUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UpdateUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAvatarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UpdateUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UpdateUserAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UpdateUserAvatar(ctx, req.(*UpdateUserAvatarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UpdateUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UpdateUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UpdateUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UpdateUserStatus(ctx, req.(*UpdateUserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UpdateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UpdateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UpdateUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UpdateUserRole(ctx, req.(*UpdateUserRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_FindUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).FindUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_FindUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).FindUserList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRpc_ServiceDesc is the grpc.ServiceDesc for UserRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.UserRpc",
	HandlerType: (*UserRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindUserLoginHistoryList",
			Handler:    _UserRpc_FindUserLoginHistoryList_Handler,
		},
		{
			MethodName: "DeleteUserLoginHistoryList",
			Handler:    _UserRpc_DeleteUserLoginHistoryList_Handler,
		},
		{
			MethodName: "FindUserApis",
			Handler:    _UserRpc_FindUserApis_Handler,
		},
		{
			MethodName: "FindUserMenus",
			Handler:    _UserRpc_FindUserMenus_Handler,
		},
		{
			MethodName: "FindUserRoles",
			Handler:    _UserRpc_FindUserRoles_Handler,
		},
		{
			MethodName: "FindUserInfo",
			Handler:    _UserRpc_FindUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _UserRpc_UpdateUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserAvatar",
			Handler:    _UserRpc_UpdateUserAvatar_Handler,
		},
		{
			MethodName: "UpdateUserStatus",
			Handler:    _UserRpc_UpdateUserStatus_Handler,
		},
		{
			MethodName: "UpdateUserRole",
			Handler:    _UserRpc_UpdateUserRole_Handler,
		},
		{
			MethodName: "FindUserList",
			Handler:    _UserRpc_FindUserList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	ConfigRpc_SaveConfig_FullMethodName = "/blog.ConfigRpc/SaveConfig"
	ConfigRpc_FindConfig_FullMethodName = "/blog.ConfigRpc/FindConfig"
)

// ConfigRpcClient is the client API for ConfigRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigRpcClient interface {
	SaveConfig(ctx context.Context, in *SaveConfigReq, opts ...grpc.CallOption) (*EmptyResp, error)
	FindConfig(ctx context.Context, in *FindConfigReq, opts ...grpc.CallOption) (*FindConfigResp, error)
}

type configRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigRpcClient(cc grpc.ClientConnInterface) ConfigRpcClient {
	return &configRpcClient{cc}
}

func (c *configRpcClient) SaveConfig(ctx context.Context, in *SaveConfigReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, ConfigRpc_SaveConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configRpcClient) FindConfig(ctx context.Context, in *FindConfigReq, opts ...grpc.CallOption) (*FindConfigResp, error) {
	out := new(FindConfigResp)
	err := c.cc.Invoke(ctx, ConfigRpc_FindConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigRpcServer is the server API for ConfigRpc service.
// All implementations must embed UnimplementedConfigRpcServer
// for forward compatibility
type ConfigRpcServer interface {
	SaveConfig(context.Context, *SaveConfigReq) (*EmptyResp, error)
	FindConfig(context.Context, *FindConfigReq) (*FindConfigResp, error)
	mustEmbedUnimplementedConfigRpcServer()
}

// UnimplementedConfigRpcServer must be embedded to have forward compatible implementations.
type UnimplementedConfigRpcServer struct {
}

func (UnimplementedConfigRpcServer) SaveConfig(context.Context, *SaveConfigReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveConfig not implemented")
}
func (UnimplementedConfigRpcServer) FindConfig(context.Context, *FindConfigReq) (*FindConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindConfig not implemented")
}
func (UnimplementedConfigRpcServer) mustEmbedUnimplementedConfigRpcServer() {}

// UnsafeConfigRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigRpcServer will
// result in compilation errors.
type UnsafeConfigRpcServer interface {
	mustEmbedUnimplementedConfigRpcServer()
}

func RegisterConfigRpcServer(s grpc.ServiceRegistrar, srv ConfigRpcServer) {
	s.RegisterService(&ConfigRpc_ServiceDesc, srv)
}

func _ConfigRpc_SaveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigRpcServer).SaveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigRpc_SaveConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigRpcServer).SaveConfig(ctx, req.(*SaveConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigRpc_FindConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigRpcServer).FindConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigRpc_FindConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigRpcServer).FindConfig(ctx, req.(*FindConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigRpc_ServiceDesc is the grpc.ServiceDesc for ConfigRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.ConfigRpc",
	HandlerType: (*ConfigRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveConfig",
			Handler:    _ConfigRpc_SaveConfig_Handler,
		},
		{
			MethodName: "FindConfig",
			Handler:    _ConfigRpc_FindConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	ArticleRpc_CreateArticle_FullMethodName         = "/blog.ArticleRpc/CreateArticle"
	ArticleRpc_UpdateArticle_FullMethodName         = "/blog.ArticleRpc/UpdateArticle"
	ArticleRpc_DeleteArticle_FullMethodName         = "/blog.ArticleRpc/DeleteArticle"
	ArticleRpc_DeleteArticleList_FullMethodName     = "/blog.ArticleRpc/DeleteArticleList"
	ArticleRpc_FindArticle_FullMethodName           = "/blog.ArticleRpc/FindArticle"
	ArticleRpc_FindArticleList_FullMethodName       = "/blog.ArticleRpc/FindArticleList"
	ArticleRpc_FindArticleCount_FullMethodName      = "/blog.ArticleRpc/FindArticleCount"
	ArticleRpc_FindArticleByTag_FullMethodName      = "/blog.ArticleRpc/FindArticleByTag"
	ArticleRpc_FindArticleByCategory_FullMethodName = "/blog.ArticleRpc/FindArticleByCategory"
)

// ArticleRpcClient is the client API for ArticleRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleRpcClient interface {
	// 创建文章
	CreateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error)
	// 更新文章
	UpdateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error)
	// 删除文章
	DeleteArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除文章
	DeleteArticleList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询文章
	FindArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Article, error)
	// 查询文章列表
	FindArticleList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*ArticlePageResp, error)
	// 查询文章数量
	FindArticleCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
	// 查询文章列表
	FindArticleByTag(ctx context.Context, in *FindArticleByTagReq, opts ...grpc.CallOption) (*ArticlePageResp, error)
	// 查询文章列表
	FindArticleByCategory(ctx context.Context, in *FindArticleByCategoryReq, opts ...grpc.CallOption) (*ArticlePageResp, error)
}

type articleRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleRpcClient(cc grpc.ClientConnInterface) ArticleRpcClient {
	return &articleRpcClient{cc}
}

func (c *articleRpcClient) CreateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, ArticleRpc_CreateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) UpdateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, ArticleRpc_UpdateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) DeleteArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ArticleRpc_DeleteArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) DeleteArticleList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ArticleRpc_DeleteArticleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, ArticleRpc_FindArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindArticleList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*ArticlePageResp, error) {
	out := new(ArticlePageResp)
	err := c.cc.Invoke(ctx, ArticleRpc_FindArticleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindArticleCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, ArticleRpc_FindArticleCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindArticleByTag(ctx context.Context, in *FindArticleByTagReq, opts ...grpc.CallOption) (*ArticlePageResp, error) {
	out := new(ArticlePageResp)
	err := c.cc.Invoke(ctx, ArticleRpc_FindArticleByTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcClient) FindArticleByCategory(ctx context.Context, in *FindArticleByCategoryReq, opts ...grpc.CallOption) (*ArticlePageResp, error) {
	out := new(ArticlePageResp)
	err := c.cc.Invoke(ctx, ArticleRpc_FindArticleByCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleRpcServer is the server API for ArticleRpc service.
// All implementations must embed UnimplementedArticleRpcServer
// for forward compatibility
type ArticleRpcServer interface {
	// 创建文章
	CreateArticle(context.Context, *Article) (*Article, error)
	// 更新文章
	UpdateArticle(context.Context, *Article) (*Article, error)
	// 删除文章
	DeleteArticle(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除文章
	DeleteArticleList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询文章
	FindArticle(context.Context, *IdReq) (*Article, error)
	// 查询文章列表
	FindArticleList(context.Context, *PageQuery) (*ArticlePageResp, error)
	// 查询文章数量
	FindArticleCount(context.Context, *PageQuery) (*CountResp, error)
	// 查询文章列表
	FindArticleByTag(context.Context, *FindArticleByTagReq) (*ArticlePageResp, error)
	// 查询文章列表
	FindArticleByCategory(context.Context, *FindArticleByCategoryReq) (*ArticlePageResp, error)
	mustEmbedUnimplementedArticleRpcServer()
}

// UnimplementedArticleRpcServer must be embedded to have forward compatible implementations.
type UnimplementedArticleRpcServer struct {
}

func (UnimplementedArticleRpcServer) CreateArticle(context.Context, *Article) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedArticleRpcServer) UpdateArticle(context.Context, *Article) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedArticleRpcServer) DeleteArticle(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedArticleRpcServer) DeleteArticleList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticleList not implemented")
}
func (UnimplementedArticleRpcServer) FindArticle(context.Context, *IdReq) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArticle not implemented")
}
func (UnimplementedArticleRpcServer) FindArticleList(context.Context, *PageQuery) (*ArticlePageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArticleList not implemented")
}
func (UnimplementedArticleRpcServer) FindArticleCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArticleCount not implemented")
}
func (UnimplementedArticleRpcServer) FindArticleByTag(context.Context, *FindArticleByTagReq) (*ArticlePageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArticleByTag not implemented")
}
func (UnimplementedArticleRpcServer) FindArticleByCategory(context.Context, *FindArticleByCategoryReq) (*ArticlePageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArticleByCategory not implemented")
}
func (UnimplementedArticleRpcServer) mustEmbedUnimplementedArticleRpcServer() {}

// UnsafeArticleRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleRpcServer will
// result in compilation errors.
type UnsafeArticleRpcServer interface {
	mustEmbedUnimplementedArticleRpcServer()
}

func RegisterArticleRpcServer(s grpc.ServiceRegistrar, srv ArticleRpcServer) {
	s.RegisterService(&ArticleRpc_ServiceDesc, srv)
}

func _ArticleRpc_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_CreateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).CreateArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_UpdateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).UpdateArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_DeleteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).DeleteArticle(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_DeleteArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).DeleteArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_DeleteArticleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).DeleteArticleList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_FindArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindArticle(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_FindArticleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindArticleList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindArticleCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindArticleCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_FindArticleCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindArticleCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindArticleByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindArticleByTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindArticleByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_FindArticleByTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindArticleByTag(ctx, req.(*FindArticleByTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpc_FindArticleByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindArticleByCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServer).FindArticleByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpc_FindArticleByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServer).FindArticleByCategory(ctx, req.(*FindArticleByCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleRpc_ServiceDesc is the grpc.ServiceDesc for ArticleRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.ArticleRpc",
	HandlerType: (*ArticleRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArticle",
			Handler:    _ArticleRpc_CreateArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _ArticleRpc_UpdateArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _ArticleRpc_DeleteArticle_Handler,
		},
		{
			MethodName: "DeleteArticleList",
			Handler:    _ArticleRpc_DeleteArticleList_Handler,
		},
		{
			MethodName: "FindArticle",
			Handler:    _ArticleRpc_FindArticle_Handler,
		},
		{
			MethodName: "FindArticleList",
			Handler:    _ArticleRpc_FindArticleList_Handler,
		},
		{
			MethodName: "FindArticleCount",
			Handler:    _ArticleRpc_FindArticleCount_Handler,
		},
		{
			MethodName: "FindArticleByTag",
			Handler:    _ArticleRpc_FindArticleByTag_Handler,
		},
		{
			MethodName: "FindArticleByCategory",
			Handler:    _ArticleRpc_FindArticleByCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	CategoryRpc_CreateCategory_FullMethodName        = "/blog.CategoryRpc/CreateCategory"
	CategoryRpc_UpdateCategory_FullMethodName        = "/blog.CategoryRpc/UpdateCategory"
	CategoryRpc_DeleteCategory_FullMethodName        = "/blog.CategoryRpc/DeleteCategory"
	CategoryRpc_DeleteCategoryList_FullMethodName    = "/blog.CategoryRpc/DeleteCategoryList"
	CategoryRpc_FindCategory_FullMethodName          = "/blog.CategoryRpc/FindCategory"
	CategoryRpc_FindCategoryCount_FullMethodName     = "/blog.CategoryRpc/FindCategoryCount"
	CategoryRpc_FindCategoryList_FullMethodName      = "/blog.CategoryRpc/FindCategoryList"
	CategoryRpc_FindCategoryListByIds_FullMethodName = "/blog.CategoryRpc/FindCategoryListByIds"
)

// CategoryRpcClient is the client API for CategoryRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryRpcClient interface {
	// 创建文章分类
	CreateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error)
	// 更新文章分类
	UpdateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error)
	// 删除文章分类
	DeleteCategory(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除文章分类
	DeleteCategoryList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询文章分类
	FindCategory(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Category, error)
	// 查询文章分类数量
	FindCategoryCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
	// 查询文章分类列表
	FindCategoryList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CategoryPageResp, error)
	// 查询文章分类列表(通过ids)
	FindCategoryListByIds(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*CategoryPageResp, error)
}

type categoryRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryRpcClient(cc grpc.ClientConnInterface) CategoryRpcClient {
	return &categoryRpcClient{cc}
}

func (c *categoryRpcClient) CreateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, CategoryRpc_CreateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryRpcClient) UpdateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, CategoryRpc_UpdateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryRpcClient) DeleteCategory(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, CategoryRpc_DeleteCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryRpcClient) DeleteCategoryList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, CategoryRpc_DeleteCategoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryRpcClient) FindCategory(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, CategoryRpc_FindCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryRpcClient) FindCategoryCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, CategoryRpc_FindCategoryCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryRpcClient) FindCategoryList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CategoryPageResp, error) {
	out := new(CategoryPageResp)
	err := c.cc.Invoke(ctx, CategoryRpc_FindCategoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryRpcClient) FindCategoryListByIds(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*CategoryPageResp, error) {
	out := new(CategoryPageResp)
	err := c.cc.Invoke(ctx, CategoryRpc_FindCategoryListByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryRpcServer is the server API for CategoryRpc service.
// All implementations must embed UnimplementedCategoryRpcServer
// for forward compatibility
type CategoryRpcServer interface {
	// 创建文章分类
	CreateCategory(context.Context, *Category) (*Category, error)
	// 更新文章分类
	UpdateCategory(context.Context, *Category) (*Category, error)
	// 删除文章分类
	DeleteCategory(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除文章分类
	DeleteCategoryList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询文章分类
	FindCategory(context.Context, *IdReq) (*Category, error)
	// 查询文章分类数量
	FindCategoryCount(context.Context, *PageQuery) (*CountResp, error)
	// 查询文章分类列表
	FindCategoryList(context.Context, *PageQuery) (*CategoryPageResp, error)
	// 查询文章分类列表(通过ids)
	FindCategoryListByIds(context.Context, *IdsReq) (*CategoryPageResp, error)
	mustEmbedUnimplementedCategoryRpcServer()
}

// UnimplementedCategoryRpcServer must be embedded to have forward compatible implementations.
type UnimplementedCategoryRpcServer struct {
}

func (UnimplementedCategoryRpcServer) CreateCategory(context.Context, *Category) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedCategoryRpcServer) UpdateCategory(context.Context, *Category) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedCategoryRpcServer) DeleteCategory(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedCategoryRpcServer) DeleteCategoryList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategoryList not implemented")
}
func (UnimplementedCategoryRpcServer) FindCategory(context.Context, *IdReq) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCategory not implemented")
}
func (UnimplementedCategoryRpcServer) FindCategoryCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCategoryCount not implemented")
}
func (UnimplementedCategoryRpcServer) FindCategoryList(context.Context, *PageQuery) (*CategoryPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCategoryList not implemented")
}
func (UnimplementedCategoryRpcServer) FindCategoryListByIds(context.Context, *IdsReq) (*CategoryPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCategoryListByIds not implemented")
}
func (UnimplementedCategoryRpcServer) mustEmbedUnimplementedCategoryRpcServer() {}

// UnsafeCategoryRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryRpcServer will
// result in compilation errors.
type UnsafeCategoryRpcServer interface {
	mustEmbedUnimplementedCategoryRpcServer()
}

func RegisterCategoryRpcServer(s grpc.ServiceRegistrar, srv CategoryRpcServer) {
	s.RegisterService(&CategoryRpc_ServiceDesc, srv)
}

func _CategoryRpc_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryRpcServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryRpc_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryRpcServer).CreateCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryRpc_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryRpcServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryRpc_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryRpcServer).UpdateCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryRpc_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryRpcServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryRpc_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryRpcServer).DeleteCategory(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryRpc_DeleteCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryRpcServer).DeleteCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryRpc_DeleteCategoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryRpcServer).DeleteCategoryList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryRpc_FindCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryRpcServer).FindCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryRpc_FindCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryRpcServer).FindCategory(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryRpc_FindCategoryCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryRpcServer).FindCategoryCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryRpc_FindCategoryCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryRpcServer).FindCategoryCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryRpc_FindCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryRpcServer).FindCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryRpc_FindCategoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryRpcServer).FindCategoryList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryRpc_FindCategoryListByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryRpcServer).FindCategoryListByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryRpc_FindCategoryListByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryRpcServer).FindCategoryListByIds(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoryRpc_ServiceDesc is the grpc.ServiceDesc for CategoryRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.CategoryRpc",
	HandlerType: (*CategoryRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCategory",
			Handler:    _CategoryRpc_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _CategoryRpc_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _CategoryRpc_DeleteCategory_Handler,
		},
		{
			MethodName: "DeleteCategoryList",
			Handler:    _CategoryRpc_DeleteCategoryList_Handler,
		},
		{
			MethodName: "FindCategory",
			Handler:    _CategoryRpc_FindCategory_Handler,
		},
		{
			MethodName: "FindCategoryCount",
			Handler:    _CategoryRpc_FindCategoryCount_Handler,
		},
		{
			MethodName: "FindCategoryList",
			Handler:    _CategoryRpc_FindCategoryList_Handler,
		},
		{
			MethodName: "FindCategoryListByIds",
			Handler:    _CategoryRpc_FindCategoryListByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	TagRpc_CreateTag_FullMethodName              = "/blog.TagRpc/CreateTag"
	TagRpc_UpdateTag_FullMethodName              = "/blog.TagRpc/UpdateTag"
	TagRpc_DeleteTag_FullMethodName              = "/blog.TagRpc/DeleteTag"
	TagRpc_DeleteTagList_FullMethodName          = "/blog.TagRpc/DeleteTagList"
	TagRpc_FindTag_FullMethodName                = "/blog.TagRpc/FindTag"
	TagRpc_FindTagList_FullMethodName            = "/blog.TagRpc/FindTagList"
	TagRpc_FindTagCount_FullMethodName           = "/blog.TagRpc/FindTagCount"
	TagRpc_FindTagArticleCount_FullMethodName    = "/blog.TagRpc/FindTagArticleCount"
	TagRpc_FindTagMapByArticleIds_FullMethodName = "/blog.TagRpc/FindTagMapByArticleIds"
)

// TagRpcClient is the client API for TagRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagRpcClient interface {
	// 创建标签
	CreateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error)
	// 更新标签
	UpdateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error)
	// 删除标签
	DeleteTag(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除标签
	DeleteTagList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询标签
	FindTag(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Tag, error)
	// 查询标签列表
	FindTagList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*TagPageResp, error)
	// 查询标签数量
	FindTagCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
	// 查询标签关联文章数量
	FindTagArticleCount(ctx context.Context, in *FindTagArticleCountReq, opts ...grpc.CallOption) (*CountResp, error)
	// 查询文章标签列表(通过文章ids)
	FindTagMapByArticleIds(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*TagMapResp, error)
}

type tagRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewTagRpcClient(cc grpc.ClientConnInterface) TagRpcClient {
	return &tagRpcClient{cc}
}

func (c *tagRpcClient) CreateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, TagRpc_CreateTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRpcClient) UpdateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, TagRpc_UpdateTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRpcClient) DeleteTag(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, TagRpc_DeleteTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRpcClient) DeleteTagList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, TagRpc_DeleteTagList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRpcClient) FindTag(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, TagRpc_FindTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRpcClient) FindTagList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*TagPageResp, error) {
	out := new(TagPageResp)
	err := c.cc.Invoke(ctx, TagRpc_FindTagList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRpcClient) FindTagCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, TagRpc_FindTagCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRpcClient) FindTagArticleCount(ctx context.Context, in *FindTagArticleCountReq, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, TagRpc_FindTagArticleCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRpcClient) FindTagMapByArticleIds(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*TagMapResp, error) {
	out := new(TagMapResp)
	err := c.cc.Invoke(ctx, TagRpc_FindTagMapByArticleIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagRpcServer is the server API for TagRpc service.
// All implementations must embed UnimplementedTagRpcServer
// for forward compatibility
type TagRpcServer interface {
	// 创建标签
	CreateTag(context.Context, *Tag) (*Tag, error)
	// 更新标签
	UpdateTag(context.Context, *Tag) (*Tag, error)
	// 删除标签
	DeleteTag(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除标签
	DeleteTagList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询标签
	FindTag(context.Context, *IdReq) (*Tag, error)
	// 查询标签列表
	FindTagList(context.Context, *PageQuery) (*TagPageResp, error)
	// 查询标签数量
	FindTagCount(context.Context, *PageQuery) (*CountResp, error)
	// 查询标签关联文章数量
	FindTagArticleCount(context.Context, *FindTagArticleCountReq) (*CountResp, error)
	// 查询文章标签列表(通过文章ids)
	FindTagMapByArticleIds(context.Context, *IdsReq) (*TagMapResp, error)
	mustEmbedUnimplementedTagRpcServer()
}

// UnimplementedTagRpcServer must be embedded to have forward compatible implementations.
type UnimplementedTagRpcServer struct {
}

func (UnimplementedTagRpcServer) CreateTag(context.Context, *Tag) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedTagRpcServer) UpdateTag(context.Context, *Tag) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedTagRpcServer) DeleteTag(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedTagRpcServer) DeleteTagList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTagList not implemented")
}
func (UnimplementedTagRpcServer) FindTag(context.Context, *IdReq) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTag not implemented")
}
func (UnimplementedTagRpcServer) FindTagList(context.Context, *PageQuery) (*TagPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTagList not implemented")
}
func (UnimplementedTagRpcServer) FindTagCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTagCount not implemented")
}
func (UnimplementedTagRpcServer) FindTagArticleCount(context.Context, *FindTagArticleCountReq) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTagArticleCount not implemented")
}
func (UnimplementedTagRpcServer) FindTagMapByArticleIds(context.Context, *IdsReq) (*TagMapResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTagMapByArticleIds not implemented")
}
func (UnimplementedTagRpcServer) mustEmbedUnimplementedTagRpcServer() {}

// UnsafeTagRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagRpcServer will
// result in compilation errors.
type UnsafeTagRpcServer interface {
	mustEmbedUnimplementedTagRpcServer()
}

func RegisterTagRpcServer(s grpc.ServiceRegistrar, srv TagRpcServer) {
	s.RegisterService(&TagRpc_ServiceDesc, srv)
}

func _TagRpc_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRpcServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagRpc_CreateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRpcServer).CreateTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRpc_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRpcServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagRpc_UpdateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRpcServer).UpdateTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRpc_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRpcServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagRpc_DeleteTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRpcServer).DeleteTag(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRpc_DeleteTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRpcServer).DeleteTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagRpc_DeleteTagList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRpcServer).DeleteTagList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRpc_FindTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRpcServer).FindTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagRpc_FindTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRpcServer).FindTag(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRpc_FindTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRpcServer).FindTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagRpc_FindTagList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRpcServer).FindTagList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRpc_FindTagCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRpcServer).FindTagCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagRpc_FindTagCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRpcServer).FindTagCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRpc_FindTagArticleCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTagArticleCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRpcServer).FindTagArticleCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagRpc_FindTagArticleCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRpcServer).FindTagArticleCount(ctx, req.(*FindTagArticleCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRpc_FindTagMapByArticleIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRpcServer).FindTagMapByArticleIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagRpc_FindTagMapByArticleIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRpcServer).FindTagMapByArticleIds(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TagRpc_ServiceDesc is the grpc.ServiceDesc for TagRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.TagRpc",
	HandlerType: (*TagRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTag",
			Handler:    _TagRpc_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _TagRpc_UpdateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _TagRpc_DeleteTag_Handler,
		},
		{
			MethodName: "DeleteTagList",
			Handler:    _TagRpc_DeleteTagList_Handler,
		},
		{
			MethodName: "FindTag",
			Handler:    _TagRpc_FindTag_Handler,
		},
		{
			MethodName: "FindTagList",
			Handler:    _TagRpc_FindTagList_Handler,
		},
		{
			MethodName: "FindTagCount",
			Handler:    _TagRpc_FindTagCount_Handler,
		},
		{
			MethodName: "FindTagArticleCount",
			Handler:    _TagRpc_FindTagArticleCount_Handler,
		},
		{
			MethodName: "FindTagMapByArticleIds",
			Handler:    _TagRpc_FindTagMapByArticleIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	FriendLinkRpc_CreateFriendLink_FullMethodName     = "/blog.FriendLinkRpc/CreateFriendLink"
	FriendLinkRpc_UpdateFriendLink_FullMethodName     = "/blog.FriendLinkRpc/UpdateFriendLink"
	FriendLinkRpc_DeleteFriendLink_FullMethodName     = "/blog.FriendLinkRpc/DeleteFriendLink"
	FriendLinkRpc_DeleteFriendLinkList_FullMethodName = "/blog.FriendLinkRpc/DeleteFriendLinkList"
	FriendLinkRpc_FindFriendLink_FullMethodName       = "/blog.FriendLinkRpc/FindFriendLink"
	FriendLinkRpc_FindFriendLinkList_FullMethodName   = "/blog.FriendLinkRpc/FindFriendLinkList"
	FriendLinkRpc_FindFriendLinkCount_FullMethodName  = "/blog.FriendLinkRpc/FindFriendLinkCount"
)

// FriendLinkRpcClient is the client API for FriendLinkRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendLinkRpcClient interface {
	// 创建友链
	CreateFriendLink(ctx context.Context, in *FriendLink, opts ...grpc.CallOption) (*FriendLink, error)
	// 更新友链
	UpdateFriendLink(ctx context.Context, in *FriendLink, opts ...grpc.CallOption) (*FriendLink, error)
	// 删除友链
	DeleteFriendLink(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除友链
	DeleteFriendLinkList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询友链
	FindFriendLink(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*FriendLink, error)
	// 查询友链列表
	FindFriendLinkList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FriendLinkPageResp, error)
	// 查询友链数量
	FindFriendLinkCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
}

type friendLinkRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendLinkRpcClient(cc grpc.ClientConnInterface) FriendLinkRpcClient {
	return &friendLinkRpcClient{cc}
}

func (c *friendLinkRpcClient) CreateFriendLink(ctx context.Context, in *FriendLink, opts ...grpc.CallOption) (*FriendLink, error) {
	out := new(FriendLink)
	err := c.cc.Invoke(ctx, FriendLinkRpc_CreateFriendLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendLinkRpcClient) UpdateFriendLink(ctx context.Context, in *FriendLink, opts ...grpc.CallOption) (*FriendLink, error) {
	out := new(FriendLink)
	err := c.cc.Invoke(ctx, FriendLinkRpc_UpdateFriendLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendLinkRpcClient) DeleteFriendLink(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, FriendLinkRpc_DeleteFriendLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendLinkRpcClient) DeleteFriendLinkList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, FriendLinkRpc_DeleteFriendLinkList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendLinkRpcClient) FindFriendLink(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*FriendLink, error) {
	out := new(FriendLink)
	err := c.cc.Invoke(ctx, FriendLinkRpc_FindFriendLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendLinkRpcClient) FindFriendLinkList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*FriendLinkPageResp, error) {
	out := new(FriendLinkPageResp)
	err := c.cc.Invoke(ctx, FriendLinkRpc_FindFriendLinkList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendLinkRpcClient) FindFriendLinkCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, FriendLinkRpc_FindFriendLinkCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendLinkRpcServer is the server API for FriendLinkRpc service.
// All implementations must embed UnimplementedFriendLinkRpcServer
// for forward compatibility
type FriendLinkRpcServer interface {
	// 创建友链
	CreateFriendLink(context.Context, *FriendLink) (*FriendLink, error)
	// 更新友链
	UpdateFriendLink(context.Context, *FriendLink) (*FriendLink, error)
	// 删除友链
	DeleteFriendLink(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除友链
	DeleteFriendLinkList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询友链
	FindFriendLink(context.Context, *IdReq) (*FriendLink, error)
	// 查询友链列表
	FindFriendLinkList(context.Context, *PageQuery) (*FriendLinkPageResp, error)
	// 查询友链数量
	FindFriendLinkCount(context.Context, *PageQuery) (*CountResp, error)
	mustEmbedUnimplementedFriendLinkRpcServer()
}

// UnimplementedFriendLinkRpcServer must be embedded to have forward compatible implementations.
type UnimplementedFriendLinkRpcServer struct {
}

func (UnimplementedFriendLinkRpcServer) CreateFriendLink(context.Context, *FriendLink) (*FriendLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFriendLink not implemented")
}
func (UnimplementedFriendLinkRpcServer) UpdateFriendLink(context.Context, *FriendLink) (*FriendLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFriendLink not implemented")
}
func (UnimplementedFriendLinkRpcServer) DeleteFriendLink(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriendLink not implemented")
}
func (UnimplementedFriendLinkRpcServer) DeleteFriendLinkList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriendLinkList not implemented")
}
func (UnimplementedFriendLinkRpcServer) FindFriendLink(context.Context, *IdReq) (*FriendLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFriendLink not implemented")
}
func (UnimplementedFriendLinkRpcServer) FindFriendLinkList(context.Context, *PageQuery) (*FriendLinkPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFriendLinkList not implemented")
}
func (UnimplementedFriendLinkRpcServer) FindFriendLinkCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFriendLinkCount not implemented")
}
func (UnimplementedFriendLinkRpcServer) mustEmbedUnimplementedFriendLinkRpcServer() {}

// UnsafeFriendLinkRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendLinkRpcServer will
// result in compilation errors.
type UnsafeFriendLinkRpcServer interface {
	mustEmbedUnimplementedFriendLinkRpcServer()
}

func RegisterFriendLinkRpcServer(s grpc.ServiceRegistrar, srv FriendLinkRpcServer) {
	s.RegisterService(&FriendLinkRpc_ServiceDesc, srv)
}

func _FriendLinkRpc_CreateFriendLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendLinkRpcServer).CreateFriendLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendLinkRpc_CreateFriendLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendLinkRpcServer).CreateFriendLink(ctx, req.(*FriendLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendLinkRpc_UpdateFriendLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendLinkRpcServer).UpdateFriendLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendLinkRpc_UpdateFriendLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendLinkRpcServer).UpdateFriendLink(ctx, req.(*FriendLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendLinkRpc_DeleteFriendLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendLinkRpcServer).DeleteFriendLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendLinkRpc_DeleteFriendLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendLinkRpcServer).DeleteFriendLink(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendLinkRpc_DeleteFriendLinkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendLinkRpcServer).DeleteFriendLinkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendLinkRpc_DeleteFriendLinkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendLinkRpcServer).DeleteFriendLinkList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendLinkRpc_FindFriendLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendLinkRpcServer).FindFriendLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendLinkRpc_FindFriendLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendLinkRpcServer).FindFriendLink(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendLinkRpc_FindFriendLinkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendLinkRpcServer).FindFriendLinkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendLinkRpc_FindFriendLinkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendLinkRpcServer).FindFriendLinkList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendLinkRpc_FindFriendLinkCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendLinkRpcServer).FindFriendLinkCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendLinkRpc_FindFriendLinkCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendLinkRpcServer).FindFriendLinkCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendLinkRpc_ServiceDesc is the grpc.ServiceDesc for FriendLinkRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendLinkRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.FriendLinkRpc",
	HandlerType: (*FriendLinkRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFriendLink",
			Handler:    _FriendLinkRpc_CreateFriendLink_Handler,
		},
		{
			MethodName: "UpdateFriendLink",
			Handler:    _FriendLinkRpc_UpdateFriendLink_Handler,
		},
		{
			MethodName: "DeleteFriendLink",
			Handler:    _FriendLinkRpc_DeleteFriendLink_Handler,
		},
		{
			MethodName: "DeleteFriendLinkList",
			Handler:    _FriendLinkRpc_DeleteFriendLinkList_Handler,
		},
		{
			MethodName: "FindFriendLink",
			Handler:    _FriendLinkRpc_FindFriendLink_Handler,
		},
		{
			MethodName: "FindFriendLinkList",
			Handler:    _FriendLinkRpc_FindFriendLinkList_Handler,
		},
		{
			MethodName: "FindFriendLinkCount",
			Handler:    _FriendLinkRpc_FindFriendLinkCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	RemarkRpc_CreateRemark_FullMethodName     = "/blog.remarkRpc/CreateRemark"
	RemarkRpc_UpdateRemark_FullMethodName     = "/blog.remarkRpc/UpdateRemark"
	RemarkRpc_DeleteRemark_FullMethodName     = "/blog.remarkRpc/DeleteRemark"
	RemarkRpc_DeleteRemarkList_FullMethodName = "/blog.remarkRpc/DeleteRemarkList"
	RemarkRpc_FindRemark_FullMethodName       = "/blog.remarkRpc/FindRemark"
	RemarkRpc_FindRemarkList_FullMethodName   = "/blog.remarkRpc/FindRemarkList"
	RemarkRpc_FindRemarkCount_FullMethodName  = "/blog.remarkRpc/FindRemarkCount"
)

// RemarkRpcClient is the client API for RemarkRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemarkRpcClient interface {
	// 创建留言
	CreateRemark(ctx context.Context, in *Remark, opts ...grpc.CallOption) (*Remark, error)
	// 更新留言
	UpdateRemark(ctx context.Context, in *Remark, opts ...grpc.CallOption) (*Remark, error)
	// 删除留言
	DeleteRemark(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除留言
	DeleteRemarkList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询留言
	FindRemark(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Remark, error)
	// 查询留言列表
	FindRemarkList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*RemarkPageResp, error)
	// 查询留言数量
	FindRemarkCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
}

type remarkRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRemarkRpcClient(cc grpc.ClientConnInterface) RemarkRpcClient {
	return &remarkRpcClient{cc}
}

func (c *remarkRpcClient) CreateRemark(ctx context.Context, in *Remark, opts ...grpc.CallOption) (*Remark, error) {
	out := new(Remark)
	err := c.cc.Invoke(ctx, RemarkRpc_CreateRemark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remarkRpcClient) UpdateRemark(ctx context.Context, in *Remark, opts ...grpc.CallOption) (*Remark, error) {
	out := new(Remark)
	err := c.cc.Invoke(ctx, RemarkRpc_UpdateRemark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remarkRpcClient) DeleteRemark(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, RemarkRpc_DeleteRemark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remarkRpcClient) DeleteRemarkList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, RemarkRpc_DeleteRemarkList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remarkRpcClient) FindRemark(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Remark, error) {
	out := new(Remark)
	err := c.cc.Invoke(ctx, RemarkRpc_FindRemark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remarkRpcClient) FindRemarkList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*RemarkPageResp, error) {
	out := new(RemarkPageResp)
	err := c.cc.Invoke(ctx, RemarkRpc_FindRemarkList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remarkRpcClient) FindRemarkCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, RemarkRpc_FindRemarkCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemarkRpcServer is the server API for RemarkRpc service.
// All implementations must embed UnimplementedRemarkRpcServer
// for forward compatibility
type RemarkRpcServer interface {
	// 创建留言
	CreateRemark(context.Context, *Remark) (*Remark, error)
	// 更新留言
	UpdateRemark(context.Context, *Remark) (*Remark, error)
	// 删除留言
	DeleteRemark(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除留言
	DeleteRemarkList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询留言
	FindRemark(context.Context, *IdReq) (*Remark, error)
	// 查询留言列表
	FindRemarkList(context.Context, *PageQuery) (*RemarkPageResp, error)
	// 查询留言数量
	FindRemarkCount(context.Context, *PageQuery) (*CountResp, error)
	mustEmbedUnimplementedRemarkRpcServer()
}

// UnimplementedRemarkRpcServer must be embedded to have forward compatible implementations.
type UnimplementedRemarkRpcServer struct {
}

func (UnimplementedRemarkRpcServer) CreateRemark(context.Context, *Remark) (*Remark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRemark not implemented")
}
func (UnimplementedRemarkRpcServer) UpdateRemark(context.Context, *Remark) (*Remark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRemark not implemented")
}
func (UnimplementedRemarkRpcServer) DeleteRemark(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRemark not implemented")
}
func (UnimplementedRemarkRpcServer) DeleteRemarkList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRemarkList not implemented")
}
func (UnimplementedRemarkRpcServer) FindRemark(context.Context, *IdReq) (*Remark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRemark not implemented")
}
func (UnimplementedRemarkRpcServer) FindRemarkList(context.Context, *PageQuery) (*RemarkPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRemarkList not implemented")
}
func (UnimplementedRemarkRpcServer) FindRemarkCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRemarkCount not implemented")
}
func (UnimplementedRemarkRpcServer) mustEmbedUnimplementedRemarkRpcServer() {}

// UnsafeRemarkRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemarkRpcServer will
// result in compilation errors.
type UnsafeRemarkRpcServer interface {
	mustEmbedUnimplementedRemarkRpcServer()
}

func RegisterRemarkRpcServer(s grpc.ServiceRegistrar, srv RemarkRpcServer) {
	s.RegisterService(&RemarkRpc_ServiceDesc, srv)
}

func _RemarkRpc_CreateRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Remark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemarkRpcServer).CreateRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemarkRpc_CreateRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemarkRpcServer).CreateRemark(ctx, req.(*Remark))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemarkRpc_UpdateRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Remark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemarkRpcServer).UpdateRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemarkRpc_UpdateRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemarkRpcServer).UpdateRemark(ctx, req.(*Remark))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemarkRpc_DeleteRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemarkRpcServer).DeleteRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemarkRpc_DeleteRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemarkRpcServer).DeleteRemark(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemarkRpc_DeleteRemarkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemarkRpcServer).DeleteRemarkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemarkRpc_DeleteRemarkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemarkRpcServer).DeleteRemarkList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemarkRpc_FindRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemarkRpcServer).FindRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemarkRpc_FindRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemarkRpcServer).FindRemark(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemarkRpc_FindRemarkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemarkRpcServer).FindRemarkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemarkRpc_FindRemarkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemarkRpcServer).FindRemarkList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemarkRpc_FindRemarkCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemarkRpcServer).FindRemarkCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemarkRpc_FindRemarkCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemarkRpcServer).FindRemarkCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// RemarkRpc_ServiceDesc is the grpc.ServiceDesc for RemarkRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemarkRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.remarkRpc",
	HandlerType: (*RemarkRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRemark",
			Handler:    _RemarkRpc_CreateRemark_Handler,
		},
		{
			MethodName: "UpdateRemark",
			Handler:    _RemarkRpc_UpdateRemark_Handler,
		},
		{
			MethodName: "DeleteRemark",
			Handler:    _RemarkRpc_DeleteRemark_Handler,
		},
		{
			MethodName: "DeleteRemarkList",
			Handler:    _RemarkRpc_DeleteRemarkList_Handler,
		},
		{
			MethodName: "FindRemark",
			Handler:    _RemarkRpc_FindRemark_Handler,
		},
		{
			MethodName: "FindRemarkList",
			Handler:    _RemarkRpc_FindRemarkList_Handler,
		},
		{
			MethodName: "FindRemarkCount",
			Handler:    _RemarkRpc_FindRemarkCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	CommentRpc_CreateComment_FullMethodName        = "/blog.commentRpc/CreateComment"
	CommentRpc_UpdateComment_FullMethodName        = "/blog.commentRpc/UpdateComment"
	CommentRpc_DeleteComment_FullMethodName        = "/blog.commentRpc/DeleteComment"
	CommentRpc_DeleteCommentList_FullMethodName    = "/blog.commentRpc/DeleteCommentList"
	CommentRpc_FindComment_FullMethodName          = "/blog.commentRpc/FindComment"
	CommentRpc_FindCommentList_FullMethodName      = "/blog.commentRpc/FindCommentList"
	CommentRpc_FindCommentReplyList_FullMethodName = "/blog.commentRpc/FindCommentReplyList"
	CommentRpc_FindCommentCount_FullMethodName     = "/blog.commentRpc/FindCommentCount"
	CommentRpc_LikeComment_FullMethodName          = "/blog.commentRpc/LikeComment"
)

// CommentRpcClient is the client API for CommentRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentRpcClient interface {
	// 创建评论
	CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	// 更新评论
	UpdateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	// 删除评论
	DeleteComment(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除评论
	DeleteCommentList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询评论
	FindComment(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Comment, error)
	// 查询评论列表
	FindCommentList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CommentPageResp, error)
	// 查询评论回复列表
	FindCommentReplyList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CommentReplyPageResp, error)
	// 查询评论数量
	FindCommentCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
	// 点赞评论
	LikeComment(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error)
}

type commentRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentRpcClient(cc grpc.ClientConnInterface) CommentRpcClient {
	return &commentRpcClient{cc}
}

func (c *commentRpcClient) CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, CommentRpc_CreateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentRpcClient) UpdateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, CommentRpc_UpdateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentRpcClient) DeleteComment(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, CommentRpc_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentRpcClient) DeleteCommentList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, CommentRpc_DeleteCommentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentRpcClient) FindComment(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, CommentRpc_FindComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentRpcClient) FindCommentList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CommentPageResp, error) {
	out := new(CommentPageResp)
	err := c.cc.Invoke(ctx, CommentRpc_FindCommentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentRpcClient) FindCommentReplyList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CommentReplyPageResp, error) {
	out := new(CommentReplyPageResp)
	err := c.cc.Invoke(ctx, CommentRpc_FindCommentReplyList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentRpcClient) FindCommentCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, CommentRpc_FindCommentCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentRpcClient) LikeComment(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, CommentRpc_LikeComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentRpcServer is the server API for CommentRpc service.
// All implementations must embed UnimplementedCommentRpcServer
// for forward compatibility
type CommentRpcServer interface {
	// 创建评论
	CreateComment(context.Context, *Comment) (*Comment, error)
	// 更新评论
	UpdateComment(context.Context, *Comment) (*Comment, error)
	// 删除评论
	DeleteComment(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除评论
	DeleteCommentList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询评论
	FindComment(context.Context, *IdReq) (*Comment, error)
	// 查询评论列表
	FindCommentList(context.Context, *PageQuery) (*CommentPageResp, error)
	// 查询评论回复列表
	FindCommentReplyList(context.Context, *PageQuery) (*CommentReplyPageResp, error)
	// 查询评论数量
	FindCommentCount(context.Context, *PageQuery) (*CountResp, error)
	// 点赞评论
	LikeComment(context.Context, *IdReq) (*EmptyResp, error)
	mustEmbedUnimplementedCommentRpcServer()
}

// UnimplementedCommentRpcServer must be embedded to have forward compatible implementations.
type UnimplementedCommentRpcServer struct {
}

func (UnimplementedCommentRpcServer) CreateComment(context.Context, *Comment) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedCommentRpcServer) UpdateComment(context.Context, *Comment) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedCommentRpcServer) DeleteComment(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCommentRpcServer) DeleteCommentList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentList not implemented")
}
func (UnimplementedCommentRpcServer) FindComment(context.Context, *IdReq) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindComment not implemented")
}
func (UnimplementedCommentRpcServer) FindCommentList(context.Context, *PageQuery) (*CommentPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCommentList not implemented")
}
func (UnimplementedCommentRpcServer) FindCommentReplyList(context.Context, *PageQuery) (*CommentReplyPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCommentReplyList not implemented")
}
func (UnimplementedCommentRpcServer) FindCommentCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCommentCount not implemented")
}
func (UnimplementedCommentRpcServer) LikeComment(context.Context, *IdReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeComment not implemented")
}
func (UnimplementedCommentRpcServer) mustEmbedUnimplementedCommentRpcServer() {}

// UnsafeCommentRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentRpcServer will
// result in compilation errors.
type UnsafeCommentRpcServer interface {
	mustEmbedUnimplementedCommentRpcServer()
}

func RegisterCommentRpcServer(s grpc.ServiceRegistrar, srv CommentRpcServer) {
	s.RegisterService(&CommentRpc_ServiceDesc, srv)
}

func _CommentRpc_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentRpcServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentRpc_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentRpcServer).CreateComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentRpc_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentRpcServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentRpc_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentRpcServer).UpdateComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentRpc_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentRpcServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentRpc_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentRpcServer).DeleteComment(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentRpc_DeleteCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentRpcServer).DeleteCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentRpc_DeleteCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentRpcServer).DeleteCommentList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentRpc_FindComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentRpcServer).FindComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentRpc_FindComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentRpcServer).FindComment(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentRpc_FindCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentRpcServer).FindCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentRpc_FindCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentRpcServer).FindCommentList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentRpc_FindCommentReplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentRpcServer).FindCommentReplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentRpc_FindCommentReplyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentRpcServer).FindCommentReplyList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentRpc_FindCommentCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentRpcServer).FindCommentCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentRpc_FindCommentCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentRpcServer).FindCommentCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentRpc_LikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentRpcServer).LikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentRpc_LikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentRpcServer).LikeComment(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentRpc_ServiceDesc is the grpc.ServiceDesc for CommentRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.commentRpc",
	HandlerType: (*CommentRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComment",
			Handler:    _CommentRpc_CreateComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _CommentRpc_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CommentRpc_DeleteComment_Handler,
		},
		{
			MethodName: "DeleteCommentList",
			Handler:    _CommentRpc_DeleteCommentList_Handler,
		},
		{
			MethodName: "FindComment",
			Handler:    _CommentRpc_FindComment_Handler,
		},
		{
			MethodName: "FindCommentList",
			Handler:    _CommentRpc_FindCommentList_Handler,
		},
		{
			MethodName: "FindCommentReplyList",
			Handler:    _CommentRpc_FindCommentReplyList_Handler,
		},
		{
			MethodName: "FindCommentCount",
			Handler:    _CommentRpc_FindCommentCount_Handler,
		},
		{
			MethodName: "LikeComment",
			Handler:    _CommentRpc_LikeComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	PhotoRpc_CreatePhoto_FullMethodName          = "/blog.photoRpc/CreatePhoto"
	PhotoRpc_UpdatePhoto_FullMethodName          = "/blog.photoRpc/UpdatePhoto"
	PhotoRpc_DeletePhoto_FullMethodName          = "/blog.photoRpc/DeletePhoto"
	PhotoRpc_DeletePhotoList_FullMethodName      = "/blog.photoRpc/DeletePhotoList"
	PhotoRpc_FindPhoto_FullMethodName            = "/blog.photoRpc/FindPhoto"
	PhotoRpc_FindPhotoList_FullMethodName        = "/blog.photoRpc/FindPhotoList"
	PhotoRpc_FindPhotoCount_FullMethodName       = "/blog.photoRpc/FindPhotoCount"
	PhotoRpc_CreatePhotoAlbum_FullMethodName     = "/blog.photoRpc/CreatePhotoAlbum"
	PhotoRpc_UpdatePhotoAlbum_FullMethodName     = "/blog.photoRpc/UpdatePhotoAlbum"
	PhotoRpc_DeletePhotoAlbum_FullMethodName     = "/blog.photoRpc/DeletePhotoAlbum"
	PhotoRpc_DeletePhotoAlbumList_FullMethodName = "/blog.photoRpc/DeletePhotoAlbumList"
	PhotoRpc_FindPhotoAlbum_FullMethodName       = "/blog.photoRpc/FindPhotoAlbum"
	PhotoRpc_FindPhotoAlbumList_FullMethodName   = "/blog.photoRpc/FindPhotoAlbumList"
	PhotoRpc_FindPhotoAlbumCount_FullMethodName  = "/blog.photoRpc/FindPhotoAlbumCount"
)

// PhotoRpcClient is the client API for PhotoRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhotoRpcClient interface {
	// 创建照片
	CreatePhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Photo, error)
	// 更新照片
	UpdatePhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Photo, error)
	// 删除照片
	DeletePhoto(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除照片
	DeletePhotoList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询照片
	FindPhoto(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Photo, error)
	// 查询照片列表
	FindPhotoList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PhotoPageResp, error)
	// 查询照片数量
	FindPhotoCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
	// 创建相册
	CreatePhotoAlbum(ctx context.Context, in *PhotoAlbum, opts ...grpc.CallOption) (*PhotoAlbum, error)
	// 更新相册
	UpdatePhotoAlbum(ctx context.Context, in *PhotoAlbum, opts ...grpc.CallOption) (*PhotoAlbum, error)
	// 删除相册
	DeletePhotoAlbum(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除相册
	DeletePhotoAlbumList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询相册
	FindPhotoAlbum(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*PhotoAlbum, error)
	// 查询相册列表
	FindPhotoAlbumList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PhotoAlbumPageResp, error)
	// 查询相册数量
	FindPhotoAlbumCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
}

type photoRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewPhotoRpcClient(cc grpc.ClientConnInterface) PhotoRpcClient {
	return &photoRpcClient{cc}
}

func (c *photoRpcClient) CreatePhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Photo, error) {
	out := new(Photo)
	err := c.cc.Invoke(ctx, PhotoRpc_CreatePhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) UpdatePhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Photo, error) {
	out := new(Photo)
	err := c.cc.Invoke(ctx, PhotoRpc_UpdatePhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) DeletePhoto(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PhotoRpc_DeletePhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) DeletePhotoList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PhotoRpc_DeletePhotoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) FindPhoto(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Photo, error) {
	out := new(Photo)
	err := c.cc.Invoke(ctx, PhotoRpc_FindPhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) FindPhotoList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PhotoPageResp, error) {
	out := new(PhotoPageResp)
	err := c.cc.Invoke(ctx, PhotoRpc_FindPhotoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) FindPhotoCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, PhotoRpc_FindPhotoCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) CreatePhotoAlbum(ctx context.Context, in *PhotoAlbum, opts ...grpc.CallOption) (*PhotoAlbum, error) {
	out := new(PhotoAlbum)
	err := c.cc.Invoke(ctx, PhotoRpc_CreatePhotoAlbum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) UpdatePhotoAlbum(ctx context.Context, in *PhotoAlbum, opts ...grpc.CallOption) (*PhotoAlbum, error) {
	out := new(PhotoAlbum)
	err := c.cc.Invoke(ctx, PhotoRpc_UpdatePhotoAlbum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) DeletePhotoAlbum(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PhotoRpc_DeletePhotoAlbum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) DeletePhotoAlbumList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PhotoRpc_DeletePhotoAlbumList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) FindPhotoAlbum(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*PhotoAlbum, error) {
	out := new(PhotoAlbum)
	err := c.cc.Invoke(ctx, PhotoRpc_FindPhotoAlbum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) FindPhotoAlbumList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PhotoAlbumPageResp, error) {
	out := new(PhotoAlbumPageResp)
	err := c.cc.Invoke(ctx, PhotoRpc_FindPhotoAlbumList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoRpcClient) FindPhotoAlbumCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, PhotoRpc_FindPhotoAlbumCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhotoRpcServer is the server API for PhotoRpc service.
// All implementations must embed UnimplementedPhotoRpcServer
// for forward compatibility
type PhotoRpcServer interface {
	// 创建照片
	CreatePhoto(context.Context, *Photo) (*Photo, error)
	// 更新照片
	UpdatePhoto(context.Context, *Photo) (*Photo, error)
	// 删除照片
	DeletePhoto(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除照片
	DeletePhotoList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询照片
	FindPhoto(context.Context, *IdReq) (*Photo, error)
	// 查询照片列表
	FindPhotoList(context.Context, *PageQuery) (*PhotoPageResp, error)
	// 查询照片数量
	FindPhotoCount(context.Context, *PageQuery) (*CountResp, error)
	// 创建相册
	CreatePhotoAlbum(context.Context, *PhotoAlbum) (*PhotoAlbum, error)
	// 更新相册
	UpdatePhotoAlbum(context.Context, *PhotoAlbum) (*PhotoAlbum, error)
	// 删除相册
	DeletePhotoAlbum(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除相册
	DeletePhotoAlbumList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询相册
	FindPhotoAlbum(context.Context, *IdReq) (*PhotoAlbum, error)
	// 查询相册列表
	FindPhotoAlbumList(context.Context, *PageQuery) (*PhotoAlbumPageResp, error)
	// 查询相册数量
	FindPhotoAlbumCount(context.Context, *PageQuery) (*CountResp, error)
	mustEmbedUnimplementedPhotoRpcServer()
}

// UnimplementedPhotoRpcServer must be embedded to have forward compatible implementations.
type UnimplementedPhotoRpcServer struct {
}

func (UnimplementedPhotoRpcServer) CreatePhoto(context.Context, *Photo) (*Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhoto not implemented")
}
func (UnimplementedPhotoRpcServer) UpdatePhoto(context.Context, *Photo) (*Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhoto not implemented")
}
func (UnimplementedPhotoRpcServer) DeletePhoto(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhoto not implemented")
}
func (UnimplementedPhotoRpcServer) DeletePhotoList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhotoList not implemented")
}
func (UnimplementedPhotoRpcServer) FindPhoto(context.Context, *IdReq) (*Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPhoto not implemented")
}
func (UnimplementedPhotoRpcServer) FindPhotoList(context.Context, *PageQuery) (*PhotoPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPhotoList not implemented")
}
func (UnimplementedPhotoRpcServer) FindPhotoCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPhotoCount not implemented")
}
func (UnimplementedPhotoRpcServer) CreatePhotoAlbum(context.Context, *PhotoAlbum) (*PhotoAlbum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhotoAlbum not implemented")
}
func (UnimplementedPhotoRpcServer) UpdatePhotoAlbum(context.Context, *PhotoAlbum) (*PhotoAlbum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhotoAlbum not implemented")
}
func (UnimplementedPhotoRpcServer) DeletePhotoAlbum(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhotoAlbum not implemented")
}
func (UnimplementedPhotoRpcServer) DeletePhotoAlbumList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhotoAlbumList not implemented")
}
func (UnimplementedPhotoRpcServer) FindPhotoAlbum(context.Context, *IdReq) (*PhotoAlbum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPhotoAlbum not implemented")
}
func (UnimplementedPhotoRpcServer) FindPhotoAlbumList(context.Context, *PageQuery) (*PhotoAlbumPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPhotoAlbumList not implemented")
}
func (UnimplementedPhotoRpcServer) FindPhotoAlbumCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPhotoAlbumCount not implemented")
}
func (UnimplementedPhotoRpcServer) mustEmbedUnimplementedPhotoRpcServer() {}

// UnsafePhotoRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhotoRpcServer will
// result in compilation errors.
type UnsafePhotoRpcServer interface {
	mustEmbedUnimplementedPhotoRpcServer()
}

func RegisterPhotoRpcServer(s grpc.ServiceRegistrar, srv PhotoRpcServer) {
	s.RegisterService(&PhotoRpc_ServiceDesc, srv)
}

func _PhotoRpc_CreatePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Photo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).CreatePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_CreatePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).CreatePhoto(ctx, req.(*Photo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_UpdatePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Photo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).UpdatePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_UpdatePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).UpdatePhoto(ctx, req.(*Photo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_DeletePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).DeletePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_DeletePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).DeletePhoto(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_DeletePhotoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).DeletePhotoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_DeletePhotoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).DeletePhotoList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_FindPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).FindPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_FindPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).FindPhoto(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_FindPhotoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).FindPhotoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_FindPhotoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).FindPhotoList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_FindPhotoCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).FindPhotoCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_FindPhotoCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).FindPhotoCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_CreatePhotoAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotoAlbum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).CreatePhotoAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_CreatePhotoAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).CreatePhotoAlbum(ctx, req.(*PhotoAlbum))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_UpdatePhotoAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotoAlbum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).UpdatePhotoAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_UpdatePhotoAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).UpdatePhotoAlbum(ctx, req.(*PhotoAlbum))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_DeletePhotoAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).DeletePhotoAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_DeletePhotoAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).DeletePhotoAlbum(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_DeletePhotoAlbumList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).DeletePhotoAlbumList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_DeletePhotoAlbumList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).DeletePhotoAlbumList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_FindPhotoAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).FindPhotoAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_FindPhotoAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).FindPhotoAlbum(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_FindPhotoAlbumList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).FindPhotoAlbumList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_FindPhotoAlbumList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).FindPhotoAlbumList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoRpc_FindPhotoAlbumCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoRpcServer).FindPhotoAlbumCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoRpc_FindPhotoAlbumCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoRpcServer).FindPhotoAlbumCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// PhotoRpc_ServiceDesc is the grpc.ServiceDesc for PhotoRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhotoRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.photoRpc",
	HandlerType: (*PhotoRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePhoto",
			Handler:    _PhotoRpc_CreatePhoto_Handler,
		},
		{
			MethodName: "UpdatePhoto",
			Handler:    _PhotoRpc_UpdatePhoto_Handler,
		},
		{
			MethodName: "DeletePhoto",
			Handler:    _PhotoRpc_DeletePhoto_Handler,
		},
		{
			MethodName: "DeletePhotoList",
			Handler:    _PhotoRpc_DeletePhotoList_Handler,
		},
		{
			MethodName: "FindPhoto",
			Handler:    _PhotoRpc_FindPhoto_Handler,
		},
		{
			MethodName: "FindPhotoList",
			Handler:    _PhotoRpc_FindPhotoList_Handler,
		},
		{
			MethodName: "FindPhotoCount",
			Handler:    _PhotoRpc_FindPhotoCount_Handler,
		},
		{
			MethodName: "CreatePhotoAlbum",
			Handler:    _PhotoRpc_CreatePhotoAlbum_Handler,
		},
		{
			MethodName: "UpdatePhotoAlbum",
			Handler:    _PhotoRpc_UpdatePhotoAlbum_Handler,
		},
		{
			MethodName: "DeletePhotoAlbum",
			Handler:    _PhotoRpc_DeletePhotoAlbum_Handler,
		},
		{
			MethodName: "DeletePhotoAlbumList",
			Handler:    _PhotoRpc_DeletePhotoAlbumList_Handler,
		},
		{
			MethodName: "FindPhotoAlbum",
			Handler:    _PhotoRpc_FindPhotoAlbum_Handler,
		},
		{
			MethodName: "FindPhotoAlbumList",
			Handler:    _PhotoRpc_FindPhotoAlbumList_Handler,
		},
		{
			MethodName: "FindPhotoAlbumCount",
			Handler:    _PhotoRpc_FindPhotoAlbumCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	PageRpc_CreatePage_FullMethodName     = "/blog.pageRpc/CreatePage"
	PageRpc_UpdatePage_FullMethodName     = "/blog.pageRpc/UpdatePage"
	PageRpc_DeletePage_FullMethodName     = "/blog.pageRpc/DeletePage"
	PageRpc_DeletePageList_FullMethodName = "/blog.pageRpc/DeletePageList"
	PageRpc_FindPage_FullMethodName       = "/blog.pageRpc/FindPage"
	PageRpc_FindPageList_FullMethodName   = "/blog.pageRpc/FindPageList"
	PageRpc_FindPageCount_FullMethodName  = "/blog.pageRpc/FindPageCount"
)

// PageRpcClient is the client API for PageRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PageRpcClient interface {
	// 创建页面
	CreatePage(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Page, error)
	// 更新页面
	UpdatePage(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Page, error)
	// 删除页面
	DeletePage(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除页面
	DeletePageList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询页面
	FindPage(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Page, error)
	// 查询页面列表
	FindPageList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PagePageResp, error)
	// 查询页面数量
	FindPageCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
}

type pageRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewPageRpcClient(cc grpc.ClientConnInterface) PageRpcClient {
	return &pageRpcClient{cc}
}

func (c *pageRpcClient) CreatePage(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, PageRpc_CreatePage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageRpcClient) UpdatePage(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, PageRpc_UpdatePage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageRpcClient) DeletePage(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PageRpc_DeletePage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageRpcClient) DeletePageList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PageRpc_DeletePageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageRpcClient) FindPage(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, PageRpc_FindPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageRpcClient) FindPageList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PagePageResp, error) {
	out := new(PagePageResp)
	err := c.cc.Invoke(ctx, PageRpc_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageRpcClient) FindPageCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, PageRpc_FindPageCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PageRpcServer is the server API for PageRpc service.
// All implementations must embed UnimplementedPageRpcServer
// for forward compatibility
type PageRpcServer interface {
	// 创建页面
	CreatePage(context.Context, *Page) (*Page, error)
	// 更新页面
	UpdatePage(context.Context, *Page) (*Page, error)
	// 删除页面
	DeletePage(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除页面
	DeletePageList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询页面
	FindPage(context.Context, *IdReq) (*Page, error)
	// 查询页面列表
	FindPageList(context.Context, *PageQuery) (*PagePageResp, error)
	// 查询页面数量
	FindPageCount(context.Context, *PageQuery) (*CountResp, error)
	mustEmbedUnimplementedPageRpcServer()
}

// UnimplementedPageRpcServer must be embedded to have forward compatible implementations.
type UnimplementedPageRpcServer struct {
}

func (UnimplementedPageRpcServer) CreatePage(context.Context, *Page) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePage not implemented")
}
func (UnimplementedPageRpcServer) UpdatePage(context.Context, *Page) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePage not implemented")
}
func (UnimplementedPageRpcServer) DeletePage(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePage not implemented")
}
func (UnimplementedPageRpcServer) DeletePageList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePageList not implemented")
}
func (UnimplementedPageRpcServer) FindPage(context.Context, *IdReq) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPage not implemented")
}
func (UnimplementedPageRpcServer) FindPageList(context.Context, *PageQuery) (*PagePageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedPageRpcServer) FindPageCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageCount not implemented")
}
func (UnimplementedPageRpcServer) mustEmbedUnimplementedPageRpcServer() {}

// UnsafePageRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PageRpcServer will
// result in compilation errors.
type UnsafePageRpcServer interface {
	mustEmbedUnimplementedPageRpcServer()
}

func RegisterPageRpcServer(s grpc.ServiceRegistrar, srv PageRpcServer) {
	s.RegisterService(&PageRpc_ServiceDesc, srv)
}

func _PageRpc_CreatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageRpcServer).CreatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageRpc_CreatePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageRpcServer).CreatePage(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageRpc_UpdatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageRpcServer).UpdatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageRpc_UpdatePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageRpcServer).UpdatePage(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageRpc_DeletePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageRpcServer).DeletePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageRpc_DeletePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageRpcServer).DeletePage(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageRpc_DeletePageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageRpcServer).DeletePageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageRpc_DeletePageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageRpcServer).DeletePageList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageRpc_FindPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageRpcServer).FindPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageRpc_FindPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageRpcServer).FindPage(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageRpc_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageRpcServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageRpc_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageRpcServer).FindPageList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageRpc_FindPageCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageRpcServer).FindPageCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageRpc_FindPageCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageRpcServer).FindPageCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// PageRpc_ServiceDesc is the grpc.ServiceDesc for PageRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PageRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.pageRpc",
	HandlerType: (*PageRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePage",
			Handler:    _PageRpc_CreatePage_Handler,
		},
		{
			MethodName: "UpdatePage",
			Handler:    _PageRpc_UpdatePage_Handler,
		},
		{
			MethodName: "DeletePage",
			Handler:    _PageRpc_DeletePage_Handler,
		},
		{
			MethodName: "DeletePageList",
			Handler:    _PageRpc_DeletePageList_Handler,
		},
		{
			MethodName: "FindPage",
			Handler:    _PageRpc_FindPage_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _PageRpc_FindPageList_Handler,
		},
		{
			MethodName: "FindPageCount",
			Handler:    _PageRpc_FindPageCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	TalkRpc_CreateTalk_FullMethodName     = "/blog.talkRpc/CreateTalk"
	TalkRpc_UpdateTalk_FullMethodName     = "/blog.talkRpc/UpdateTalk"
	TalkRpc_DeleteTalk_FullMethodName     = "/blog.talkRpc/DeleteTalk"
	TalkRpc_DeleteTalkList_FullMethodName = "/blog.talkRpc/DeleteTalkList"
	TalkRpc_FindTalk_FullMethodName       = "/blog.talkRpc/FindTalk"
	TalkRpc_FindTalkList_FullMethodName   = "/blog.talkRpc/FindTalkList"
	TalkRpc_FindTalkCount_FullMethodName  = "/blog.talkRpc/FindTalkCount"
	TalkRpc_LikeTalk_FullMethodName       = "/blog.talkRpc/LikeTalk"
)

// TalkRpcClient is the client API for TalkRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TalkRpcClient interface {
	// 创建说说
	CreateTalk(ctx context.Context, in *Talk, opts ...grpc.CallOption) (*Talk, error)
	// 更新说说
	UpdateTalk(ctx context.Context, in *Talk, opts ...grpc.CallOption) (*Talk, error)
	// 删除说说
	DeleteTalk(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除说说
	DeleteTalkList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询说说
	FindTalk(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Talk, error)
	// 查询说说列表
	FindTalkList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*TalkPageResp, error)
	// 查询说说数量
	FindTalkCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
	// 点赞说说
	LikeTalk(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error)
}

type talkRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewTalkRpcClient(cc grpc.ClientConnInterface) TalkRpcClient {
	return &talkRpcClient{cc}
}

func (c *talkRpcClient) CreateTalk(ctx context.Context, in *Talk, opts ...grpc.CallOption) (*Talk, error) {
	out := new(Talk)
	err := c.cc.Invoke(ctx, TalkRpc_CreateTalk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkRpcClient) UpdateTalk(ctx context.Context, in *Talk, opts ...grpc.CallOption) (*Talk, error) {
	out := new(Talk)
	err := c.cc.Invoke(ctx, TalkRpc_UpdateTalk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkRpcClient) DeleteTalk(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, TalkRpc_DeleteTalk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkRpcClient) DeleteTalkList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, TalkRpc_DeleteTalkList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkRpcClient) FindTalk(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Talk, error) {
	out := new(Talk)
	err := c.cc.Invoke(ctx, TalkRpc_FindTalk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkRpcClient) FindTalkList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*TalkPageResp, error) {
	out := new(TalkPageResp)
	err := c.cc.Invoke(ctx, TalkRpc_FindTalkList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkRpcClient) FindTalkCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, TalkRpc_FindTalkCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkRpcClient) LikeTalk(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, TalkRpc_LikeTalk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TalkRpcServer is the server API for TalkRpc service.
// All implementations must embed UnimplementedTalkRpcServer
// for forward compatibility
type TalkRpcServer interface {
	// 创建说说
	CreateTalk(context.Context, *Talk) (*Talk, error)
	// 更新说说
	UpdateTalk(context.Context, *Talk) (*Talk, error)
	// 删除说说
	DeleteTalk(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除说说
	DeleteTalkList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询说说
	FindTalk(context.Context, *IdReq) (*Talk, error)
	// 查询说说列表
	FindTalkList(context.Context, *PageQuery) (*TalkPageResp, error)
	// 查询说说数量
	FindTalkCount(context.Context, *PageQuery) (*CountResp, error)
	// 点赞说说
	LikeTalk(context.Context, *IdReq) (*EmptyResp, error)
	mustEmbedUnimplementedTalkRpcServer()
}

// UnimplementedTalkRpcServer must be embedded to have forward compatible implementations.
type UnimplementedTalkRpcServer struct {
}

func (UnimplementedTalkRpcServer) CreateTalk(context.Context, *Talk) (*Talk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTalk not implemented")
}
func (UnimplementedTalkRpcServer) UpdateTalk(context.Context, *Talk) (*Talk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTalk not implemented")
}
func (UnimplementedTalkRpcServer) DeleteTalk(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTalk not implemented")
}
func (UnimplementedTalkRpcServer) DeleteTalkList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTalkList not implemented")
}
func (UnimplementedTalkRpcServer) FindTalk(context.Context, *IdReq) (*Talk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTalk not implemented")
}
func (UnimplementedTalkRpcServer) FindTalkList(context.Context, *PageQuery) (*TalkPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTalkList not implemented")
}
func (UnimplementedTalkRpcServer) FindTalkCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTalkCount not implemented")
}
func (UnimplementedTalkRpcServer) LikeTalk(context.Context, *IdReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeTalk not implemented")
}
func (UnimplementedTalkRpcServer) mustEmbedUnimplementedTalkRpcServer() {}

// UnsafeTalkRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TalkRpcServer will
// result in compilation errors.
type UnsafeTalkRpcServer interface {
	mustEmbedUnimplementedTalkRpcServer()
}

func RegisterTalkRpcServer(s grpc.ServiceRegistrar, srv TalkRpcServer) {
	s.RegisterService(&TalkRpc_ServiceDesc, srv)
}

func _TalkRpc_CreateTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Talk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRpcServer).CreateTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRpc_CreateTalk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRpcServer).CreateTalk(ctx, req.(*Talk))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkRpc_UpdateTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Talk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRpcServer).UpdateTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRpc_UpdateTalk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRpcServer).UpdateTalk(ctx, req.(*Talk))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkRpc_DeleteTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRpcServer).DeleteTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRpc_DeleteTalk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRpcServer).DeleteTalk(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkRpc_DeleteTalkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRpcServer).DeleteTalkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRpc_DeleteTalkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRpcServer).DeleteTalkList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkRpc_FindTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRpcServer).FindTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRpc_FindTalk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRpcServer).FindTalk(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkRpc_FindTalkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRpcServer).FindTalkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRpc_FindTalkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRpcServer).FindTalkList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkRpc_FindTalkCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRpcServer).FindTalkCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRpc_FindTalkCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRpcServer).FindTalkCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkRpc_LikeTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRpcServer).LikeTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRpc_LikeTalk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRpcServer).LikeTalk(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TalkRpc_ServiceDesc is the grpc.ServiceDesc for TalkRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TalkRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.talkRpc",
	HandlerType: (*TalkRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTalk",
			Handler:    _TalkRpc_CreateTalk_Handler,
		},
		{
			MethodName: "UpdateTalk",
			Handler:    _TalkRpc_UpdateTalk_Handler,
		},
		{
			MethodName: "DeleteTalk",
			Handler:    _TalkRpc_DeleteTalk_Handler,
		},
		{
			MethodName: "DeleteTalkList",
			Handler:    _TalkRpc_DeleteTalkList_Handler,
		},
		{
			MethodName: "FindTalk",
			Handler:    _TalkRpc_FindTalk_Handler,
		},
		{
			MethodName: "FindTalkList",
			Handler:    _TalkRpc_FindTalkList_Handler,
		},
		{
			MethodName: "FindTalkCount",
			Handler:    _TalkRpc_FindTalkCount_Handler,
		},
		{
			MethodName: "LikeTalk",
			Handler:    _TalkRpc_LikeTalk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	LogRpc_CreateOperationLog_FullMethodName     = "/blog.logRpc/CreateOperationLog"
	LogRpc_UpdateOperationLog_FullMethodName     = "/blog.logRpc/UpdateOperationLog"
	LogRpc_DeleteOperationLog_FullMethodName     = "/blog.logRpc/DeleteOperationLog"
	LogRpc_DeleteOperationLogList_FullMethodName = "/blog.logRpc/DeleteOperationLogList"
	LogRpc_FindOperationLog_FullMethodName       = "/blog.logRpc/FindOperationLog"
	LogRpc_FindOperationLogList_FullMethodName   = "/blog.logRpc/FindOperationLogList"
	LogRpc_FindOperationLogCount_FullMethodName  = "/blog.logRpc/FindOperationLogCount"
)

// LogRpcClient is the client API for LogRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogRpcClient interface {
	// 创建操作记录
	CreateOperationLog(ctx context.Context, in *OperationLog, opts ...grpc.CallOption) (*OperationLog, error)
	// 更新操作记录
	UpdateOperationLog(ctx context.Context, in *OperationLog, opts ...grpc.CallOption) (*OperationLog, error)
	// 删除操作记录
	DeleteOperationLog(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除操作记录
	DeleteOperationLogList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询操作记录
	FindOperationLog(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*OperationLog, error)
	// 查询操作记录列表
	FindOperationLogList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*OperationLogPageResp, error)
	// 查询操作记录数量
	FindOperationLogCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
}

type logRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewLogRpcClient(cc grpc.ClientConnInterface) LogRpcClient {
	return &logRpcClient{cc}
}

func (c *logRpcClient) CreateOperationLog(ctx context.Context, in *OperationLog, opts ...grpc.CallOption) (*OperationLog, error) {
	out := new(OperationLog)
	err := c.cc.Invoke(ctx, LogRpc_CreateOperationLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logRpcClient) UpdateOperationLog(ctx context.Context, in *OperationLog, opts ...grpc.CallOption) (*OperationLog, error) {
	out := new(OperationLog)
	err := c.cc.Invoke(ctx, LogRpc_UpdateOperationLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logRpcClient) DeleteOperationLog(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, LogRpc_DeleteOperationLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logRpcClient) DeleteOperationLogList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, LogRpc_DeleteOperationLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logRpcClient) FindOperationLog(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*OperationLog, error) {
	out := new(OperationLog)
	err := c.cc.Invoke(ctx, LogRpc_FindOperationLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logRpcClient) FindOperationLogList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*OperationLogPageResp, error) {
	out := new(OperationLogPageResp)
	err := c.cc.Invoke(ctx, LogRpc_FindOperationLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logRpcClient) FindOperationLogCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, LogRpc_FindOperationLogCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogRpcServer is the server API for LogRpc service.
// All implementations must embed UnimplementedLogRpcServer
// for forward compatibility
type LogRpcServer interface {
	// 创建操作记录
	CreateOperationLog(context.Context, *OperationLog) (*OperationLog, error)
	// 更新操作记录
	UpdateOperationLog(context.Context, *OperationLog) (*OperationLog, error)
	// 删除操作记录
	DeleteOperationLog(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除操作记录
	DeleteOperationLogList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询操作记录
	FindOperationLog(context.Context, *IdReq) (*OperationLog, error)
	// 查询操作记录列表
	FindOperationLogList(context.Context, *PageQuery) (*OperationLogPageResp, error)
	// 查询操作记录数量
	FindOperationLogCount(context.Context, *PageQuery) (*CountResp, error)
	mustEmbedUnimplementedLogRpcServer()
}

// UnimplementedLogRpcServer must be embedded to have forward compatible implementations.
type UnimplementedLogRpcServer struct {
}

func (UnimplementedLogRpcServer) CreateOperationLog(context.Context, *OperationLog) (*OperationLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOperationLog not implemented")
}
func (UnimplementedLogRpcServer) UpdateOperationLog(context.Context, *OperationLog) (*OperationLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOperationLog not implemented")
}
func (UnimplementedLogRpcServer) DeleteOperationLog(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOperationLog not implemented")
}
func (UnimplementedLogRpcServer) DeleteOperationLogList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOperationLogList not implemented")
}
func (UnimplementedLogRpcServer) FindOperationLog(context.Context, *IdReq) (*OperationLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOperationLog not implemented")
}
func (UnimplementedLogRpcServer) FindOperationLogList(context.Context, *PageQuery) (*OperationLogPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOperationLogList not implemented")
}
func (UnimplementedLogRpcServer) FindOperationLogCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOperationLogCount not implemented")
}
func (UnimplementedLogRpcServer) mustEmbedUnimplementedLogRpcServer() {}

// UnsafeLogRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogRpcServer will
// result in compilation errors.
type UnsafeLogRpcServer interface {
	mustEmbedUnimplementedLogRpcServer()
}

func RegisterLogRpcServer(s grpc.ServiceRegistrar, srv LogRpcServer) {
	s.RegisterService(&LogRpc_ServiceDesc, srv)
}

func _LogRpc_CreateOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRpcServer).CreateOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogRpc_CreateOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRpcServer).CreateOperationLog(ctx, req.(*OperationLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogRpc_UpdateOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRpcServer).UpdateOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogRpc_UpdateOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRpcServer).UpdateOperationLog(ctx, req.(*OperationLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogRpc_DeleteOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRpcServer).DeleteOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogRpc_DeleteOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRpcServer).DeleteOperationLog(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogRpc_DeleteOperationLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRpcServer).DeleteOperationLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogRpc_DeleteOperationLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRpcServer).DeleteOperationLogList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogRpc_FindOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRpcServer).FindOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogRpc_FindOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRpcServer).FindOperationLog(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogRpc_FindOperationLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRpcServer).FindOperationLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogRpc_FindOperationLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRpcServer).FindOperationLogList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogRpc_FindOperationLogCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRpcServer).FindOperationLogCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogRpc_FindOperationLogCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRpcServer).FindOperationLogCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// LogRpc_ServiceDesc is the grpc.ServiceDesc for LogRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.logRpc",
	HandlerType: (*LogRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOperationLog",
			Handler:    _LogRpc_CreateOperationLog_Handler,
		},
		{
			MethodName: "UpdateOperationLog",
			Handler:    _LogRpc_UpdateOperationLog_Handler,
		},
		{
			MethodName: "DeleteOperationLog",
			Handler:    _LogRpc_DeleteOperationLog_Handler,
		},
		{
			MethodName: "DeleteOperationLogList",
			Handler:    _LogRpc_DeleteOperationLogList_Handler,
		},
		{
			MethodName: "FindOperationLog",
			Handler:    _LogRpc_FindOperationLog_Handler,
		},
		{
			MethodName: "FindOperationLogList",
			Handler:    _LogRpc_FindOperationLogList_Handler,
		},
		{
			MethodName: "FindOperationLogCount",
			Handler:    _LogRpc_FindOperationLogCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	ChatRpc_CreateChatRecord_FullMethodName     = "/blog.chatRpc/CreateChatRecord"
	ChatRpc_UpdateChatRecord_FullMethodName     = "/blog.chatRpc/UpdateChatRecord"
	ChatRpc_DeleteChatRecord_FullMethodName     = "/blog.chatRpc/DeleteChatRecord"
	ChatRpc_DeleteChatRecordList_FullMethodName = "/blog.chatRpc/DeleteChatRecordList"
	ChatRpc_FindChatRecord_FullMethodName       = "/blog.chatRpc/FindChatRecord"
	ChatRpc_FindChatRecordList_FullMethodName   = "/blog.chatRpc/FindChatRecordList"
	ChatRpc_FindChatRecordCount_FullMethodName  = "/blog.chatRpc/FindChatRecordCount"
)

// ChatRpcClient is the client API for ChatRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatRpcClient interface {
	// 创建聊天记录
	CreateChatRecord(ctx context.Context, in *ChatRecord, opts ...grpc.CallOption) (*ChatRecord, error)
	// 更新聊天记录
	UpdateChatRecord(ctx context.Context, in *ChatRecord, opts ...grpc.CallOption) (*ChatRecord, error)
	// 删除聊天记录
	DeleteChatRecord(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 批量删除聊天记录
	DeleteChatRecordList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询聊天记录
	FindChatRecord(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ChatRecord, error)
	// 查询聊天记录列表
	FindChatRecordList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*ChatRecordPageResp, error)
	// 查询聊天记录数量
	FindChatRecordCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error)
}

type chatRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewChatRpcClient(cc grpc.ClientConnInterface) ChatRpcClient {
	return &chatRpcClient{cc}
}

func (c *chatRpcClient) CreateChatRecord(ctx context.Context, in *ChatRecord, opts ...grpc.CallOption) (*ChatRecord, error) {
	out := new(ChatRecord)
	err := c.cc.Invoke(ctx, ChatRpc_CreateChatRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) UpdateChatRecord(ctx context.Context, in *ChatRecord, opts ...grpc.CallOption) (*ChatRecord, error) {
	out := new(ChatRecord)
	err := c.cc.Invoke(ctx, ChatRpc_UpdateChatRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) DeleteChatRecord(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ChatRpc_DeleteChatRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) DeleteChatRecordList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ChatRpc_DeleteChatRecordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) FindChatRecord(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ChatRecord, error) {
	out := new(ChatRecord)
	err := c.cc.Invoke(ctx, ChatRpc_FindChatRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) FindChatRecordList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*ChatRecordPageResp, error) {
	out := new(ChatRecordPageResp)
	err := c.cc.Invoke(ctx, ChatRpc_FindChatRecordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) FindChatRecordCount(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, ChatRpc_FindChatRecordCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatRpcServer is the server API for ChatRpc service.
// All implementations must embed UnimplementedChatRpcServer
// for forward compatibility
type ChatRpcServer interface {
	// 创建聊天记录
	CreateChatRecord(context.Context, *ChatRecord) (*ChatRecord, error)
	// 更新聊天记录
	UpdateChatRecord(context.Context, *ChatRecord) (*ChatRecord, error)
	// 删除聊天记录
	DeleteChatRecord(context.Context, *IdReq) (*BatchResp, error)
	// 批量删除聊天记录
	DeleteChatRecordList(context.Context, *IdsReq) (*BatchResp, error)
	// 查询聊天记录
	FindChatRecord(context.Context, *IdReq) (*ChatRecord, error)
	// 查询聊天记录列表
	FindChatRecordList(context.Context, *PageQuery) (*ChatRecordPageResp, error)
	// 查询聊天记录数量
	FindChatRecordCount(context.Context, *PageQuery) (*CountResp, error)
	mustEmbedUnimplementedChatRpcServer()
}

// UnimplementedChatRpcServer must be embedded to have forward compatible implementations.
type UnimplementedChatRpcServer struct {
}

func (UnimplementedChatRpcServer) CreateChatRecord(context.Context, *ChatRecord) (*ChatRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatRecord not implemented")
}
func (UnimplementedChatRpcServer) UpdateChatRecord(context.Context, *ChatRecord) (*ChatRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatRecord not implemented")
}
func (UnimplementedChatRpcServer) DeleteChatRecord(context.Context, *IdReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatRecord not implemented")
}
func (UnimplementedChatRpcServer) DeleteChatRecordList(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatRecordList not implemented")
}
func (UnimplementedChatRpcServer) FindChatRecord(context.Context, *IdReq) (*ChatRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindChatRecord not implemented")
}
func (UnimplementedChatRpcServer) FindChatRecordList(context.Context, *PageQuery) (*ChatRecordPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindChatRecordList not implemented")
}
func (UnimplementedChatRpcServer) FindChatRecordCount(context.Context, *PageQuery) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindChatRecordCount not implemented")
}
func (UnimplementedChatRpcServer) mustEmbedUnimplementedChatRpcServer() {}

// UnsafeChatRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatRpcServer will
// result in compilation errors.
type UnsafeChatRpcServer interface {
	mustEmbedUnimplementedChatRpcServer()
}

func RegisterChatRpcServer(s grpc.ServiceRegistrar, srv ChatRpcServer) {
	s.RegisterService(&ChatRpc_ServiceDesc, srv)
}

func _ChatRpc_CreateChatRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).CreateChatRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_CreateChatRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).CreateChatRecord(ctx, req.(*ChatRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_UpdateChatRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).UpdateChatRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_UpdateChatRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).UpdateChatRecord(ctx, req.(*ChatRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_DeleteChatRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).DeleteChatRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_DeleteChatRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).DeleteChatRecord(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_DeleteChatRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).DeleteChatRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_DeleteChatRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).DeleteChatRecordList(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_FindChatRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).FindChatRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_FindChatRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).FindChatRecord(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_FindChatRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).FindChatRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_FindChatRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).FindChatRecordList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_FindChatRecordCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).FindChatRecordCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_FindChatRecordCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).FindChatRecordCount(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatRpc_ServiceDesc is the grpc.ServiceDesc for ChatRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.chatRpc",
	HandlerType: (*ChatRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChatRecord",
			Handler:    _ChatRpc_CreateChatRecord_Handler,
		},
		{
			MethodName: "UpdateChatRecord",
			Handler:    _ChatRpc_UpdateChatRecord_Handler,
		},
		{
			MethodName: "DeleteChatRecord",
			Handler:    _ChatRpc_DeleteChatRecord_Handler,
		},
		{
			MethodName: "DeleteChatRecordList",
			Handler:    _ChatRpc_DeleteChatRecordList_Handler,
		},
		{
			MethodName: "FindChatRecord",
			Handler:    _ChatRpc_FindChatRecord_Handler,
		},
		{
			MethodName: "FindChatRecordList",
			Handler:    _ChatRpc_FindChatRecordList_Handler,
		},
		{
			MethodName: "FindChatRecordCount",
			Handler:    _ChatRpc_FindChatRecordCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

const (
	UploadRpc_UploadFile_FullMethodName  = "/blog.uploadRpc/UploadFile"
	UploadRpc_UploadVoice_FullMethodName = "/blog.uploadRpc/UploadVoice"
)

// UploadRpcClient is the client API for UploadRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadRpcClient interface {
	// 上传文件
	UploadFile(ctx context.Context, in *UploadRecordReq, opts ...grpc.CallOption) (*UploadRecordResp, error)
	// 上传语言
	UploadVoice(ctx context.Context, in *UploadRecordReq, opts ...grpc.CallOption) (*UploadRecordResp, error)
}

type uploadRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadRpcClient(cc grpc.ClientConnInterface) UploadRpcClient {
	return &uploadRpcClient{cc}
}

func (c *uploadRpcClient) UploadFile(ctx context.Context, in *UploadRecordReq, opts ...grpc.CallOption) (*UploadRecordResp, error) {
	out := new(UploadRecordResp)
	err := c.cc.Invoke(ctx, UploadRpc_UploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadRpcClient) UploadVoice(ctx context.Context, in *UploadRecordReq, opts ...grpc.CallOption) (*UploadRecordResp, error) {
	out := new(UploadRecordResp)
	err := c.cc.Invoke(ctx, UploadRpc_UploadVoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadRpcServer is the server API for UploadRpc service.
// All implementations must embed UnimplementedUploadRpcServer
// for forward compatibility
type UploadRpcServer interface {
	// 上传文件
	UploadFile(context.Context, *UploadRecordReq) (*UploadRecordResp, error)
	// 上传语言
	UploadVoice(context.Context, *UploadRecordReq) (*UploadRecordResp, error)
	mustEmbedUnimplementedUploadRpcServer()
}

// UnimplementedUploadRpcServer must be embedded to have forward compatible implementations.
type UnimplementedUploadRpcServer struct {
}

func (UnimplementedUploadRpcServer) UploadFile(context.Context, *UploadRecordReq) (*UploadRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedUploadRpcServer) UploadVoice(context.Context, *UploadRecordReq) (*UploadRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadVoice not implemented")
}
func (UnimplementedUploadRpcServer) mustEmbedUnimplementedUploadRpcServer() {}

// UnsafeUploadRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadRpcServer will
// result in compilation errors.
type UnsafeUploadRpcServer interface {
	mustEmbedUnimplementedUploadRpcServer()
}

func RegisterUploadRpcServer(s grpc.ServiceRegistrar, srv UploadRpcServer) {
	s.RegisterService(&UploadRpc_ServiceDesc, srv)
}

func _UploadRpc_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadRpcServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadRpc_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadRpcServer).UploadFile(ctx, req.(*UploadRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadRpc_UploadVoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadRpcServer).UploadVoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadRpc_UploadVoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadRpcServer).UploadVoice(ctx, req.(*UploadRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UploadRpc_ServiceDesc is the grpc.ServiceDesc for UploadRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.uploadRpc",
	HandlerType: (*UploadRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _UploadRpc_UploadFile_Handler,
		},
		{
			MethodName: "UploadVoice",
			Handler:    _UploadRpc_UploadVoice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}
