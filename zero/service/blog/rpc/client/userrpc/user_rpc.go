// Code generated by goctl. DO NOT EDIT.
// Source: blog.proto

package userrpc

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/zero/service/blog/rpc/pb/blog"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Api                  = blog.Api
	ApiDetails           = blog.ApiDetails
	ApiPageResp          = blog.ApiPageResp
	Article              = blog.Article
	BatchResp            = blog.BatchResp
	Config               = blog.Config
	EmptyReq             = blog.EmptyReq
	EmptyResp            = blog.EmptyResp
	IdReq                = blog.IdReq
	IdsReq               = blog.IdsReq
	LoginHistory         = blog.LoginHistory
	LoginHistoryPageResp = blog.LoginHistoryPageResp
	LoginReq             = blog.LoginReq
	LoginResp            = blog.LoginResp
	Menu                 = blog.Menu
	MenuDetails          = blog.MenuDetails
	MenuPageResp         = blog.MenuPageResp
	OauthLoginReq        = blog.OauthLoginReq
	OauthLoginUrlResp    = blog.OauthLoginUrlResp
	PageCondition        = blog.PageCondition
	PageLimit            = blog.PageLimit
	PageQuery            = blog.PageQuery
	PageResp             = blog.PageResp
	PageSort             = blog.PageSort
	PageUserInfoResp     = blog.PageUserInfoResp
	ResetPasswordReq     = blog.ResetPasswordReq
	Role                 = blog.Role
	RoleDetails          = blog.RoleDetails
	RoleLabel            = blog.RoleLabel
	RolePageResp         = blog.RolePageResp
	RoleResourcesResp    = blog.RoleResourcesResp
	SyncMenuRequest      = blog.SyncMenuRequest
	UpdateRoleApisReq    = blog.UpdateRoleApisReq
	UpdateRoleMenusReq   = blog.UpdateRoleMenusReq
	UpdateUserAvatarReq  = blog.UpdateUserAvatarReq
	UpdateUserInfoReq    = blog.UpdateUserInfoReq
	UpdateUserRoleReq    = blog.UpdateUserRoleReq
	UpdateUserStatusReq  = blog.UpdateUserStatusReq
	User                 = blog.User
	UserEmailReq         = blog.UserEmailReq
	UserInfoResp         = blog.UserInfoResp

	UserRpc interface {
		// 查询用户登录历史
		FindUserLoginHistoryList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*LoginHistoryPageResp, error)
		// 批量删除登录历史
		DeleteUserLoginHistoryList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
		// 获取用户接口权限
		GetUserApis(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*ApiPageResp, error)
		// 获取用户菜单权限
		GetUserMenus(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*MenuPageResp, error)
		// 获取用户角色信息
		GetUserRoles(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RolePageResp, error)
		// 获取用户信息
		GetUserInfo(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		// 修改用户信息
		UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		// 修改用户头像
		UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		// 修改用户状态
		UpdateUserStatus(ctx context.Context, in *UpdateUserStatusReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 修改用户角色
		UpdateUserRole(ctx context.Context, in *UpdateUserRoleReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 查找用户列表
		FindUserList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageUserInfoResp, error)
	}

	defaultUserRpc struct {
		cli zrpc.Client
	}
)

func NewUserRpc(cli zrpc.Client) UserRpc {
	return &defaultUserRpc{
		cli: cli,
	}
}

// 查询用户登录历史
func (m *defaultUserRpc) FindUserLoginHistoryList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*LoginHistoryPageResp, error) {
	client := blog.NewUserRpcClient(m.cli.Conn())
	return client.FindUserLoginHistoryList(ctx, in, opts...)
}

// 批量删除登录历史
func (m *defaultUserRpc) DeleteUserLoginHistoryList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := blog.NewUserRpcClient(m.cli.Conn())
	return client.DeleteUserLoginHistoryList(ctx, in, opts...)
}

// 获取用户接口权限
func (m *defaultUserRpc) GetUserApis(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*ApiPageResp, error) {
	client := blog.NewUserRpcClient(m.cli.Conn())
	return client.GetUserApis(ctx, in, opts...)
}

// 获取用户菜单权限
func (m *defaultUserRpc) GetUserMenus(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*MenuPageResp, error) {
	client := blog.NewUserRpcClient(m.cli.Conn())
	return client.GetUserMenus(ctx, in, opts...)
}

// 获取用户角色信息
func (m *defaultUserRpc) GetUserRoles(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*RolePageResp, error) {
	client := blog.NewUserRpcClient(m.cli.Conn())
	return client.GetUserRoles(ctx, in, opts...)
}

// 获取用户信息
func (m *defaultUserRpc) GetUserInfo(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := blog.NewUserRpcClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

// 修改用户信息
func (m *defaultUserRpc) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := blog.NewUserRpcClient(m.cli.Conn())
	return client.UpdateUserInfo(ctx, in, opts...)
}

// 修改用户头像
func (m *defaultUserRpc) UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := blog.NewUserRpcClient(m.cli.Conn())
	return client.UpdateUserAvatar(ctx, in, opts...)
}

// 修改用户状态
func (m *defaultUserRpc) UpdateUserStatus(ctx context.Context, in *UpdateUserStatusReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := blog.NewUserRpcClient(m.cli.Conn())
	return client.UpdateUserStatus(ctx, in, opts...)
}

// 修改用户角色
func (m *defaultUserRpc) UpdateUserRole(ctx context.Context, in *UpdateUserRoleReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := blog.NewUserRpcClient(m.cli.Conn())
	return client.UpdateUserRole(ctx, in, opts...)
}

// 查找用户列表
func (m *defaultUserRpc) FindUserList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageUserInfoResp, error) {
	client := blog.NewUserRpcClient(m.cli.Conn())
	return client.FindUserList(ctx, in, opts...)
}
