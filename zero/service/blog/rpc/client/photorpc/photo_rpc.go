// Code generated by goctl. DO NOT EDIT.
// Source: blog.proto

package photorpc

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/zero/service/blog/rpc/pb/blog"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Api                    = blog.Api
	ApiDetails             = blog.ApiDetails
	ApiPageResp            = blog.ApiPageResp
	Article                = blog.Article
	ArticlePageResp        = blog.ArticlePageResp
	BatchResp              = blog.BatchResp
	Category               = blog.Category
	CategoryPageResp       = blog.CategoryPageResp
	ChatRecord             = blog.ChatRecord
	ChatRecordPageResp     = blog.ChatRecordPageResp
	Comment                = blog.Comment
	CommentDetails         = blog.CommentDetails
	CommentDetailsPageResp = blog.CommentDetailsPageResp
	CommentPageResp        = blog.CommentPageResp
	CommentReply           = blog.CommentReply
	CountResp              = blog.CountResp
	EmptyReq               = blog.EmptyReq
	EmptyResp              = blog.EmptyResp
	FindCategoryByNameReq  = blog.FindCategoryByNameReq
	FindConfigReq          = blog.FindConfigReq
	FindConfigResp         = blog.FindConfigResp
	FindTagArticleCountReq = blog.FindTagArticleCountReq
	FindTagByNameReq       = blog.FindTagByNameReq
	FriendLink             = blog.FriendLink
	FriendLinkPageResp     = blog.FriendLinkPageResp
	IdReq                  = blog.IdReq
	IdsReq                 = blog.IdsReq
	LoginHistory           = blog.LoginHistory
	LoginHistoryPageResp   = blog.LoginHistoryPageResp
	LoginReq               = blog.LoginReq
	LoginResp              = blog.LoginResp
	Menu                   = blog.Menu
	MenuDetails            = blog.MenuDetails
	MenuPageResp           = blog.MenuPageResp
	OauthLoginReq          = blog.OauthLoginReq
	OauthLoginUrlResp      = blog.OauthLoginUrlResp
	OperationLog           = blog.OperationLog
	OperationLogPageResp   = blog.OperationLogPageResp
	PageCondition          = blog.PageCondition
	PageLimit              = blog.PageLimit
	PageQuery              = blog.PageQuery
	PageResp               = blog.PageResp
	PageSort               = blog.PageSort
	Photo                  = blog.Photo
	PhotoAlbum             = blog.PhotoAlbum
	PhotoPageResp          = blog.PhotoPageResp
	Remark                 = blog.Remark
	RemarkPageResp         = blog.RemarkPageResp
	ResetPasswordReq       = blog.ResetPasswordReq
	Role                   = blog.Role
	RoleDetails            = blog.RoleDetails
	RoleLabel              = blog.RoleLabel
	RolePageResp           = blog.RolePageResp
	RoleResourcesResp      = blog.RoleResourcesResp
	SaveConfigReq          = blog.SaveConfigReq
	SyncMenuRequest        = blog.SyncMenuRequest
	Tag                    = blog.Tag
	TagPageResp            = blog.TagPageResp
	Talk                   = blog.Talk
	TalkDetailsDTO         = blog.TalkDetailsDTO
	TalkPageResp           = blog.TalkPageResp
	UpdateRoleApisReq      = blog.UpdateRoleApisReq
	UpdateRoleMenusReq     = blog.UpdateRoleMenusReq
	UpdateUserAvatarReq    = blog.UpdateUserAvatarReq
	UpdateUserInfoReq      = blog.UpdateUserInfoReq
	UpdateUserRoleReq      = blog.UpdateUserRoleReq
	UpdateUserStatusReq    = blog.UpdateUserStatusReq
	User                   = blog.User
	UserEmailReq           = blog.UserEmailReq
	UserInfoPageResp       = blog.UserInfoPageResp
	UserInfoResp           = blog.UserInfoResp
	UserReq                = blog.UserReq

	PhotoRpc interface {
		// 创建照片
		CreatePhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Photo, error)
		// 更新照片
		UpdatePhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Photo, error)
		// 删除照片
		DeletePhoto(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
		// 批量删除照片
		DeletePhotoList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
		// 查询照片
		FindPhoto(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Photo, error)
		// 分页获取照片列表
		FindPhotoList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PhotoPageResp, error)
	}

	defaultPhotoRpc struct {
		cli zrpc.Client
	}
)

func NewPhotoRpc(cli zrpc.Client) PhotoRpc {
	return &defaultPhotoRpc{
		cli: cli,
	}
}

// 创建照片
func (m *defaultPhotoRpc) CreatePhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Photo, error) {
	client := blog.NewPhotoRpcClient(m.cli.Conn())
	return client.CreatePhoto(ctx, in, opts...)
}

// 更新照片
func (m *defaultPhotoRpc) UpdatePhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Photo, error) {
	client := blog.NewPhotoRpcClient(m.cli.Conn())
	return client.UpdatePhoto(ctx, in, opts...)
}

// 删除照片
func (m *defaultPhotoRpc) DeletePhoto(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := blog.NewPhotoRpcClient(m.cli.Conn())
	return client.DeletePhoto(ctx, in, opts...)
}

// 批量删除照片
func (m *defaultPhotoRpc) DeletePhotoList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := blog.NewPhotoRpcClient(m.cli.Conn())
	return client.DeletePhotoList(ctx, in, opts...)
}

// 查询照片
func (m *defaultPhotoRpc) FindPhoto(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Photo, error) {
	client := blog.NewPhotoRpcClient(m.cli.Conn())
	return client.FindPhoto(ctx, in, opts...)
}

// 分页获取照片列表
func (m *defaultPhotoRpc) FindPhotoList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PhotoPageResp, error) {
	client := blog.NewPhotoRpcClient(m.cli.Conn())
	return client.FindPhotoList(ctx, in, opts...)
}
