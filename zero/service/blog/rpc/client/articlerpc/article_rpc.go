// Code generated by goctl. DO NOT EDIT.
// Source: blog.proto

package articlerpc

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/zero/service/blog/rpc/pb/blog"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Api                  = blog.Api
	ApiDetails           = blog.ApiDetails
	ApiPageResp          = blog.ApiPageResp
	Article              = blog.Article
	BatchResp            = blog.BatchResp
	EmptyReq             = blog.EmptyReq
	EmptyResp            = blog.EmptyResp
	FindConfigReq        = blog.FindConfigReq
	FindConfigResp       = blog.FindConfigResp
	IdReq                = blog.IdReq
	IdsReq               = blog.IdsReq
	LoginHistory         = blog.LoginHistory
	LoginHistoryPageResp = blog.LoginHistoryPageResp
	LoginReq             = blog.LoginReq
	LoginResp            = blog.LoginResp
	Menu                 = blog.Menu
	MenuDetails          = blog.MenuDetails
	MenuPageResp         = blog.MenuPageResp
	OauthLoginReq        = blog.OauthLoginReq
	OauthLoginUrlResp    = blog.OauthLoginUrlResp
	PageCondition        = blog.PageCondition
	PageLimit            = blog.PageLimit
	PageQuery            = blog.PageQuery
	PageResp             = blog.PageResp
	PageSort             = blog.PageSort
	PageUserInfoResp     = blog.PageUserInfoResp
	ResetPasswordReq     = blog.ResetPasswordReq
	Role                 = blog.Role
	RoleDetails          = blog.RoleDetails
	RoleLabel            = blog.RoleLabel
	RolePageResp         = blog.RolePageResp
	RoleResourcesResp    = blog.RoleResourcesResp
	SaveConfigReq        = blog.SaveConfigReq
	SyncMenuRequest      = blog.SyncMenuRequest
	UpdateRoleApisReq    = blog.UpdateRoleApisReq
	UpdateRoleMenusReq   = blog.UpdateRoleMenusReq
	UpdateUserAvatarReq  = blog.UpdateUserAvatarReq
	UpdateUserInfoReq    = blog.UpdateUserInfoReq
	UpdateUserRoleReq    = blog.UpdateUserRoleReq
	UpdateUserStatusReq  = blog.UpdateUserStatusReq
	User                 = blog.User
	UserEmailReq         = blog.UserEmailReq
	UserInfoResp         = blog.UserInfoResp

	ArticleRpc interface {
		CreateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error)
		UpdateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error)
		DeleteArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error)
		FindArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Article, error)
		DeleteArticleList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
		FindArticleList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageResp, error)
	}

	defaultArticleRpc struct {
		cli zrpc.Client
	}
)

func NewArticleRpc(cli zrpc.Client) ArticleRpc {
	return &defaultArticleRpc{
		cli: cli,
	}
}

func (m *defaultArticleRpc) CreateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.CreateArticle(ctx, in, opts...)
}

func (m *defaultArticleRpc) UpdateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.UpdateArticle(ctx, in, opts...)
}

func (m *defaultArticleRpc) DeleteArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.DeleteArticle(ctx, in, opts...)
}

func (m *defaultArticleRpc) FindArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Article, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.FindArticle(ctx, in, opts...)
}

func (m *defaultArticleRpc) DeleteArticleList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.DeleteArticleList(ctx, in, opts...)
}

func (m *defaultArticleRpc) FindArticleList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageResp, error) {
	client := blog.NewArticleRpcClient(m.cli.Conn())
	return client.FindArticleList(ctx, in, opts...)
}
