// Code generated by goctl. DO NOT EDIT.
// Source: blog.proto

package server

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/zero/service/blog/rpc/internal/logic/rolerpc"
	"github.com/ve-weiyi/ve-blog-golang/zero/service/blog/rpc/internal/svc"
	"github.com/ve-weiyi/ve-blog-golang/zero/service/blog/rpc/pb/blog"
)

type RoleRpcServer struct {
	svcCtx *svc.ServiceContext
	blog.UnimplementedRoleRpcServer
}

func NewRoleRpcServer(svcCtx *svc.ServiceContext) *RoleRpcServer {
	return &RoleRpcServer{
		svcCtx: svcCtx,
	}
}

// 创建角色
func (s *RoleRpcServer) CreateRole(ctx context.Context, in *blog.Role) (*blog.Role, error) {
	l := rolerpclogic.NewCreateRoleLogic(ctx, s.svcCtx)
	return l.CreateRole(in)
}

// 更新角色
func (s *RoleRpcServer) UpdateRole(ctx context.Context, in *blog.Role) (*blog.Role, error) {
	l := rolerpclogic.NewUpdateRoleLogic(ctx, s.svcCtx)
	return l.UpdateRole(in)
}

// 删除角色
func (s *RoleRpcServer) DeleteRole(ctx context.Context, in *blog.IdReq) (*blog.BatchResp, error) {
	l := rolerpclogic.NewDeleteRoleLogic(ctx, s.svcCtx)
	return l.DeleteRole(in)
}

// 批量删除角色
func (s *RoleRpcServer) DeleteRoleList(ctx context.Context, in *blog.IdsReq) (*blog.BatchResp, error) {
	l := rolerpclogic.NewDeleteRoleListLogic(ctx, s.svcCtx)
	return l.DeleteRoleList(in)
}

// 查询角色
func (s *RoleRpcServer) FindRole(ctx context.Context, in *blog.IdReq) (*blog.Role, error) {
	l := rolerpclogic.NewFindRoleLogic(ctx, s.svcCtx)
	return l.FindRole(in)
}

// 查询角色列表
func (s *RoleRpcServer) FindRoleList(ctx context.Context, in *blog.PageQuery) (*blog.RolePageResp, error) {
	l := rolerpclogic.NewFindRoleListLogic(ctx, s.svcCtx)
	return l.FindRoleList(in)
}

// 查询角色
func (s *RoleRpcServer) FindRoleResources(ctx context.Context, in *blog.IdReq) (*blog.RoleResourcesResp, error) {
	l := rolerpclogic.NewFindRoleResourcesLogic(ctx, s.svcCtx)
	return l.FindRoleResources(in)
}

// 更新角色菜单
func (s *RoleRpcServer) UpdateRoleMenus(ctx context.Context, in *blog.UpdateRoleMenusReq) (*blog.EmptyResp, error) {
	l := rolerpclogic.NewUpdateRoleMenusLogic(ctx, s.svcCtx)
	return l.UpdateRoleMenus(in)
}

// 更新角色资源
func (s *RoleRpcServer) UpdateRoleApis(ctx context.Context, in *blog.UpdateRoleApisReq) (*blog.EmptyResp, error) {
	l := rolerpclogic.NewUpdateRoleApisLogic(ctx, s.svcCtx)
	return l.UpdateRoleApis(in)
}
