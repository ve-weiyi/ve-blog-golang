// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: account.proto

package server

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/blog-gozero/service/rpc/blog/internal/logic/accountrpc"
	"github.com/ve-weiyi/ve-blog-golang/blog-gozero/service/rpc/blog/internal/pb/accountrpc"
	"github.com/ve-weiyi/ve-blog-golang/blog-gozero/service/rpc/blog/internal/svc"
)

type AccountRpcServer struct {
	svcCtx *svc.ServiceContext
	accountrpc.UnimplementedAccountRpcServer
}

func NewAccountRpcServer(svcCtx *svc.ServiceContext) *AccountRpcServer {
	return &AccountRpcServer{
		svcCtx: svcCtx,
	}
}

// 登录
func (s *AccountRpcServer) Login(ctx context.Context, in *accountrpc.LoginReq) (*accountrpc.LoginResp, error) {
	l := accountrpclogic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

// 登出
func (s *AccountRpcServer) Logout(ctx context.Context, in *accountrpc.LogoutReq) (*accountrpc.LogoutResp, error) {
	l := accountrpclogic.NewLogoutLogic(ctx, s.svcCtx)
	return l.Logout(in)
}

// 注销
func (s *AccountRpcServer) Logoff(ctx context.Context, in *accountrpc.LogoffReq) (*accountrpc.EmptyResp, error) {
	l := accountrpclogic.NewLogoffLogic(ctx, s.svcCtx)
	return l.Logoff(in)
}

// 注册
func (s *AccountRpcServer) Register(ctx context.Context, in *accountrpc.RegisterReq) (*accountrpc.LoginResp, error) {
	l := accountrpclogic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

// 重置密码
func (s *AccountRpcServer) ResetPassword(ctx context.Context, in *accountrpc.ResetPasswordReq) (*accountrpc.EmptyResp, error) {
	l := accountrpclogic.NewResetPasswordLogic(ctx, s.svcCtx)
	return l.ResetPassword(in)
}

// 邮箱登录
func (s *AccountRpcServer) EmailLogin(ctx context.Context, in *accountrpc.EmailLoginReq) (*accountrpc.LoginResp, error) {
	l := accountrpclogic.NewEmailLoginLogic(ctx, s.svcCtx)
	return l.EmailLogin(in)
}

// 手机号登录
func (s *AccountRpcServer) PhoneLogin(ctx context.Context, in *accountrpc.PhoneLoginReq) (*accountrpc.LoginResp, error) {
	l := accountrpclogic.NewPhoneLoginLogic(ctx, s.svcCtx)
	return l.PhoneLogin(in)
}

// 第三方登录
func (s *AccountRpcServer) ThirdLogin(ctx context.Context, in *accountrpc.ThirdLoginReq) (*accountrpc.LoginResp, error) {
	l := accountrpclogic.NewThirdLoginLogic(ctx, s.svcCtx)
	return l.ThirdLogin(in)
}

// 获取第三方登录授权地址
func (s *AccountRpcServer) GetOauthAuthorizeUrl(ctx context.Context, in *accountrpc.GetOauthAuthorizeUrlReq) (*accountrpc.GetOauthAuthorizeUrlResp, error) {
	l := accountrpclogic.NewGetOauthAuthorizeUrlLogic(ctx, s.svcCtx)
	return l.GetOauthAuthorizeUrl(in)
}

// 发送邮件验证码
func (s *AccountRpcServer) SendEmailVerifyCode(ctx context.Context, in *accountrpc.SendEmailVerifyCodeReq) (*accountrpc.EmptyResp, error) {
	l := accountrpclogic.NewSendEmailVerifyCodeLogic(ctx, s.svcCtx)
	return l.SendEmailVerifyCode(in)
}

// 发送手机号验证码
func (s *AccountRpcServer) SendPhoneVerifyCode(ctx context.Context, in *accountrpc.SendPhoneVerifyCodeReq) (*accountrpc.EmptyResp, error) {
	l := accountrpclogic.NewSendPhoneVerifyCodeLogic(ctx, s.svcCtx)
	return l.SendPhoneVerifyCode(in)
}

// 生成验证码
func (s *AccountRpcServer) GenerateCaptchaCode(ctx context.Context, in *accountrpc.GenerateCaptchaCodeReq) (*accountrpc.GenerateCaptchaCodeResp, error) {
	l := accountrpclogic.NewGenerateCaptchaCodeLogic(ctx, s.svcCtx)
	return l.GenerateCaptchaCode(in)
}

// 获取用户信息
func (s *AccountRpcServer) GetUserInfo(ctx context.Context, in *accountrpc.UserIdReq) (*accountrpc.UserInfoResp, error) {
	l := accountrpclogic.NewGetUserInfoLogic(ctx, s.svcCtx)
	return l.GetUserInfo(in)
}

// 获取用户第三平台信息
func (s *AccountRpcServer) GetUserOauthInfo(ctx context.Context, in *accountrpc.UserIdReq) (*accountrpc.GetUserOauthInfoResp, error) {
	l := accountrpclogic.NewGetUserOauthInfoLogic(ctx, s.svcCtx)
	return l.GetUserOauthInfo(in)
}

// 修改用户信息
func (s *AccountRpcServer) UpdateUserInfo(ctx context.Context, in *accountrpc.UpdateUserInfoReq) (*accountrpc.EmptyResp, error) {
	l := accountrpclogic.NewUpdateUserInfoLogic(ctx, s.svcCtx)
	return l.UpdateUserInfo(in)
}

// 修改用户头像
func (s *AccountRpcServer) UpdateUserAvatar(ctx context.Context, in *accountrpc.UpdateUserAvatarReq) (*accountrpc.EmptyResp, error) {
	l := accountrpclogic.NewUpdateUserAvatarLogic(ctx, s.svcCtx)
	return l.UpdateUserAvatar(in)
}

// 修改用户密码
func (s *AccountRpcServer) UpdateUserPassword(ctx context.Context, in *accountrpc.UpdateUserPasswordReq) (*accountrpc.EmptyResp, error) {
	l := accountrpclogic.NewUpdateUserPasswordLogic(ctx, s.svcCtx)
	return l.UpdateUserPassword(in)
}

// 修改用户登录邮箱
func (s *AccountRpcServer) BindUserEmail(ctx context.Context, in *accountrpc.BindUseEmailReq) (*accountrpc.EmptyResp, error) {
	l := accountrpclogic.NewBindUserEmailLogic(ctx, s.svcCtx)
	return l.BindUserEmail(in)
}

// 修改用户登录手机号
func (s *AccountRpcServer) BindUserPhone(ctx context.Context, in *accountrpc.BindUserPhoneReq) (*accountrpc.EmptyResp, error) {
	l := accountrpclogic.NewBindUserPhoneLogic(ctx, s.svcCtx)
	return l.BindUserPhone(in)
}

// 修改用户第三方账号
func (s *AccountRpcServer) BindUserOauth(ctx context.Context, in *accountrpc.BindUserOauthReq) (*accountrpc.EmptyResp, error) {
	l := accountrpclogic.NewBindUserOauthLogic(ctx, s.svcCtx)
	return l.BindUserOauth(in)
}

// 解绑第三方账号
func (s *AccountRpcServer) UnbindUserOauth(ctx context.Context, in *accountrpc.UnbindUserOauthReq) (*accountrpc.EmptyResp, error) {
	l := accountrpclogic.NewUnbindUserOauthLogic(ctx, s.svcCtx)
	return l.UnbindUserOauth(in)
}

// 修改用户状态
func (s *AccountRpcServer) AdminUpdateUserStatus(ctx context.Context, in *accountrpc.AdminUpdateUserStatusReq) (*accountrpc.EmptyResp, error) {
	l := accountrpclogic.NewAdminUpdateUserStatusLogic(ctx, s.svcCtx)
	return l.AdminUpdateUserStatus(in)
}

// 管理员重置用户密码
func (s *AccountRpcServer) AdminResetUserPassword(ctx context.Context, in *accountrpc.AdminResetUserPasswordReq) (*accountrpc.EmptyResp, error) {
	l := accountrpclogic.NewAdminResetUserPasswordLogic(ctx, s.svcCtx)
	return l.AdminResetUserPassword(in)
}

// 查找用户列表
func (s *AccountRpcServer) FindUserList(ctx context.Context, in *accountrpc.FindUserListReq) (*accountrpc.FindUserListResp, error) {
	l := accountrpclogic.NewFindUserListLogic(ctx, s.svcCtx)
	return l.FindUserList(in)
}

// 查找用户信息列表
func (s *AccountRpcServer) FindUserInfoList(ctx context.Context, in *accountrpc.FindUserListReq) (*accountrpc.FindUserInfoListResp, error) {
	l := accountrpclogic.NewFindUserInfoListLogic(ctx, s.svcCtx)
	return l.FindUserInfoList(in)
}

// 查找在线用户列表
func (s *AccountRpcServer) FindUserOnlineList(ctx context.Context, in *accountrpc.FindUserListReq) (*accountrpc.FindUserInfoListResp, error) {
	l := accountrpclogic.NewFindUserOnlineListLogic(ctx, s.svcCtx)
	return l.FindUserOnlineList(in)
}

// 查询用户数量
func (s *AccountRpcServer) AnalysisUser(ctx context.Context, in *accountrpc.AnalysisUserReq) (*accountrpc.AnalysisUserResp, error) {
	l := accountrpclogic.NewAnalysisUserLogic(ctx, s.svcCtx)
	return l.AnalysisUser(in)
}

// 查询用户分布区域
func (s *AccountRpcServer) AnalysisUserAreas(ctx context.Context, in *accountrpc.AnalysisUserAreasReq) (*accountrpc.AnalysisUserAreasResp, error) {
	l := accountrpclogic.NewAnalysisUserAreasLogic(ctx, s.svcCtx)
	return l.AnalysisUserAreas(in)
}

// 获取游客身份
func (s *AccountRpcServer) GetTouristInfo(ctx context.Context, in *accountrpc.EmptyReq) (*accountrpc.GetTouristInfoResp, error) {
	l := accountrpclogic.NewGetTouristInfoLogic(ctx, s.svcCtx)
	return l.GetTouristInfo(in)
}
