// 声明 proto 语法版本，固定值

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: resource.proto

// proto 包名

package resourcerpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResourceRpc_AddPhoto_FullMethodName          = "/resourcerpc.ResourceRpc/AddPhoto"
	ResourceRpc_UpdatePhoto_FullMethodName       = "/resourcerpc.ResourceRpc/UpdatePhoto"
	ResourceRpc_UpdatePhotoDelete_FullMethodName = "/resourcerpc.ResourceRpc/UpdatePhotoDelete"
	ResourceRpc_DeletePhoto_FullMethodName       = "/resourcerpc.ResourceRpc/DeletePhoto"
	ResourceRpc_FindPhotoList_FullMethodName     = "/resourcerpc.ResourceRpc/FindPhotoList"
	ResourceRpc_AddAlbum_FullMethodName          = "/resourcerpc.ResourceRpc/AddAlbum"
	ResourceRpc_UpdateAlbum_FullMethodName       = "/resourcerpc.ResourceRpc/UpdateAlbum"
	ResourceRpc_UpdateAlbumDelete_FullMethodName = "/resourcerpc.ResourceRpc/UpdateAlbumDelete"
	ResourceRpc_GetAlbum_FullMethodName          = "/resourcerpc.ResourceRpc/GetAlbum"
	ResourceRpc_DeleteAlbum_FullMethodName       = "/resourcerpc.ResourceRpc/DeleteAlbum"
	ResourceRpc_FindAlbumList_FullMethodName     = "/resourcerpc.ResourceRpc/FindAlbumList"
	ResourceRpc_AddPage_FullMethodName           = "/resourcerpc.ResourceRpc/AddPage"
	ResourceRpc_UpdatePage_FullMethodName        = "/resourcerpc.ResourceRpc/UpdatePage"
	ResourceRpc_DeletePage_FullMethodName        = "/resourcerpc.ResourceRpc/DeletePage"
	ResourceRpc_FindPageList_FullMethodName      = "/resourcerpc.ResourceRpc/FindPageList"
)

// ResourceRpcClient is the client API for ResourceRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceRpcClient interface {
	// 创建照片
	AddPhoto(ctx context.Context, in *PhotoNewReq, opts ...grpc.CallOption) (*PhotoDetails, error)
	// 更新照片
	UpdatePhoto(ctx context.Context, in *PhotoNewReq, opts ...grpc.CallOption) (*PhotoDetails, error)
	// 更新照片删除状态
	UpdatePhotoDelete(ctx context.Context, in *UpdatePhotoDeleteReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 删除照片
	DeletePhoto(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询照片列表
	FindPhotoList(ctx context.Context, in *FindPhotoListReq, opts ...grpc.CallOption) (*FindPhotoListResp, error)
	// 创建相册
	AddAlbum(ctx context.Context, in *AlbumNewReq, opts ...grpc.CallOption) (*AlbumDetails, error)
	// 更新相册
	UpdateAlbum(ctx context.Context, in *AlbumNewReq, opts ...grpc.CallOption) (*AlbumDetails, error)
	// 更新相册删除状态
	UpdateAlbumDelete(ctx context.Context, in *UpdateAlbumDeleteReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 获取相册
	GetAlbum(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*AlbumDetails, error)
	// 删除相册
	DeleteAlbum(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询相册列表
	FindAlbumList(ctx context.Context, in *FindAlbumListReq, opts ...grpc.CallOption) (*FindAlbumListResp, error)
	// 创建页面
	AddPage(ctx context.Context, in *PageNewReq, opts ...grpc.CallOption) (*PageDetails, error)
	// 更新页面
	UpdatePage(ctx context.Context, in *PageNewReq, opts ...grpc.CallOption) (*PageDetails, error)
	// 删除页面
	DeletePage(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询页面列表
	FindPageList(ctx context.Context, in *FindPageListReq, opts ...grpc.CallOption) (*FindPageListResp, error)
}

type resourceRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceRpcClient(cc grpc.ClientConnInterface) ResourceRpcClient {
	return &resourceRpcClient{cc}
}

func (c *resourceRpcClient) AddPhoto(ctx context.Context, in *PhotoNewReq, opts ...grpc.CallOption) (*PhotoDetails, error) {
	out := new(PhotoDetails)
	err := c.cc.Invoke(ctx, ResourceRpc_AddPhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) UpdatePhoto(ctx context.Context, in *PhotoNewReq, opts ...grpc.CallOption) (*PhotoDetails, error) {
	out := new(PhotoDetails)
	err := c.cc.Invoke(ctx, ResourceRpc_UpdatePhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) UpdatePhotoDelete(ctx context.Context, in *UpdatePhotoDeleteReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ResourceRpc_UpdatePhotoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) DeletePhoto(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ResourceRpc_DeletePhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) FindPhotoList(ctx context.Context, in *FindPhotoListReq, opts ...grpc.CallOption) (*FindPhotoListResp, error) {
	out := new(FindPhotoListResp)
	err := c.cc.Invoke(ctx, ResourceRpc_FindPhotoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) AddAlbum(ctx context.Context, in *AlbumNewReq, opts ...grpc.CallOption) (*AlbumDetails, error) {
	out := new(AlbumDetails)
	err := c.cc.Invoke(ctx, ResourceRpc_AddAlbum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) UpdateAlbum(ctx context.Context, in *AlbumNewReq, opts ...grpc.CallOption) (*AlbumDetails, error) {
	out := new(AlbumDetails)
	err := c.cc.Invoke(ctx, ResourceRpc_UpdateAlbum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) UpdateAlbumDelete(ctx context.Context, in *UpdateAlbumDeleteReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ResourceRpc_UpdateAlbumDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) GetAlbum(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*AlbumDetails, error) {
	out := new(AlbumDetails)
	err := c.cc.Invoke(ctx, ResourceRpc_GetAlbum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) DeleteAlbum(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ResourceRpc_DeleteAlbum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) FindAlbumList(ctx context.Context, in *FindAlbumListReq, opts ...grpc.CallOption) (*FindAlbumListResp, error) {
	out := new(FindAlbumListResp)
	err := c.cc.Invoke(ctx, ResourceRpc_FindAlbumList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) AddPage(ctx context.Context, in *PageNewReq, opts ...grpc.CallOption) (*PageDetails, error) {
	out := new(PageDetails)
	err := c.cc.Invoke(ctx, ResourceRpc_AddPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) UpdatePage(ctx context.Context, in *PageNewReq, opts ...grpc.CallOption) (*PageDetails, error) {
	out := new(PageDetails)
	err := c.cc.Invoke(ctx, ResourceRpc_UpdatePage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) DeletePage(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, ResourceRpc_DeletePage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRpcClient) FindPageList(ctx context.Context, in *FindPageListReq, opts ...grpc.CallOption) (*FindPageListResp, error) {
	out := new(FindPageListResp)
	err := c.cc.Invoke(ctx, ResourceRpc_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceRpcServer is the server API for ResourceRpc service.
// All implementations must embed UnimplementedResourceRpcServer
// for forward compatibility
type ResourceRpcServer interface {
	// 创建照片
	AddPhoto(context.Context, *PhotoNewReq) (*PhotoDetails, error)
	// 更新照片
	UpdatePhoto(context.Context, *PhotoNewReq) (*PhotoDetails, error)
	// 更新照片删除状态
	UpdatePhotoDelete(context.Context, *UpdatePhotoDeleteReq) (*BatchResp, error)
	// 删除照片
	DeletePhoto(context.Context, *IdsReq) (*BatchResp, error)
	// 查询照片列表
	FindPhotoList(context.Context, *FindPhotoListReq) (*FindPhotoListResp, error)
	// 创建相册
	AddAlbum(context.Context, *AlbumNewReq) (*AlbumDetails, error)
	// 更新相册
	UpdateAlbum(context.Context, *AlbumNewReq) (*AlbumDetails, error)
	// 更新相册删除状态
	UpdateAlbumDelete(context.Context, *UpdateAlbumDeleteReq) (*BatchResp, error)
	// 获取相册
	GetAlbum(context.Context, *IdReq) (*AlbumDetails, error)
	// 删除相册
	DeleteAlbum(context.Context, *IdsReq) (*BatchResp, error)
	// 查询相册列表
	FindAlbumList(context.Context, *FindAlbumListReq) (*FindAlbumListResp, error)
	// 创建页面
	AddPage(context.Context, *PageNewReq) (*PageDetails, error)
	// 更新页面
	UpdatePage(context.Context, *PageNewReq) (*PageDetails, error)
	// 删除页面
	DeletePage(context.Context, *IdsReq) (*BatchResp, error)
	// 查询页面列表
	FindPageList(context.Context, *FindPageListReq) (*FindPageListResp, error)
	mustEmbedUnimplementedResourceRpcServer()
}

// UnimplementedResourceRpcServer must be embedded to have forward compatible implementations.
type UnimplementedResourceRpcServer struct {
}

func (UnimplementedResourceRpcServer) AddPhoto(context.Context, *PhotoNewReq) (*PhotoDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPhoto not implemented")
}
func (UnimplementedResourceRpcServer) UpdatePhoto(context.Context, *PhotoNewReq) (*PhotoDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhoto not implemented")
}
func (UnimplementedResourceRpcServer) UpdatePhotoDelete(context.Context, *UpdatePhotoDeleteReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhotoDelete not implemented")
}
func (UnimplementedResourceRpcServer) DeletePhoto(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhoto not implemented")
}
func (UnimplementedResourceRpcServer) FindPhotoList(context.Context, *FindPhotoListReq) (*FindPhotoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPhotoList not implemented")
}
func (UnimplementedResourceRpcServer) AddAlbum(context.Context, *AlbumNewReq) (*AlbumDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAlbum not implemented")
}
func (UnimplementedResourceRpcServer) UpdateAlbum(context.Context, *AlbumNewReq) (*AlbumDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlbum not implemented")
}
func (UnimplementedResourceRpcServer) UpdateAlbumDelete(context.Context, *UpdateAlbumDeleteReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlbumDelete not implemented")
}
func (UnimplementedResourceRpcServer) GetAlbum(context.Context, *IdReq) (*AlbumDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbum not implemented")
}
func (UnimplementedResourceRpcServer) DeleteAlbum(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlbum not implemented")
}
func (UnimplementedResourceRpcServer) FindAlbumList(context.Context, *FindAlbumListReq) (*FindAlbumListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAlbumList not implemented")
}
func (UnimplementedResourceRpcServer) AddPage(context.Context, *PageNewReq) (*PageDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPage not implemented")
}
func (UnimplementedResourceRpcServer) UpdatePage(context.Context, *PageNewReq) (*PageDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePage not implemented")
}
func (UnimplementedResourceRpcServer) DeletePage(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePage not implemented")
}
func (UnimplementedResourceRpcServer) FindPageList(context.Context, *FindPageListReq) (*FindPageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedResourceRpcServer) mustEmbedUnimplementedResourceRpcServer() {}

// UnsafeResourceRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceRpcServer will
// result in compilation errors.
type UnsafeResourceRpcServer interface {
	mustEmbedUnimplementedResourceRpcServer()
}

func RegisterResourceRpcServer(s grpc.ServiceRegistrar, srv ResourceRpcServer) {
	s.RegisterService(&ResourceRpc_ServiceDesc, srv)
}

func _ResourceRpc_AddPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotoNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).AddPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_AddPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).AddPhoto(ctx, req.(*PhotoNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_UpdatePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotoNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).UpdatePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_UpdatePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).UpdatePhoto(ctx, req.(*PhotoNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_UpdatePhotoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhotoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).UpdatePhotoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_UpdatePhotoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).UpdatePhotoDelete(ctx, req.(*UpdatePhotoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_DeletePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).DeletePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_DeletePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).DeletePhoto(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_FindPhotoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPhotoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).FindPhotoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_FindPhotoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).FindPhotoList(ctx, req.(*FindPhotoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_AddAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).AddAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_AddAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).AddAlbum(ctx, req.(*AlbumNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_UpdateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).UpdateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_UpdateAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).UpdateAlbum(ctx, req.(*AlbumNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_UpdateAlbumDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlbumDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).UpdateAlbumDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_UpdateAlbumDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).UpdateAlbumDelete(ctx, req.(*UpdateAlbumDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_GetAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).GetAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_GetAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).GetAlbum(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_DeleteAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).DeleteAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_DeleteAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).DeleteAlbum(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_FindAlbumList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAlbumListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).FindAlbumList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_FindAlbumList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).FindAlbumList(ctx, req.(*FindAlbumListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_AddPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).AddPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_AddPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).AddPage(ctx, req.(*PageNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_UpdatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).UpdatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_UpdatePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).UpdatePage(ctx, req.(*PageNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_DeletePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).DeletePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_DeletePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).DeletePage(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRpc_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRpcServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRpc_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRpcServer).FindPageList(ctx, req.(*FindPageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceRpc_ServiceDesc is the grpc.ServiceDesc for ResourceRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resourcerpc.ResourceRpc",
	HandlerType: (*ResourceRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPhoto",
			Handler:    _ResourceRpc_AddPhoto_Handler,
		},
		{
			MethodName: "UpdatePhoto",
			Handler:    _ResourceRpc_UpdatePhoto_Handler,
		},
		{
			MethodName: "UpdatePhotoDelete",
			Handler:    _ResourceRpc_UpdatePhotoDelete_Handler,
		},
		{
			MethodName: "DeletePhoto",
			Handler:    _ResourceRpc_DeletePhoto_Handler,
		},
		{
			MethodName: "FindPhotoList",
			Handler:    _ResourceRpc_FindPhotoList_Handler,
		},
		{
			MethodName: "AddAlbum",
			Handler:    _ResourceRpc_AddAlbum_Handler,
		},
		{
			MethodName: "UpdateAlbum",
			Handler:    _ResourceRpc_UpdateAlbum_Handler,
		},
		{
			MethodName: "UpdateAlbumDelete",
			Handler:    _ResourceRpc_UpdateAlbumDelete_Handler,
		},
		{
			MethodName: "GetAlbum",
			Handler:    _ResourceRpc_GetAlbum_Handler,
		},
		{
			MethodName: "DeleteAlbum",
			Handler:    _ResourceRpc_DeleteAlbum_Handler,
		},
		{
			MethodName: "FindAlbumList",
			Handler:    _ResourceRpc_FindAlbumList_Handler,
		},
		{
			MethodName: "AddPage",
			Handler:    _ResourceRpc_AddPage_Handler,
		},
		{
			MethodName: "UpdatePage",
			Handler:    _ResourceRpc_UpdatePage_Handler,
		},
		{
			MethodName: "DeletePage",
			Handler:    _ResourceRpc_DeletePage_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _ResourceRpc_FindPageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource.proto",
}
