// 声明 proto 语法版本，固定值

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: permission.proto

// proto 包名

package permissionrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PermissionRpc_AddApi_FullMethodName            = "/permissionrpc.PermissionRpc/AddApi"
	PermissionRpc_UpdateApi_FullMethodName         = "/permissionrpc.PermissionRpc/UpdateApi"
	PermissionRpc_DeleteApi_FullMethodName         = "/permissionrpc.PermissionRpc/DeleteApi"
	PermissionRpc_FindApiList_FullMethodName       = "/permissionrpc.PermissionRpc/FindApiList"
	PermissionRpc_SyncApiList_FullMethodName       = "/permissionrpc.PermissionRpc/SyncApiList"
	PermissionRpc_CleanApiList_FullMethodName      = "/permissionrpc.PermissionRpc/CleanApiList"
	PermissionRpc_FindAllApi_FullMethodName        = "/permissionrpc.PermissionRpc/FindAllApi"
	PermissionRpc_AddMenu_FullMethodName           = "/permissionrpc.PermissionRpc/AddMenu"
	PermissionRpc_UpdateMenu_FullMethodName        = "/permissionrpc.PermissionRpc/UpdateMenu"
	PermissionRpc_DeleteMenu_FullMethodName        = "/permissionrpc.PermissionRpc/DeleteMenu"
	PermissionRpc_FindMenuList_FullMethodName      = "/permissionrpc.PermissionRpc/FindMenuList"
	PermissionRpc_SyncMenuList_FullMethodName      = "/permissionrpc.PermissionRpc/SyncMenuList"
	PermissionRpc_CleanMenuList_FullMethodName     = "/permissionrpc.PermissionRpc/CleanMenuList"
	PermissionRpc_FindAllMenu_FullMethodName       = "/permissionrpc.PermissionRpc/FindAllMenu"
	PermissionRpc_AddRole_FullMethodName           = "/permissionrpc.PermissionRpc/AddRole"
	PermissionRpc_UpdateRole_FullMethodName        = "/permissionrpc.PermissionRpc/UpdateRole"
	PermissionRpc_DeleteRole_FullMethodName        = "/permissionrpc.PermissionRpc/DeleteRole"
	PermissionRpc_FindRoleList_FullMethodName      = "/permissionrpc.PermissionRpc/FindRoleList"
	PermissionRpc_UpdateRoleMenus_FullMethodName   = "/permissionrpc.PermissionRpc/UpdateRoleMenus"
	PermissionRpc_UpdateRoleApis_FullMethodName    = "/permissionrpc.PermissionRpc/UpdateRoleApis"
	PermissionRpc_FindRoleResources_FullMethodName = "/permissionrpc.PermissionRpc/FindRoleResources"
	PermissionRpc_UpdateUserRole_FullMethodName    = "/permissionrpc.PermissionRpc/UpdateUserRole"
	PermissionRpc_FindUserApis_FullMethodName      = "/permissionrpc.PermissionRpc/FindUserApis"
	PermissionRpc_FindUserMenus_FullMethodName     = "/permissionrpc.PermissionRpc/FindUserMenus"
	PermissionRpc_FindUserRoles_FullMethodName     = "/permissionrpc.PermissionRpc/FindUserRoles"
)

// PermissionRpcClient is the client API for PermissionRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionRpcClient interface {
	// 创建接口
	AddApi(ctx context.Context, in *ApiNewReq, opts ...grpc.CallOption) (*ApiDetails, error)
	// 更新接口
	UpdateApi(ctx context.Context, in *ApiNewReq, opts ...grpc.CallOption) (*ApiDetails, error)
	// 删除接口
	DeleteApi(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询接口列表
	FindApiList(ctx context.Context, in *FindApiListReq, opts ...grpc.CallOption) (*FindApiListResp, error)
	// 同步接口列表
	SyncApiList(ctx context.Context, in *SyncApiReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 清空接口列表
	CleanApiList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查找所有接口
	FindAllApi(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*FindApiListResp, error)
	// 创建菜单
	AddMenu(ctx context.Context, in *MenuNewReq, opts ...grpc.CallOption) (*MenuDetails, error)
	// 更新菜单
	UpdateMenu(ctx context.Context, in *MenuNewReq, opts ...grpc.CallOption) (*MenuDetails, error)
	// 删除菜单
	DeleteMenu(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询菜单列表
	FindMenuList(ctx context.Context, in *FindMenuListReq, opts ...grpc.CallOption) (*FindMenuListResp, error)
	// 同步菜单列表
	SyncMenuList(ctx context.Context, in *SyncMenuReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 清空菜单列表
	CleanMenuList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查找所有菜单
	FindAllMenu(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*FindMenuListResp, error)
	// 创建角色
	AddRole(ctx context.Context, in *RoleNewReq, opts ...grpc.CallOption) (*RoleDetails, error)
	// 更新角色
	UpdateRole(ctx context.Context, in *RoleNewReq, opts ...grpc.CallOption) (*RoleDetails, error)
	// 删除角色
	DeleteRole(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
	// 查询角色列表
	FindRoleList(ctx context.Context, in *FindRoleListReq, opts ...grpc.CallOption) (*FindRoleListResp, error)
	// 更新角色菜单
	UpdateRoleMenus(ctx context.Context, in *UpdateRoleMenusReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 更新角色资源
	UpdateRoleApis(ctx context.Context, in *UpdateRoleApisReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 查询角色资源权限
	FindRoleResources(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*RoleResourcesResp, error)
	// 修改用户角色
	UpdateUserRole(ctx context.Context, in *UpdateUserRoleReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 获取用户接口权限
	FindUserApis(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindApiListResp, error)
	// 获取用户菜单权限
	FindUserMenus(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindMenuListResp, error)
	// 获取用户角色信息
	FindUserRoles(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindRoleListResp, error)
}

type permissionRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionRpcClient(cc grpc.ClientConnInterface) PermissionRpcClient {
	return &permissionRpcClient{cc}
}

func (c *permissionRpcClient) AddApi(ctx context.Context, in *ApiNewReq, opts ...grpc.CallOption) (*ApiDetails, error) {
	out := new(ApiDetails)
	err := c.cc.Invoke(ctx, PermissionRpc_AddApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) UpdateApi(ctx context.Context, in *ApiNewReq, opts ...grpc.CallOption) (*ApiDetails, error) {
	out := new(ApiDetails)
	err := c.cc.Invoke(ctx, PermissionRpc_UpdateApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) DeleteApi(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PermissionRpc_DeleteApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) FindApiList(ctx context.Context, in *FindApiListReq, opts ...grpc.CallOption) (*FindApiListResp, error) {
	out := new(FindApiListResp)
	err := c.cc.Invoke(ctx, PermissionRpc_FindApiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) SyncApiList(ctx context.Context, in *SyncApiReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PermissionRpc_SyncApiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) CleanApiList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PermissionRpc_CleanApiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) FindAllApi(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*FindApiListResp, error) {
	out := new(FindApiListResp)
	err := c.cc.Invoke(ctx, PermissionRpc_FindAllApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) AddMenu(ctx context.Context, in *MenuNewReq, opts ...grpc.CallOption) (*MenuDetails, error) {
	out := new(MenuDetails)
	err := c.cc.Invoke(ctx, PermissionRpc_AddMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) UpdateMenu(ctx context.Context, in *MenuNewReq, opts ...grpc.CallOption) (*MenuDetails, error) {
	out := new(MenuDetails)
	err := c.cc.Invoke(ctx, PermissionRpc_UpdateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) DeleteMenu(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PermissionRpc_DeleteMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) FindMenuList(ctx context.Context, in *FindMenuListReq, opts ...grpc.CallOption) (*FindMenuListResp, error) {
	out := new(FindMenuListResp)
	err := c.cc.Invoke(ctx, PermissionRpc_FindMenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) SyncMenuList(ctx context.Context, in *SyncMenuReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PermissionRpc_SyncMenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) CleanMenuList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PermissionRpc_CleanMenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) FindAllMenu(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*FindMenuListResp, error) {
	out := new(FindMenuListResp)
	err := c.cc.Invoke(ctx, PermissionRpc_FindAllMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) AddRole(ctx context.Context, in *RoleNewReq, opts ...grpc.CallOption) (*RoleDetails, error) {
	out := new(RoleDetails)
	err := c.cc.Invoke(ctx, PermissionRpc_AddRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) UpdateRole(ctx context.Context, in *RoleNewReq, opts ...grpc.CallOption) (*RoleDetails, error) {
	out := new(RoleDetails)
	err := c.cc.Invoke(ctx, PermissionRpc_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) DeleteRole(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PermissionRpc_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) FindRoleList(ctx context.Context, in *FindRoleListReq, opts ...grpc.CallOption) (*FindRoleListResp, error) {
	out := new(FindRoleListResp)
	err := c.cc.Invoke(ctx, PermissionRpc_FindRoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) UpdateRoleMenus(ctx context.Context, in *UpdateRoleMenusReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, PermissionRpc_UpdateRoleMenus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) UpdateRoleApis(ctx context.Context, in *UpdateRoleApisReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, PermissionRpc_UpdateRoleApis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) FindRoleResources(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*RoleResourcesResp, error) {
	out := new(RoleResourcesResp)
	err := c.cc.Invoke(ctx, PermissionRpc_FindRoleResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) UpdateUserRole(ctx context.Context, in *UpdateUserRoleReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, PermissionRpc_UpdateUserRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) FindUserApis(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindApiListResp, error) {
	out := new(FindApiListResp)
	err := c.cc.Invoke(ctx, PermissionRpc_FindUserApis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) FindUserMenus(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindMenuListResp, error) {
	out := new(FindMenuListResp)
	err := c.cc.Invoke(ctx, PermissionRpc_FindUserMenus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRpcClient) FindUserRoles(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindRoleListResp, error) {
	out := new(FindRoleListResp)
	err := c.cc.Invoke(ctx, PermissionRpc_FindUserRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionRpcServer is the server API for PermissionRpc service.
// All implementations must embed UnimplementedPermissionRpcServer
// for forward compatibility
type PermissionRpcServer interface {
	// 创建接口
	AddApi(context.Context, *ApiNewReq) (*ApiDetails, error)
	// 更新接口
	UpdateApi(context.Context, *ApiNewReq) (*ApiDetails, error)
	// 删除接口
	DeleteApi(context.Context, *IdsReq) (*BatchResp, error)
	// 查询接口列表
	FindApiList(context.Context, *FindApiListReq) (*FindApiListResp, error)
	// 同步接口列表
	SyncApiList(context.Context, *SyncApiReq) (*BatchResp, error)
	// 清空接口列表
	CleanApiList(context.Context, *EmptyReq) (*BatchResp, error)
	// 查找所有接口
	FindAllApi(context.Context, *EmptyReq) (*FindApiListResp, error)
	// 创建菜单
	AddMenu(context.Context, *MenuNewReq) (*MenuDetails, error)
	// 更新菜单
	UpdateMenu(context.Context, *MenuNewReq) (*MenuDetails, error)
	// 删除菜单
	DeleteMenu(context.Context, *IdsReq) (*BatchResp, error)
	// 查询菜单列表
	FindMenuList(context.Context, *FindMenuListReq) (*FindMenuListResp, error)
	// 同步菜单列表
	SyncMenuList(context.Context, *SyncMenuReq) (*BatchResp, error)
	// 清空菜单列表
	CleanMenuList(context.Context, *EmptyReq) (*BatchResp, error)
	// 查找所有菜单
	FindAllMenu(context.Context, *EmptyReq) (*FindMenuListResp, error)
	// 创建角色
	AddRole(context.Context, *RoleNewReq) (*RoleDetails, error)
	// 更新角色
	UpdateRole(context.Context, *RoleNewReq) (*RoleDetails, error)
	// 删除角色
	DeleteRole(context.Context, *IdsReq) (*BatchResp, error)
	// 查询角色列表
	FindRoleList(context.Context, *FindRoleListReq) (*FindRoleListResp, error)
	// 更新角色菜单
	UpdateRoleMenus(context.Context, *UpdateRoleMenusReq) (*EmptyResp, error)
	// 更新角色资源
	UpdateRoleApis(context.Context, *UpdateRoleApisReq) (*EmptyResp, error)
	// 查询角色资源权限
	FindRoleResources(context.Context, *IdReq) (*RoleResourcesResp, error)
	// 修改用户角色
	UpdateUserRole(context.Context, *UpdateUserRoleReq) (*EmptyResp, error)
	// 获取用户接口权限
	FindUserApis(context.Context, *UserIdReq) (*FindApiListResp, error)
	// 获取用户菜单权限
	FindUserMenus(context.Context, *UserIdReq) (*FindMenuListResp, error)
	// 获取用户角色信息
	FindUserRoles(context.Context, *UserIdReq) (*FindRoleListResp, error)
	mustEmbedUnimplementedPermissionRpcServer()
}

// UnimplementedPermissionRpcServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionRpcServer struct {
}

func (UnimplementedPermissionRpcServer) AddApi(context.Context, *ApiNewReq) (*ApiDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApi not implemented")
}
func (UnimplementedPermissionRpcServer) UpdateApi(context.Context, *ApiNewReq) (*ApiDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApi not implemented")
}
func (UnimplementedPermissionRpcServer) DeleteApi(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApi not implemented")
}
func (UnimplementedPermissionRpcServer) FindApiList(context.Context, *FindApiListReq) (*FindApiListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindApiList not implemented")
}
func (UnimplementedPermissionRpcServer) SyncApiList(context.Context, *SyncApiReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncApiList not implemented")
}
func (UnimplementedPermissionRpcServer) CleanApiList(context.Context, *EmptyReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanApiList not implemented")
}
func (UnimplementedPermissionRpcServer) FindAllApi(context.Context, *EmptyReq) (*FindApiListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllApi not implemented")
}
func (UnimplementedPermissionRpcServer) AddMenu(context.Context, *MenuNewReq) (*MenuDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMenu not implemented")
}
func (UnimplementedPermissionRpcServer) UpdateMenu(context.Context, *MenuNewReq) (*MenuDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedPermissionRpcServer) DeleteMenu(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedPermissionRpcServer) FindMenuList(context.Context, *FindMenuListReq) (*FindMenuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMenuList not implemented")
}
func (UnimplementedPermissionRpcServer) SyncMenuList(context.Context, *SyncMenuReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncMenuList not implemented")
}
func (UnimplementedPermissionRpcServer) CleanMenuList(context.Context, *EmptyReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanMenuList not implemented")
}
func (UnimplementedPermissionRpcServer) FindAllMenu(context.Context, *EmptyReq) (*FindMenuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllMenu not implemented")
}
func (UnimplementedPermissionRpcServer) AddRole(context.Context, *RoleNewReq) (*RoleDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedPermissionRpcServer) UpdateRole(context.Context, *RoleNewReq) (*RoleDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedPermissionRpcServer) DeleteRole(context.Context, *IdsReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedPermissionRpcServer) FindRoleList(context.Context, *FindRoleListReq) (*FindRoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoleList not implemented")
}
func (UnimplementedPermissionRpcServer) UpdateRoleMenus(context.Context, *UpdateRoleMenusReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleMenus not implemented")
}
func (UnimplementedPermissionRpcServer) UpdateRoleApis(context.Context, *UpdateRoleApisReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleApis not implemented")
}
func (UnimplementedPermissionRpcServer) FindRoleResources(context.Context, *IdReq) (*RoleResourcesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoleResources not implemented")
}
func (UnimplementedPermissionRpcServer) UpdateUserRole(context.Context, *UpdateUserRoleReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRole not implemented")
}
func (UnimplementedPermissionRpcServer) FindUserApis(context.Context, *UserIdReq) (*FindApiListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserApis not implemented")
}
func (UnimplementedPermissionRpcServer) FindUserMenus(context.Context, *UserIdReq) (*FindMenuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserMenus not implemented")
}
func (UnimplementedPermissionRpcServer) FindUserRoles(context.Context, *UserIdReq) (*FindRoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserRoles not implemented")
}
func (UnimplementedPermissionRpcServer) mustEmbedUnimplementedPermissionRpcServer() {}

// UnsafePermissionRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionRpcServer will
// result in compilation errors.
type UnsafePermissionRpcServer interface {
	mustEmbedUnimplementedPermissionRpcServer()
}

func RegisterPermissionRpcServer(s grpc.ServiceRegistrar, srv PermissionRpcServer) {
	s.RegisterService(&PermissionRpc_ServiceDesc, srv)
}

func _PermissionRpc_AddApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).AddApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_AddApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).AddApi(ctx, req.(*ApiNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_UpdateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).UpdateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_UpdateApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).UpdateApi(ctx, req.(*ApiNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_DeleteApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).DeleteApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_DeleteApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).DeleteApi(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_FindApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindApiListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).FindApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_FindApiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).FindApiList(ctx, req.(*FindApiListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_SyncApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).SyncApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_SyncApiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).SyncApiList(ctx, req.(*SyncApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_CleanApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).CleanApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_CleanApiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).CleanApiList(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_FindAllApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).FindAllApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_FindAllApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).FindAllApi(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_AddMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).AddMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_AddMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).AddMenu(ctx, req.(*MenuNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_UpdateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).UpdateMenu(ctx, req.(*MenuNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_DeleteMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).DeleteMenu(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_FindMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).FindMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_FindMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).FindMenuList(ctx, req.(*FindMenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_SyncMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).SyncMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_SyncMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).SyncMenuList(ctx, req.(*SyncMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_CleanMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).CleanMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_CleanMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).CleanMenuList(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_FindAllMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).FindAllMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_FindAllMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).FindAllMenu(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_AddRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).AddRole(ctx, req.(*RoleNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleNewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).UpdateRole(ctx, req.(*RoleNewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).DeleteRole(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_FindRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).FindRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_FindRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).FindRoleList(ctx, req.(*FindRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_UpdateRoleMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleMenusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).UpdateRoleMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_UpdateRoleMenus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).UpdateRoleMenus(ctx, req.(*UpdateRoleMenusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_UpdateRoleApis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleApisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).UpdateRoleApis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_UpdateRoleApis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).UpdateRoleApis(ctx, req.(*UpdateRoleApisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_FindRoleResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).FindRoleResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_FindRoleResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).FindRoleResources(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_UpdateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).UpdateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_UpdateUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).UpdateUserRole(ctx, req.(*UpdateUserRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_FindUserApis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).FindUserApis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_FindUserApis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).FindUserApis(ctx, req.(*UserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_FindUserMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).FindUserMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_FindUserMenus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).FindUserMenus(ctx, req.(*UserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRpc_FindUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRpcServer).FindUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRpc_FindUserRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRpcServer).FindUserRoles(ctx, req.(*UserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PermissionRpc_ServiceDesc is the grpc.ServiceDesc for PermissionRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermissionRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "permissionrpc.PermissionRpc",
	HandlerType: (*PermissionRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddApi",
			Handler:    _PermissionRpc_AddApi_Handler,
		},
		{
			MethodName: "UpdateApi",
			Handler:    _PermissionRpc_UpdateApi_Handler,
		},
		{
			MethodName: "DeleteApi",
			Handler:    _PermissionRpc_DeleteApi_Handler,
		},
		{
			MethodName: "FindApiList",
			Handler:    _PermissionRpc_FindApiList_Handler,
		},
		{
			MethodName: "SyncApiList",
			Handler:    _PermissionRpc_SyncApiList_Handler,
		},
		{
			MethodName: "CleanApiList",
			Handler:    _PermissionRpc_CleanApiList_Handler,
		},
		{
			MethodName: "FindAllApi",
			Handler:    _PermissionRpc_FindAllApi_Handler,
		},
		{
			MethodName: "AddMenu",
			Handler:    _PermissionRpc_AddMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _PermissionRpc_UpdateMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _PermissionRpc_DeleteMenu_Handler,
		},
		{
			MethodName: "FindMenuList",
			Handler:    _PermissionRpc_FindMenuList_Handler,
		},
		{
			MethodName: "SyncMenuList",
			Handler:    _PermissionRpc_SyncMenuList_Handler,
		},
		{
			MethodName: "CleanMenuList",
			Handler:    _PermissionRpc_CleanMenuList_Handler,
		},
		{
			MethodName: "FindAllMenu",
			Handler:    _PermissionRpc_FindAllMenu_Handler,
		},
		{
			MethodName: "AddRole",
			Handler:    _PermissionRpc_AddRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _PermissionRpc_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _PermissionRpc_DeleteRole_Handler,
		},
		{
			MethodName: "FindRoleList",
			Handler:    _PermissionRpc_FindRoleList_Handler,
		},
		{
			MethodName: "UpdateRoleMenus",
			Handler:    _PermissionRpc_UpdateRoleMenus_Handler,
		},
		{
			MethodName: "UpdateRoleApis",
			Handler:    _PermissionRpc_UpdateRoleApis_Handler,
		},
		{
			MethodName: "FindRoleResources",
			Handler:    _PermissionRpc_FindRoleResources_Handler,
		},
		{
			MethodName: "UpdateUserRole",
			Handler:    _PermissionRpc_UpdateUserRole_Handler,
		},
		{
			MethodName: "FindUserApis",
			Handler:    _PermissionRpc_FindUserApis_Handler,
		},
		{
			MethodName: "FindUserMenus",
			Handler:    _PermissionRpc_FindUserMenus_Handler,
		},
		{
			MethodName: "FindUserRoles",
			Handler:    _PermissionRpc_FindUserRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "permission.proto",
}
