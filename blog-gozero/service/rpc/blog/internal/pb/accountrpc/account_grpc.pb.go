// 声明 proto 语法版本，固定值

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: account.proto

// proto 包名

package accountrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountRpc_Login_FullMethodName                  = "/accountrpc.AccountRpc/Login"
	AccountRpc_Logout_FullMethodName                 = "/accountrpc.AccountRpc/Logout"
	AccountRpc_Logoff_FullMethodName                 = "/accountrpc.AccountRpc/Logoff"
	AccountRpc_Register_FullMethodName               = "/accountrpc.AccountRpc/Register"
	AccountRpc_ResetPassword_FullMethodName          = "/accountrpc.AccountRpc/ResetPassword"
	AccountRpc_EmailLogin_FullMethodName             = "/accountrpc.AccountRpc/EmailLogin"
	AccountRpc_PhoneLogin_FullMethodName             = "/accountrpc.AccountRpc/PhoneLogin"
	AccountRpc_ThirdLogin_FullMethodName             = "/accountrpc.AccountRpc/ThirdLogin"
	AccountRpc_GetOauthAuthorizeUrl_FullMethodName   = "/accountrpc.AccountRpc/GetOauthAuthorizeUrl"
	AccountRpc_SendEmailVerifyCode_FullMethodName    = "/accountrpc.AccountRpc/SendEmailVerifyCode"
	AccountRpc_SendPhoneVerifyCode_FullMethodName    = "/accountrpc.AccountRpc/SendPhoneVerifyCode"
	AccountRpc_GenerateCaptchaCode_FullMethodName    = "/accountrpc.AccountRpc/GenerateCaptchaCode"
	AccountRpc_GetUserInfo_FullMethodName            = "/accountrpc.AccountRpc/GetUserInfo"
	AccountRpc_GetUserOauthInfo_FullMethodName       = "/accountrpc.AccountRpc/GetUserOauthInfo"
	AccountRpc_UpdateUserInfo_FullMethodName         = "/accountrpc.AccountRpc/UpdateUserInfo"
	AccountRpc_UpdateUserAvatar_FullMethodName       = "/accountrpc.AccountRpc/UpdateUserAvatar"
	AccountRpc_UpdateUserPassword_FullMethodName     = "/accountrpc.AccountRpc/UpdateUserPassword"
	AccountRpc_BindUserEmail_FullMethodName          = "/accountrpc.AccountRpc/BindUserEmail"
	AccountRpc_BindUserPhone_FullMethodName          = "/accountrpc.AccountRpc/BindUserPhone"
	AccountRpc_BindUserOauth_FullMethodName          = "/accountrpc.AccountRpc/BindUserOauth"
	AccountRpc_UnbindUserOauth_FullMethodName        = "/accountrpc.AccountRpc/UnbindUserOauth"
	AccountRpc_AdminUpdateUserStatus_FullMethodName  = "/accountrpc.AccountRpc/AdminUpdateUserStatus"
	AccountRpc_AdminResetUserPassword_FullMethodName = "/accountrpc.AccountRpc/AdminResetUserPassword"
	AccountRpc_FindUserList_FullMethodName           = "/accountrpc.AccountRpc/FindUserList"
	AccountRpc_FindUserInfoList_FullMethodName       = "/accountrpc.AccountRpc/FindUserInfoList"
	AccountRpc_FindUserOnlineList_FullMethodName     = "/accountrpc.AccountRpc/FindUserOnlineList"
	AccountRpc_AnalysisUser_FullMethodName           = "/accountrpc.AccountRpc/AnalysisUser"
	AccountRpc_AnalysisUserAreas_FullMethodName      = "/accountrpc.AccountRpc/AnalysisUserAreas"
	AccountRpc_GetTouristInfo_FullMethodName         = "/accountrpc.AccountRpc/GetTouristInfo"
)

// AccountRpcClient is the client API for AccountRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountRpcClient interface {
	// 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 登出
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
	// 注销
	Logoff(ctx context.Context, in *LogoffReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 注册
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 重置密码
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 邮箱登录
	EmailLogin(ctx context.Context, in *EmailLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 手机号登录
	PhoneLogin(ctx context.Context, in *PhoneLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 第三方登录
	ThirdLogin(ctx context.Context, in *ThirdLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 获取第三方登录授权地址
	GetOauthAuthorizeUrl(ctx context.Context, in *GetOauthAuthorizeUrlReq, opts ...grpc.CallOption) (*GetOauthAuthorizeUrlResp, error)
	// 发送邮件验证码
	SendEmailVerifyCode(ctx context.Context, in *SendEmailVerifyCodeReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 发送手机号验证码
	SendPhoneVerifyCode(ctx context.Context, in *SendPhoneVerifyCodeReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 生成验证码
	GenerateCaptchaCode(ctx context.Context, in *GenerateCaptchaCodeReq, opts ...grpc.CallOption) (*GenerateCaptchaCodeResp, error)
	// 获取用户信息
	GetUserInfo(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*UserInfoResp, error)
	// 获取用户第三平台信息
	GetUserOauthInfo(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*GetUserOauthInfoResp, error)
	// 修改用户信息
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 修改用户头像
	UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 修改用户密码
	UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 修改用户登录邮箱
	BindUserEmail(ctx context.Context, in *BindUseEmailReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 修改用户登录手机号
	BindUserPhone(ctx context.Context, in *BindUserPhoneReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 修改用户第三方账号
	BindUserOauth(ctx context.Context, in *BindUserOauthReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 解绑第三方账号
	UnbindUserOauth(ctx context.Context, in *UnbindUserOauthReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 修改用户状态
	AdminUpdateUserStatus(ctx context.Context, in *AdminUpdateUserStatusReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 管理员重置用户密码
	AdminResetUserPassword(ctx context.Context, in *AdminResetUserPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 查找用户列表
	FindUserList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserListResp, error)
	// 查找用户信息列表
	FindUserInfoList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserInfoListResp, error)
	// 查找在线用户列表
	FindUserOnlineList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserInfoListResp, error)
	// 查询用户数量
	AnalysisUser(ctx context.Context, in *AnalysisUserReq, opts ...grpc.CallOption) (*AnalysisUserResp, error)
	// 查询用户分布区域
	AnalysisUserAreas(ctx context.Context, in *AnalysisUserAreasReq, opts ...grpc.CallOption) (*AnalysisUserAreasResp, error)
	// 获取游客身份
	GetTouristInfo(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetTouristInfoResp, error)
}

type accountRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountRpcClient(cc grpc.ClientConnInterface) AccountRpcClient {
	return &accountRpcClient{cc}
}

func (c *accountRpcClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, AccountRpc_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	out := new(LogoutResp)
	err := c.cc.Invoke(ctx, AccountRpc_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) Logoff(ctx context.Context, in *LogoffReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AccountRpc_Logoff_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, AccountRpc_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AccountRpc_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) EmailLogin(ctx context.Context, in *EmailLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, AccountRpc_EmailLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) PhoneLogin(ctx context.Context, in *PhoneLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, AccountRpc_PhoneLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) ThirdLogin(ctx context.Context, in *ThirdLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, AccountRpc_ThirdLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) GetOauthAuthorizeUrl(ctx context.Context, in *GetOauthAuthorizeUrlReq, opts ...grpc.CallOption) (*GetOauthAuthorizeUrlResp, error) {
	out := new(GetOauthAuthorizeUrlResp)
	err := c.cc.Invoke(ctx, AccountRpc_GetOauthAuthorizeUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) SendEmailVerifyCode(ctx context.Context, in *SendEmailVerifyCodeReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AccountRpc_SendEmailVerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) SendPhoneVerifyCode(ctx context.Context, in *SendPhoneVerifyCodeReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AccountRpc_SendPhoneVerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) GenerateCaptchaCode(ctx context.Context, in *GenerateCaptchaCodeReq, opts ...grpc.CallOption) (*GenerateCaptchaCodeResp, error) {
	out := new(GenerateCaptchaCodeResp)
	err := c.cc.Invoke(ctx, AccountRpc_GenerateCaptchaCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) GetUserInfo(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	out := new(UserInfoResp)
	err := c.cc.Invoke(ctx, AccountRpc_GetUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) GetUserOauthInfo(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*GetUserOauthInfoResp, error) {
	out := new(GetUserOauthInfoResp)
	err := c.cc.Invoke(ctx, AccountRpc_GetUserOauthInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AccountRpc_UpdateUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AccountRpc_UpdateUserAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AccountRpc_UpdateUserPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) BindUserEmail(ctx context.Context, in *BindUseEmailReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AccountRpc_BindUserEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) BindUserPhone(ctx context.Context, in *BindUserPhoneReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AccountRpc_BindUserPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) BindUserOauth(ctx context.Context, in *BindUserOauthReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AccountRpc_BindUserOauth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) UnbindUserOauth(ctx context.Context, in *UnbindUserOauthReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AccountRpc_UnbindUserOauth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) AdminUpdateUserStatus(ctx context.Context, in *AdminUpdateUserStatusReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AccountRpc_AdminUpdateUserStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) AdminResetUserPassword(ctx context.Context, in *AdminResetUserPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, AccountRpc_AdminResetUserPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) FindUserList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserListResp, error) {
	out := new(FindUserListResp)
	err := c.cc.Invoke(ctx, AccountRpc_FindUserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) FindUserInfoList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserInfoListResp, error) {
	out := new(FindUserInfoListResp)
	err := c.cc.Invoke(ctx, AccountRpc_FindUserInfoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) FindUserOnlineList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserInfoListResp, error) {
	out := new(FindUserInfoListResp)
	err := c.cc.Invoke(ctx, AccountRpc_FindUserOnlineList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) AnalysisUser(ctx context.Context, in *AnalysisUserReq, opts ...grpc.CallOption) (*AnalysisUserResp, error) {
	out := new(AnalysisUserResp)
	err := c.cc.Invoke(ctx, AccountRpc_AnalysisUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) AnalysisUserAreas(ctx context.Context, in *AnalysisUserAreasReq, opts ...grpc.CallOption) (*AnalysisUserAreasResp, error) {
	out := new(AnalysisUserAreasResp)
	err := c.cc.Invoke(ctx, AccountRpc_AnalysisUserAreas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRpcClient) GetTouristInfo(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetTouristInfoResp, error) {
	out := new(GetTouristInfoResp)
	err := c.cc.Invoke(ctx, AccountRpc_GetTouristInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountRpcServer is the server API for AccountRpc service.
// All implementations must embed UnimplementedAccountRpcServer
// for forward compatibility
type AccountRpcServer interface {
	// 登录
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// 登出
	Logout(context.Context, *LogoutReq) (*LogoutResp, error)
	// 注销
	Logoff(context.Context, *LogoffReq) (*EmptyResp, error)
	// 注册
	Register(context.Context, *RegisterReq) (*LoginResp, error)
	// 重置密码
	ResetPassword(context.Context, *ResetPasswordReq) (*EmptyResp, error)
	// 邮箱登录
	EmailLogin(context.Context, *EmailLoginReq) (*LoginResp, error)
	// 手机号登录
	PhoneLogin(context.Context, *PhoneLoginReq) (*LoginResp, error)
	// 第三方登录
	ThirdLogin(context.Context, *ThirdLoginReq) (*LoginResp, error)
	// 获取第三方登录授权地址
	GetOauthAuthorizeUrl(context.Context, *GetOauthAuthorizeUrlReq) (*GetOauthAuthorizeUrlResp, error)
	// 发送邮件验证码
	SendEmailVerifyCode(context.Context, *SendEmailVerifyCodeReq) (*EmptyResp, error)
	// 发送手机号验证码
	SendPhoneVerifyCode(context.Context, *SendPhoneVerifyCodeReq) (*EmptyResp, error)
	// 生成验证码
	GenerateCaptchaCode(context.Context, *GenerateCaptchaCodeReq) (*GenerateCaptchaCodeResp, error)
	// 获取用户信息
	GetUserInfo(context.Context, *UserIdReq) (*UserInfoResp, error)
	// 获取用户第三平台信息
	GetUserOauthInfo(context.Context, *UserIdReq) (*GetUserOauthInfoResp, error)
	// 修改用户信息
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*EmptyResp, error)
	// 修改用户头像
	UpdateUserAvatar(context.Context, *UpdateUserAvatarReq) (*EmptyResp, error)
	// 修改用户密码
	UpdateUserPassword(context.Context, *UpdateUserPasswordReq) (*EmptyResp, error)
	// 修改用户登录邮箱
	BindUserEmail(context.Context, *BindUseEmailReq) (*EmptyResp, error)
	// 修改用户登录手机号
	BindUserPhone(context.Context, *BindUserPhoneReq) (*EmptyResp, error)
	// 修改用户第三方账号
	BindUserOauth(context.Context, *BindUserOauthReq) (*EmptyResp, error)
	// 解绑第三方账号
	UnbindUserOauth(context.Context, *UnbindUserOauthReq) (*EmptyResp, error)
	// 修改用户状态
	AdminUpdateUserStatus(context.Context, *AdminUpdateUserStatusReq) (*EmptyResp, error)
	// 管理员重置用户密码
	AdminResetUserPassword(context.Context, *AdminResetUserPasswordReq) (*EmptyResp, error)
	// 查找用户列表
	FindUserList(context.Context, *FindUserListReq) (*FindUserListResp, error)
	// 查找用户信息列表
	FindUserInfoList(context.Context, *FindUserListReq) (*FindUserInfoListResp, error)
	// 查找在线用户列表
	FindUserOnlineList(context.Context, *FindUserListReq) (*FindUserInfoListResp, error)
	// 查询用户数量
	AnalysisUser(context.Context, *AnalysisUserReq) (*AnalysisUserResp, error)
	// 查询用户分布区域
	AnalysisUserAreas(context.Context, *AnalysisUserAreasReq) (*AnalysisUserAreasResp, error)
	// 获取游客身份
	GetTouristInfo(context.Context, *EmptyReq) (*GetTouristInfoResp, error)
	mustEmbedUnimplementedAccountRpcServer()
}

// UnimplementedAccountRpcServer must be embedded to have forward compatible implementations.
type UnimplementedAccountRpcServer struct {
}

func (UnimplementedAccountRpcServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAccountRpcServer) Logout(context.Context, *LogoutReq) (*LogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAccountRpcServer) Logoff(context.Context, *LogoffReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logoff not implemented")
}
func (UnimplementedAccountRpcServer) Register(context.Context, *RegisterReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAccountRpcServer) ResetPassword(context.Context, *ResetPasswordReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedAccountRpcServer) EmailLogin(context.Context, *EmailLoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailLogin not implemented")
}
func (UnimplementedAccountRpcServer) PhoneLogin(context.Context, *PhoneLoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneLogin not implemented")
}
func (UnimplementedAccountRpcServer) ThirdLogin(context.Context, *ThirdLoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThirdLogin not implemented")
}
func (UnimplementedAccountRpcServer) GetOauthAuthorizeUrl(context.Context, *GetOauthAuthorizeUrlReq) (*GetOauthAuthorizeUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthAuthorizeUrl not implemented")
}
func (UnimplementedAccountRpcServer) SendEmailVerifyCode(context.Context, *SendEmailVerifyCodeReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailVerifyCode not implemented")
}
func (UnimplementedAccountRpcServer) SendPhoneVerifyCode(context.Context, *SendPhoneVerifyCodeReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPhoneVerifyCode not implemented")
}
func (UnimplementedAccountRpcServer) GenerateCaptchaCode(context.Context, *GenerateCaptchaCodeReq) (*GenerateCaptchaCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCaptchaCode not implemented")
}
func (UnimplementedAccountRpcServer) GetUserInfo(context.Context, *UserIdReq) (*UserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedAccountRpcServer) GetUserOauthInfo(context.Context, *UserIdReq) (*GetUserOauthInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOauthInfo not implemented")
}
func (UnimplementedAccountRpcServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedAccountRpcServer) UpdateUserAvatar(context.Context, *UpdateUserAvatarReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAvatar not implemented")
}
func (UnimplementedAccountRpcServer) UpdateUserPassword(context.Context, *UpdateUserPasswordReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPassword not implemented")
}
func (UnimplementedAccountRpcServer) BindUserEmail(context.Context, *BindUseEmailReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindUserEmail not implemented")
}
func (UnimplementedAccountRpcServer) BindUserPhone(context.Context, *BindUserPhoneReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindUserPhone not implemented")
}
func (UnimplementedAccountRpcServer) BindUserOauth(context.Context, *BindUserOauthReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindUserOauth not implemented")
}
func (UnimplementedAccountRpcServer) UnbindUserOauth(context.Context, *UnbindUserOauthReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindUserOauth not implemented")
}
func (UnimplementedAccountRpcServer) AdminUpdateUserStatus(context.Context, *AdminUpdateUserStatusReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateUserStatus not implemented")
}
func (UnimplementedAccountRpcServer) AdminResetUserPassword(context.Context, *AdminResetUserPasswordReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminResetUserPassword not implemented")
}
func (UnimplementedAccountRpcServer) FindUserList(context.Context, *FindUserListReq) (*FindUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserList not implemented")
}
func (UnimplementedAccountRpcServer) FindUserInfoList(context.Context, *FindUserListReq) (*FindUserInfoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserInfoList not implemented")
}
func (UnimplementedAccountRpcServer) FindUserOnlineList(context.Context, *FindUserListReq) (*FindUserInfoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserOnlineList not implemented")
}
func (UnimplementedAccountRpcServer) AnalysisUser(context.Context, *AnalysisUserReq) (*AnalysisUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalysisUser not implemented")
}
func (UnimplementedAccountRpcServer) AnalysisUserAreas(context.Context, *AnalysisUserAreasReq) (*AnalysisUserAreasResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalysisUserAreas not implemented")
}
func (UnimplementedAccountRpcServer) GetTouristInfo(context.Context, *EmptyReq) (*GetTouristInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTouristInfo not implemented")
}
func (UnimplementedAccountRpcServer) mustEmbedUnimplementedAccountRpcServer() {}

// UnsafeAccountRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountRpcServer will
// result in compilation errors.
type UnsafeAccountRpcServer interface {
	mustEmbedUnimplementedAccountRpcServer()
}

func RegisterAccountRpcServer(s grpc.ServiceRegistrar, srv AccountRpcServer) {
	s.RegisterService(&AccountRpc_ServiceDesc, srv)
}

func _AccountRpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_Logoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).Logoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_Logoff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).Logoff(ctx, req.(*LogoffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_EmailLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).EmailLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_EmailLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).EmailLogin(ctx, req.(*EmailLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_PhoneLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).PhoneLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_PhoneLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).PhoneLogin(ctx, req.(*PhoneLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_ThirdLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThirdLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).ThirdLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_ThirdLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).ThirdLogin(ctx, req.(*ThirdLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_GetOauthAuthorizeUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOauthAuthorizeUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).GetOauthAuthorizeUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_GetOauthAuthorizeUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).GetOauthAuthorizeUrl(ctx, req.(*GetOauthAuthorizeUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_SendEmailVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).SendEmailVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_SendEmailVerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).SendEmailVerifyCode(ctx, req.(*SendEmailVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_SendPhoneVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPhoneVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).SendPhoneVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_SendPhoneVerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).SendPhoneVerifyCode(ctx, req.(*SendPhoneVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_GenerateCaptchaCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateCaptchaCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).GenerateCaptchaCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_GenerateCaptchaCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).GenerateCaptchaCode(ctx, req.(*GenerateCaptchaCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).GetUserInfo(ctx, req.(*UserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_GetUserOauthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).GetUserOauthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_GetUserOauthInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).GetUserOauthInfo(ctx, req.(*UserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_UpdateUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_UpdateUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAvatarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).UpdateUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_UpdateUserAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).UpdateUserAvatar(ctx, req.(*UpdateUserAvatarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_UpdateUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).UpdateUserPassword(ctx, req.(*UpdateUserPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_BindUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindUseEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).BindUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_BindUserEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).BindUserEmail(ctx, req.(*BindUseEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_BindUserPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindUserPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).BindUserPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_BindUserPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).BindUserPhone(ctx, req.(*BindUserPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_BindUserOauth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindUserOauthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).BindUserOauth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_BindUserOauth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).BindUserOauth(ctx, req.(*BindUserOauthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_UnbindUserOauth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindUserOauthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).UnbindUserOauth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_UnbindUserOauth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).UnbindUserOauth(ctx, req.(*UnbindUserOauthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_AdminUpdateUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateUserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).AdminUpdateUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_AdminUpdateUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).AdminUpdateUserStatus(ctx, req.(*AdminUpdateUserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_AdminResetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminResetUserPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).AdminResetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_AdminResetUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).AdminResetUserPassword(ctx, req.(*AdminResetUserPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_FindUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).FindUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_FindUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).FindUserList(ctx, req.(*FindUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_FindUserInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).FindUserInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_FindUserInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).FindUserInfoList(ctx, req.(*FindUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_FindUserOnlineList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).FindUserOnlineList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_FindUserOnlineList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).FindUserOnlineList(ctx, req.(*FindUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_AnalysisUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalysisUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).AnalysisUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_AnalysisUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).AnalysisUser(ctx, req.(*AnalysisUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_AnalysisUserAreas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalysisUserAreasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).AnalysisUserAreas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_AnalysisUserAreas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).AnalysisUserAreas(ctx, req.(*AnalysisUserAreasReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRpc_GetTouristInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).GetTouristInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpc_GetTouristInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).GetTouristInfo(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountRpc_ServiceDesc is the grpc.ServiceDesc for AccountRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accountrpc.AccountRpc",
	HandlerType: (*AccountRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AccountRpc_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AccountRpc_Logout_Handler,
		},
		{
			MethodName: "Logoff",
			Handler:    _AccountRpc_Logoff_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AccountRpc_Register_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _AccountRpc_ResetPassword_Handler,
		},
		{
			MethodName: "EmailLogin",
			Handler:    _AccountRpc_EmailLogin_Handler,
		},
		{
			MethodName: "PhoneLogin",
			Handler:    _AccountRpc_PhoneLogin_Handler,
		},
		{
			MethodName: "ThirdLogin",
			Handler:    _AccountRpc_ThirdLogin_Handler,
		},
		{
			MethodName: "GetOauthAuthorizeUrl",
			Handler:    _AccountRpc_GetOauthAuthorizeUrl_Handler,
		},
		{
			MethodName: "SendEmailVerifyCode",
			Handler:    _AccountRpc_SendEmailVerifyCode_Handler,
		},
		{
			MethodName: "SendPhoneVerifyCode",
			Handler:    _AccountRpc_SendPhoneVerifyCode_Handler,
		},
		{
			MethodName: "GenerateCaptchaCode",
			Handler:    _AccountRpc_GenerateCaptchaCode_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _AccountRpc_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUserOauthInfo",
			Handler:    _AccountRpc_GetUserOauthInfo_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _AccountRpc_UpdateUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserAvatar",
			Handler:    _AccountRpc_UpdateUserAvatar_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _AccountRpc_UpdateUserPassword_Handler,
		},
		{
			MethodName: "BindUserEmail",
			Handler:    _AccountRpc_BindUserEmail_Handler,
		},
		{
			MethodName: "BindUserPhone",
			Handler:    _AccountRpc_BindUserPhone_Handler,
		},
		{
			MethodName: "BindUserOauth",
			Handler:    _AccountRpc_BindUserOauth_Handler,
		},
		{
			MethodName: "UnbindUserOauth",
			Handler:    _AccountRpc_UnbindUserOauth_Handler,
		},
		{
			MethodName: "AdminUpdateUserStatus",
			Handler:    _AccountRpc_AdminUpdateUserStatus_Handler,
		},
		{
			MethodName: "AdminResetUserPassword",
			Handler:    _AccountRpc_AdminResetUserPassword_Handler,
		},
		{
			MethodName: "FindUserList",
			Handler:    _AccountRpc_FindUserList_Handler,
		},
		{
			MethodName: "FindUserInfoList",
			Handler:    _AccountRpc_FindUserInfoList_Handler,
		},
		{
			MethodName: "FindUserOnlineList",
			Handler:    _AccountRpc_FindUserOnlineList_Handler,
		},
		{
			MethodName: "AnalysisUser",
			Handler:    _AccountRpc_AnalysisUser_Handler,
		},
		{
			MethodName: "AnalysisUserAreas",
			Handler:    _AccountRpc_AnalysisUserAreas_Handler,
		},
		{
			MethodName: "GetTouristInfo",
			Handler:    _AccountRpc_GetTouristInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
