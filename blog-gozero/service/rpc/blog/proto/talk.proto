// 声明 proto 语法版本，固定值
syntax = "proto3";

// proto 包名
package talkrpc;

// 生成 golang 代码后的包名
option go_package = "./talkrpc";

message EmptyReq {
}

message EmptyResp {
}

message IdReq {
  int64 id = 1;
}

message IdsReq {
  repeated int64 ids = 1;
}

message UserIdReq {
  string user_id = 1;
}

message BatchResp {
  int64 success_count = 1;
}

message CountResp {
  int64 count = 1;
}

/************** blog 说说管理 **************/
message TalkNewReq {
  int64 id = 1;// 说说id
  string user_id = 2;// 用户id
  string content = 3;// 说说内容
  repeated string img_list = 4;// 图片URL列表
  int64 is_top = 5;// 是否置顶
  int64 status = 6;// 状态 1.公开 2.私密
}

message TalkDetails {
  int64 id = 1;// 说说id
  string user_id = 2;// 用户id
  string content = 3;// 说说内容
  repeated string img_list = 4;// 图片URL列表
  int64 is_top = 5;// 是否置顶
  int64 status = 6;// 状态 1.公开 2.私密
  int64 created_at = 7;// 创建时间
  int64 updated_at = 8;// 更新时间
  int64 like_count = 9;// 点赞量
  int64 comment_count = 10;// 评论量
}

message FindTalkListReq {
  int64 page = 1;
  int64 page_size = 2;
  repeated string sorts = 3; // 排序
  int64 status = 6;// 状态 1.公开 2.私密
}

message FindTalkListResp {
  repeated TalkDetails list = 1;
  int64 total = 2;
}

message FindLikeTalkResp{
  repeated int64 like_talk_list = 1;
}

service TalkRpc {
  // 创建说说
  rpc AddTalk(TalkNewReq) returns(TalkDetails);
  // 更新说说
  rpc UpdateTalk(TalkNewReq) returns(TalkDetails);
  // 删除说说
  rpc DeleteTalk(IdsReq) returns(BatchResp);
  // 查询说说
  rpc GetTalk(IdReq) returns(TalkDetails);
  // 查询说说列表
  rpc FindTalkList(FindTalkListReq) returns(FindTalkListResp);

  // 点赞说说
  rpc LikeTalk(IdReq) returns(EmptyResp);
  // 用户点赞的说说
  rpc FindUserLikeTalk(UserIdReq) returns(FindLikeTalkResp);
}

