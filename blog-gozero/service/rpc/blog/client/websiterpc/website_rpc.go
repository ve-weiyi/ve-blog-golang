// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: website.proto

package websiterpc

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/blog-gozero/service/rpc/blog/internal/pb/websiterpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddVisitReq          = websiterpc.AddVisitReq
	AddVisitResp         = websiterpc.AddVisitResp
	AnalysisVisitResp    = websiterpc.AnalysisVisitResp
	BatchResp            = websiterpc.BatchResp
	CountResp            = websiterpc.CountResp
	EmptyReq             = websiterpc.EmptyReq
	EmptyResp            = websiterpc.EmptyResp
	FindFriendListReq    = websiterpc.FindFriendListReq
	FindFriendListResp   = websiterpc.FindFriendListResp
	FindPageListReq      = websiterpc.FindPageListReq
	FindPageListResp     = websiterpc.FindPageListResp
	FindVisitTrendReq    = websiterpc.FindVisitTrendReq
	FindVisitTrendResp   = websiterpc.FindVisitTrendResp
	FriendDetails        = websiterpc.FriendDetails
	FriendNewReq         = websiterpc.FriendNewReq
	IdReq                = websiterpc.IdReq
	IdsReq               = websiterpc.IdsReq
	PageDetails          = websiterpc.PageDetails
	PageNewReq           = websiterpc.PageNewReq
	UserIdReq            = websiterpc.UserIdReq
	VisitDailyStatistics = websiterpc.VisitDailyStatistics

	WebsiteRpc interface {
		// 用户日浏览量分析
		AnalysisVisit(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*AnalysisVisitResp, error)
		// 添加用户访问记录
		AddVisit(ctx context.Context, in *AddVisitReq, opts ...grpc.CallOption) (*AddVisitResp, error)
		// 查询用户访问趋势
		FindVisitTrend(ctx context.Context, in *FindVisitTrendReq, opts ...grpc.CallOption) (*FindVisitTrendResp, error)
		// 创建页面
		AddPage(ctx context.Context, in *PageNewReq, opts ...grpc.CallOption) (*PageDetails, error)
		// 更新页面
		UpdatePage(ctx context.Context, in *PageNewReq, opts ...grpc.CallOption) (*PageDetails, error)
		// 删除页面
		DeletePage(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
		// 查询页面列表
		FindPageList(ctx context.Context, in *FindPageListReq, opts ...grpc.CallOption) (*FindPageListResp, error)
		// 创建友链
		AddFriend(ctx context.Context, in *FriendNewReq, opts ...grpc.CallOption) (*FriendDetails, error)
		// 更新友链
		UpdateFriend(ctx context.Context, in *FriendNewReq, opts ...grpc.CallOption) (*FriendDetails, error)
		// 删除友链
		DeleteFriend(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
		// 查询友链列表
		FindFriendList(ctx context.Context, in *FindFriendListReq, opts ...grpc.CallOption) (*FindFriendListResp, error)
	}

	defaultWebsiteRpc struct {
		cli zrpc.Client
	}
)

func NewWebsiteRpc(cli zrpc.Client) WebsiteRpc {
	return &defaultWebsiteRpc{
		cli: cli,
	}
}

// 用户日浏览量分析
func (m *defaultWebsiteRpc) AnalysisVisit(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*AnalysisVisitResp, error) {
	client := websiterpc.NewWebsiteRpcClient(m.cli.Conn())
	return client.AnalysisVisit(ctx, in, opts...)
}

// 添加用户访问记录
func (m *defaultWebsiteRpc) AddVisit(ctx context.Context, in *AddVisitReq, opts ...grpc.CallOption) (*AddVisitResp, error) {
	client := websiterpc.NewWebsiteRpcClient(m.cli.Conn())
	return client.AddVisit(ctx, in, opts...)
}

// 查询用户访问趋势
func (m *defaultWebsiteRpc) FindVisitTrend(ctx context.Context, in *FindVisitTrendReq, opts ...grpc.CallOption) (*FindVisitTrendResp, error) {
	client := websiterpc.NewWebsiteRpcClient(m.cli.Conn())
	return client.FindVisitTrend(ctx, in, opts...)
}

// 创建页面
func (m *defaultWebsiteRpc) AddPage(ctx context.Context, in *PageNewReq, opts ...grpc.CallOption) (*PageDetails, error) {
	client := websiterpc.NewWebsiteRpcClient(m.cli.Conn())
	return client.AddPage(ctx, in, opts...)
}

// 更新页面
func (m *defaultWebsiteRpc) UpdatePage(ctx context.Context, in *PageNewReq, opts ...grpc.CallOption) (*PageDetails, error) {
	client := websiterpc.NewWebsiteRpcClient(m.cli.Conn())
	return client.UpdatePage(ctx, in, opts...)
}

// 删除页面
func (m *defaultWebsiteRpc) DeletePage(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := websiterpc.NewWebsiteRpcClient(m.cli.Conn())
	return client.DeletePage(ctx, in, opts...)
}

// 查询页面列表
func (m *defaultWebsiteRpc) FindPageList(ctx context.Context, in *FindPageListReq, opts ...grpc.CallOption) (*FindPageListResp, error) {
	client := websiterpc.NewWebsiteRpcClient(m.cli.Conn())
	return client.FindPageList(ctx, in, opts...)
}

// 创建友链
func (m *defaultWebsiteRpc) AddFriend(ctx context.Context, in *FriendNewReq, opts ...grpc.CallOption) (*FriendDetails, error) {
	client := websiterpc.NewWebsiteRpcClient(m.cli.Conn())
	return client.AddFriend(ctx, in, opts...)
}

// 更新友链
func (m *defaultWebsiteRpc) UpdateFriend(ctx context.Context, in *FriendNewReq, opts ...grpc.CallOption) (*FriendDetails, error) {
	client := websiterpc.NewWebsiteRpcClient(m.cli.Conn())
	return client.UpdateFriend(ctx, in, opts...)
}

// 删除友链
func (m *defaultWebsiteRpc) DeleteFriend(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := websiterpc.NewWebsiteRpcClient(m.cli.Conn())
	return client.DeleteFriend(ctx, in, opts...)
}

// 查询友链列表
func (m *defaultWebsiteRpc) FindFriendList(ctx context.Context, in *FindFriendListReq, opts ...grpc.CallOption) (*FindFriendListResp, error) {
	client := websiterpc.NewWebsiteRpcClient(m.cli.Conn())
	return client.FindFriendList(ctx, in, opts...)
}
