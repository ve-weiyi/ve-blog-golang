// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: account.proto

package accountrpc

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/blog-gozero/service/rpc/blog/internal/pb/accountrpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AdminResetUserPasswordReq = accountrpc.AdminResetUserPasswordReq
	AdminUpdateUserStatusReq  = accountrpc.AdminUpdateUserStatusReq
	AnalysisUserAreasReq      = accountrpc.AnalysisUserAreasReq
	AnalysisUserAreasResp     = accountrpc.AnalysisUserAreasResp
	AnalysisUserReq           = accountrpc.AnalysisUserReq
	AnalysisUserResp          = accountrpc.AnalysisUserResp
	BatchResp                 = accountrpc.BatchResp
	EmptyReq                  = accountrpc.EmptyReq
	EmptyResp                 = accountrpc.EmptyResp
	FindUserInfoListResp      = accountrpc.FindUserInfoListResp
	FindUserListReq           = accountrpc.FindUserListReq
	FindUserListResp          = accountrpc.FindUserListResp
	GetTouristInfoResp        = accountrpc.GetTouristInfoResp
	IdReq                     = accountrpc.IdReq
	IdsReq                    = accountrpc.IdsReq
	LoginReq                  = accountrpc.LoginReq
	LoginResp                 = accountrpc.LoginResp
	LogoffReq                 = accountrpc.LogoffReq
	LogoutReq                 = accountrpc.LogoutReq
	LogoutResp                = accountrpc.LogoutResp
	OauthLoginReq             = accountrpc.OauthLoginReq
	OauthLoginUrlResp         = accountrpc.OauthLoginUrlResp
	RegisterReq               = accountrpc.RegisterReq
	ResetPasswordReq          = accountrpc.ResetPasswordReq
	SendEmailVerifyCodeReq    = accountrpc.SendEmailVerifyCodeReq
	SendPhoneVerifyCodeReq    = accountrpc.SendPhoneVerifyCodeReq
	UpdateUseEmailReq         = accountrpc.UpdateUseEmailReq
	UpdateUserAvatarReq       = accountrpc.UpdateUserAvatarReq
	UpdateUserInfoReq         = accountrpc.UpdateUserInfoReq
	UpdateUserPasswordReq     = accountrpc.UpdateUserPasswordReq
	UpdateUserPhoneReq        = accountrpc.UpdateUserPhoneReq
	User                      = accountrpc.User
	UserArea                  = accountrpc.UserArea
	UserIdReq                 = accountrpc.UserIdReq
	UserInfoResp              = accountrpc.UserInfoResp
	UserRoleLabel             = accountrpc.UserRoleLabel

	AccountRpc interface {
		// 登录
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		// 登出
		Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
		// 注销
		Logoff(ctx context.Context, in *LogoffReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 注册
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*LoginResp, error)
		// 重置密码
		ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 发送邮件验证码
		SendEmailVerifyCode(ctx context.Context, in *SendEmailVerifyCodeReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 发送手机号验证码
		SendPhoneVerifyCode(ctx context.Context, in *SendPhoneVerifyCodeReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 第三方登录
		OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		// 获取第三方登录授权地址
		GetOauthAuthorizeUrl(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthLoginUrlResp, error)
		// 获取用户信息
		GetUserInfo(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		// 修改用户信息
		UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 修改用户头像
		UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 修改用户密码
		UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 修改用户登录邮箱
		UpdateUserEmail(ctx context.Context, in *UpdateUseEmailReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 修改用户登录手机号
		UpdateUserPhone(ctx context.Context, in *UpdateUserPhoneReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 修改用户状态
		AdminUpdateUserStatus(ctx context.Context, in *AdminUpdateUserStatusReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 管理员重置用户密码
		AdminResetUserPassword(ctx context.Context, in *AdminResetUserPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 查找用户列表
		FindUserList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserListResp, error)
		// 查找用户信息列表
		FindUserInfoList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserInfoListResp, error)
		// 查找在线用户列表
		FindUserOnlineList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserInfoListResp, error)
		// 查询用户数量
		AnalysisUser(ctx context.Context, in *AnalysisUserReq, opts ...grpc.CallOption) (*AnalysisUserResp, error)
		// 查询用户分布区域
		AnalysisUserAreas(ctx context.Context, in *AnalysisUserAreasReq, opts ...grpc.CallOption) (*AnalysisUserAreasResp, error)
		// 获取游客身份
		GetTouristInfo(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetTouristInfoResp, error)
	}

	defaultAccountRpc struct {
		cli zrpc.Client
	}
)

func NewAccountRpc(cli zrpc.Client) AccountRpc {
	return &defaultAccountRpc{
		cli: cli,
	}
}

// 登录
func (m *defaultAccountRpc) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// 登出
func (m *defaultAccountRpc) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

// 注销
func (m *defaultAccountRpc) Logoff(ctx context.Context, in *LogoffReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.Logoff(ctx, in, opts...)
}

// 注册
func (m *defaultAccountRpc) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// 重置密码
func (m *defaultAccountRpc) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.ResetPassword(ctx, in, opts...)
}

// 发送邮件验证码
func (m *defaultAccountRpc) SendEmailVerifyCode(ctx context.Context, in *SendEmailVerifyCodeReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.SendEmailVerifyCode(ctx, in, opts...)
}

// 发送手机号验证码
func (m *defaultAccountRpc) SendPhoneVerifyCode(ctx context.Context, in *SendPhoneVerifyCodeReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.SendPhoneVerifyCode(ctx, in, opts...)
}

// 第三方登录
func (m *defaultAccountRpc) OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.OauthLogin(ctx, in, opts...)
}

// 获取第三方登录授权地址
func (m *defaultAccountRpc) GetOauthAuthorizeUrl(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthLoginUrlResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.GetOauthAuthorizeUrl(ctx, in, opts...)
}

// 获取用户信息
func (m *defaultAccountRpc) GetUserInfo(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

// 修改用户信息
func (m *defaultAccountRpc) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.UpdateUserInfo(ctx, in, opts...)
}

// 修改用户头像
func (m *defaultAccountRpc) UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.UpdateUserAvatar(ctx, in, opts...)
}

// 修改用户密码
func (m *defaultAccountRpc) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.UpdateUserPassword(ctx, in, opts...)
}

// 修改用户登录邮箱
func (m *defaultAccountRpc) UpdateUserEmail(ctx context.Context, in *UpdateUseEmailReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.UpdateUserEmail(ctx, in, opts...)
}

// 修改用户登录手机号
func (m *defaultAccountRpc) UpdateUserPhone(ctx context.Context, in *UpdateUserPhoneReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.UpdateUserPhone(ctx, in, opts...)
}

// 修改用户状态
func (m *defaultAccountRpc) AdminUpdateUserStatus(ctx context.Context, in *AdminUpdateUserStatusReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.AdminUpdateUserStatus(ctx, in, opts...)
}

// 管理员重置用户密码
func (m *defaultAccountRpc) AdminResetUserPassword(ctx context.Context, in *AdminResetUserPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.AdminResetUserPassword(ctx, in, opts...)
}

// 查找用户列表
func (m *defaultAccountRpc) FindUserList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserListResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.FindUserList(ctx, in, opts...)
}

// 查找用户信息列表
func (m *defaultAccountRpc) FindUserInfoList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserInfoListResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.FindUserInfoList(ctx, in, opts...)
}

// 查找在线用户列表
func (m *defaultAccountRpc) FindUserOnlineList(ctx context.Context, in *FindUserListReq, opts ...grpc.CallOption) (*FindUserInfoListResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.FindUserOnlineList(ctx, in, opts...)
}

// 查询用户数量
func (m *defaultAccountRpc) AnalysisUser(ctx context.Context, in *AnalysisUserReq, opts ...grpc.CallOption) (*AnalysisUserResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.AnalysisUser(ctx, in, opts...)
}

// 查询用户分布区域
func (m *defaultAccountRpc) AnalysisUserAreas(ctx context.Context, in *AnalysisUserAreasReq, opts ...grpc.CallOption) (*AnalysisUserAreasResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.AnalysisUserAreas(ctx, in, opts...)
}

// 获取游客身份
func (m *defaultAccountRpc) GetTouristInfo(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetTouristInfoResp, error) {
	client := accountrpc.NewAccountRpcClient(m.cli.Conn())
	return client.GetTouristInfo(ctx, in, opts...)
}
