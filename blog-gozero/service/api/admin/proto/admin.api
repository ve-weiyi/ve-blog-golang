syntax = "v1"

import "admin/account.api"
import "admin/auth.api"
import "admin/user.api"
import "admin/api.api"
import "admin/menu.api"
import "admin/role.api"
import "admin/website.api"
import "admin/article.api"
import "admin/category.api"
import "admin/tag.api"
import "admin/friend.api"
import "admin/remark.api"
import "admin/page.api"
import "admin/photo.api"
import "admin/album.api"
import "admin/talk.api"
import "admin/comment.api"
import "admin/file.api"
import "admin/login_log.api"
import "admin/operation_log.api"
import "admin/visit_log.api"
import "admin/websocket.api"

info (
	title:                       "博客后台API"
	description:                 "博客后台API接口文档"
	version:                     "v3.5.1"
	contactName:                 "waynie.wei" // 技术支持联系人姓名
	contactEmail:                "791422171@qq.com" // 联系人邮箱
	contactURL:                  "https://github.com/ve-weiyi/ve-blog-golang" // 联系人相关链接
	termsOfService:              "https://github.com/ve-weiyi/ve-blog-golang" // API服务条款URL
	licenseName:                 "MIT" // 许可证类型(如 MIT/Apache 2.0/GPL等)
	licenseURL:                  "https://github.com/ve-weiyi/ve-blog-golang/main/LICENSE" // 许可证详情URL
	consumes:                    "application/json" // 默认请求内容类型，可配置多个用逗号分隔
	produces:                    "application/json" // 默认响应内容类型，可配置多个用逗号分隔
	schemes:                     "https" // 支持协议(http/https/ws/wss)，可配置多个
	host:                        "admin.veweiyi.com" // API服务主机地址(不带协议头)
	basePath:                    "" // API基础路径，所有接口都会添加此前缀
	wrapCodeMsg:                 true
	useDefinitions:              false
	bizCodeEnumDescription:      "1001-未登录<br>1002-无权限操作"
	securityDefinitionsFromJson: `{
	  "AppName": {"type": "apiKey", "name": "App-Name", "in": "header", "description": "应用名称，用于标识调用方"},
	  "Timestamp": {"type": "apiKey", "name": "Timestamp", "in": "header", "description": "时间戳，用于校验请求是否过期"},
	  "TerminalId": {"type": "apiKey", "name": "Terminal-Id", "in": "header", "description": "终端id，用于标识用户使用设备"},
	  "XTsToken": {"type": "apiKey", "name": "X-Ts-Token", "in": "header", "description": "游客token，使用时间戳和终端id生成"},
	  "Uid": {"type": "apiKey", "name": "Uid", "in": "header", "description": "用户id，用于标识用户"},
	  "Authorization": {"type": "apiKey", "name": "Authorization", "in": "header", "description": "授权token，用户登录凭证"}
	}`
)

type (
	PingReq  {}
	PingResp {
		Env         string   `json:"env"`
		Name        string   `json:"name"`
		Version     string   `json:"version"`
		Runtime     string   `json:"runtime"`
		Description string   `json:"description"`
		RpcStatus   []string `json:"rpc_status"`
	}
)

@server (
	prefix: /admin-api/v1
)
service admin-api {
	@doc "ping"
	@handler Ping
	get /ping (PingReq) returns (PingResp)
}

