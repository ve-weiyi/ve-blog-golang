syntax = "v1"

import "blog/auth.api"
import "blog/user.api"
import "blog/article.api"
import "blog/category.api"
import "blog/tag.api"
import "blog/website.api"
import "blog/album.api"
import "blog/talk.api"
import "blog/friend.api"
import "blog/comment.api"
import "blog/page.api"
import "blog/remark.api"
import "blog/file.api"
import "blog/websocket.api"

info(
    title: "博客前台API"
    description: "博客前台API接口文档"
    version: "v3.5.1"
    contactName: "waynie.wei" // 技术支持联系人姓名
    contactEmail: "791422171@qq.com" // 联系人邮箱
    contactURL: "https://github.com/ve-weiyi/ve-blog-golang" // 联系人相关链接
    termsOfService: "https://github.com/ve-weiyi/ve-blog-golang" // API服务条款URL
    licenseName: "MIT" // 许可证类型(如 MIT/Apache 2.0/GPL等)
    licenseURL: "https://github.com/ve-weiyi/ve-blog-golang/main/LICENSE" // 许可证详情URL
    consumes: "application/json" // 默认请求内容类型，可配置多个用逗号分隔
    produces: "application/json" // 默认响应内容类型，可配置多个用逗号分隔
    schemes: "https" // 支持协议(http/https/ws/wss)，可配置多个
    host: "blog.veweiyi.com" // API服务主机地址(不带协议头)
    basePath: "" // API基础路径，所有接口都会添加此前缀
	wrapCodeMsg:                 true
	useDefinitions:              false
    bizCodeEnumDescription: "1001-未登录<br>1002-无权限操作"
	securityDefinitionsFromJson: `{
	  "AppName": {"type": "apiKey", "name": "App-Name", "in": "header", "description": "应用名称，用于标识调用方"},
	  "Timestamp": {"type": "apiKey", "name": "Timestamp", "in": "header", "description": "时间戳，用于校验请求是否过期"},
	  "TerminalId": {"type": "apiKey", "name": "Terminal-Id", "in": "header", "description": "终端id，用于标识用户使用设备"},
	  "XTsToken": {"type": "apiKey", "name": "X-Ts-Token", "in": "header", "description": "游客token，使用时间戳和终端id生成"},
	  "Uid": {"type": "apiKey", "name": "Uid", "in": "header", "description": "用户id，用于标识用户"},
	  "Token": {"type": "apiKey", "name": "Token", "in": "header", "description": "token，用户登录凭证"}
	}
	`
)

type (
    PingReq{
    }
	PingResp {
        Env string `json:"env"`
        Name string `json:"name"`
        Version string `json:"version"`
        Runtime string `json:"runtime"`
        Description string `json:"description"`
        RpcStatus []string `json:"rpc_status"`
	}
)

@server(
	prefix: /blog-api/v1
)
service blog-api {
	@doc "ping"
	@handler Ping
	get /ping (PingReq) returns (PingResp)
}

