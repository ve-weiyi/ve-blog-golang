// Code generated by goctl. DO NOT EDIT.
// Source: config.proto

package configrpc

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/gozero/service/rpc/blog/internal/pb/configrpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	EmptyReq       = configrpc.EmptyReq
	EmptyResp      = configrpc.EmptyResp
	FindConfigReq  = configrpc.FindConfigReq
	FindConfigResp = configrpc.FindConfigResp
	IdReq          = configrpc.IdReq
	IdsReq         = configrpc.IdsReq
	SaveConfigReq  = configrpc.SaveConfigReq
	SaveConfigResp = configrpc.SaveConfigResp

	ConfigRpc interface {
		// 保存配置
		SaveConfig(ctx context.Context, in *SaveConfigReq, opts ...grpc.CallOption) (*SaveConfigResp, error)
		// 查询配置
		FindConfig(ctx context.Context, in *FindConfigReq, opts ...grpc.CallOption) (*FindConfigResp, error)
	}

	defaultConfigRpc struct {
		cli zrpc.Client
	}
)

func NewConfigRpc(cli zrpc.Client) ConfigRpc {
	return &defaultConfigRpc{
		cli: cli,
	}
}

// 保存配置
func (m *defaultConfigRpc) SaveConfig(ctx context.Context, in *SaveConfigReq, opts ...grpc.CallOption) (*SaveConfigResp, error) {
	client := configrpc.NewConfigRpcClient(m.cli.Conn())
	return client.SaveConfig(ctx, in, opts...)
}

// 查询配置
func (m *defaultConfigRpc) FindConfig(ctx context.Context, in *FindConfigReq, opts ...grpc.CallOption) (*FindConfigResp, error) {
	client := configrpc.NewConfigRpcClient(m.cli.Conn())
	return client.FindConfig(ctx, in, opts...)
}
