// Code generated by goctl. DO NOT EDIT.
// Source: article.proto

package articlerpc

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/gozero/service/rpc/blog/internal/pb/articlerpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AnalysisArticleResp        = articlerpc.AnalysisArticleResp
	ArticleCategory            = articlerpc.ArticleCategory
	ArticleDetails             = articlerpc.ArticleDetails
	ArticleNewReq              = articlerpc.ArticleNewReq
	ArticlePreview             = articlerpc.ArticlePreview
	ArticleRecommendResp       = articlerpc.ArticleRecommendResp
	ArticleTag                 = articlerpc.ArticleTag
	BatchResp                  = articlerpc.BatchResp
	CategoryDetails            = articlerpc.CategoryDetails
	CategoryNewReq             = articlerpc.CategoryNewReq
	CountResp                  = articlerpc.CountResp
	EmptyReq                   = articlerpc.EmptyReq
	EmptyResp                  = articlerpc.EmptyResp
	FindArticleListReq         = articlerpc.FindArticleListReq
	FindArticleListResp        = articlerpc.FindArticleListResp
	FindArticlePreviewListReq  = articlerpc.FindArticlePreviewListReq
	FindArticlePreviewListResp = articlerpc.FindArticlePreviewListResp
	FindCategoryListReq        = articlerpc.FindCategoryListReq
	FindCategoryListResp       = articlerpc.FindCategoryListResp
	FindLikeArticleResp        = articlerpc.FindLikeArticleResp
	FindTagListReq             = articlerpc.FindTagListReq
	FindTagListResp            = articlerpc.FindTagListResp
	IdReq                      = articlerpc.IdReq
	IdsReq                     = articlerpc.IdsReq
	RecycleArticleReq          = articlerpc.RecycleArticleReq
	TagDetails                 = articlerpc.TagDetails
	TagNewReq                  = articlerpc.TagNewReq
	TopArticleReq              = articlerpc.TopArticleReq
	UserIdReq                  = articlerpc.UserIdReq

	ArticleRpc interface {
		// 创建文章
		AddArticle(ctx context.Context, in *ArticleNewReq, opts ...grpc.CallOption) (*ArticleDetails, error)
		// 更新文章
		UpdateArticle(ctx context.Context, in *ArticleNewReq, opts ...grpc.CallOption) (*ArticleDetails, error)
		// 删除文章
		DeleteArticle(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
		// 查询文章列表
		FindArticleList(ctx context.Context, in *FindArticleListReq, opts ...grpc.CallOption) (*FindArticleListResp, error)
		// 查询文章列表
		FindArticlePublicList(ctx context.Context, in *FindArticleListReq, opts ...grpc.CallOption) (*FindArticleListResp, error)
		// 查询文章列表
		FindArticlePreviewList(ctx context.Context, in *FindArticlePreviewListReq, opts ...grpc.CallOption) (*FindArticlePreviewListResp, error)
		// 回收文章
		RecycleArticle(ctx context.Context, in *RecycleArticleReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 置顶文章
		TopArticle(ctx context.Context, in *TopArticleReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 查询文章
		GetArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ArticleDetails, error)
		// 查询文章推荐
		GetArticleRecommend(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ArticleRecommendResp, error)
		// 点赞文章
		LikeArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 用户点赞的文章
		FindUserLikeArticle(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindLikeArticleResp, error)
		// 查询文章数量
		AnalysisArticle(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*AnalysisArticleResp, error)
		// 创建文章分类
		AddCategory(ctx context.Context, in *CategoryNewReq, opts ...grpc.CallOption) (*CategoryDetails, error)
		// 更新文章分类
		UpdateCategory(ctx context.Context, in *CategoryNewReq, opts ...grpc.CallOption) (*CategoryDetails, error)
		// 查询文章分类
		GetCategory(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*CategoryDetails, error)
		// 删除文章分类
		DeleteCategory(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
		// 查询文章分类列表
		FindCategoryList(ctx context.Context, in *FindCategoryListReq, opts ...grpc.CallOption) (*FindCategoryListResp, error)
		// 创建标签
		AddTag(ctx context.Context, in *TagNewReq, opts ...grpc.CallOption) (*TagDetails, error)
		// 更新标签
		UpdateTag(ctx context.Context, in *TagNewReq, opts ...grpc.CallOption) (*TagDetails, error)
		// 查询标签
		GetTag(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*TagDetails, error)
		// 删除标签
		DeleteTag(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
		// 查询标签列表
		FindTagList(ctx context.Context, in *FindTagListReq, opts ...grpc.CallOption) (*FindTagListResp, error)
	}

	defaultArticleRpc struct {
		cli zrpc.Client
	}
)

func NewArticleRpc(cli zrpc.Client) ArticleRpc {
	return &defaultArticleRpc{
		cli: cli,
	}
}

// 创建文章
func (m *defaultArticleRpc) AddArticle(ctx context.Context, in *ArticleNewReq, opts ...grpc.CallOption) (*ArticleDetails, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.AddArticle(ctx, in, opts...)
}

// 更新文章
func (m *defaultArticleRpc) UpdateArticle(ctx context.Context, in *ArticleNewReq, opts ...grpc.CallOption) (*ArticleDetails, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.UpdateArticle(ctx, in, opts...)
}

// 删除文章
func (m *defaultArticleRpc) DeleteArticle(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.DeleteArticle(ctx, in, opts...)
}

// 查询文章列表
func (m *defaultArticleRpc) FindArticleList(ctx context.Context, in *FindArticleListReq, opts ...grpc.CallOption) (*FindArticleListResp, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.FindArticleList(ctx, in, opts...)
}

// 查询文章列表
func (m *defaultArticleRpc) FindArticlePublicList(ctx context.Context, in *FindArticleListReq, opts ...grpc.CallOption) (*FindArticleListResp, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.FindArticlePublicList(ctx, in, opts...)
}

// 查询文章列表
func (m *defaultArticleRpc) FindArticlePreviewList(ctx context.Context, in *FindArticlePreviewListReq, opts ...grpc.CallOption) (*FindArticlePreviewListResp, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.FindArticlePreviewList(ctx, in, opts...)
}

// 回收文章
func (m *defaultArticleRpc) RecycleArticle(ctx context.Context, in *RecycleArticleReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.RecycleArticle(ctx, in, opts...)
}

// 置顶文章
func (m *defaultArticleRpc) TopArticle(ctx context.Context, in *TopArticleReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.TopArticle(ctx, in, opts...)
}

// 查询文章
func (m *defaultArticleRpc) GetArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ArticleDetails, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.GetArticle(ctx, in, opts...)
}

// 查询文章推荐
func (m *defaultArticleRpc) GetArticleRecommend(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ArticleRecommendResp, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.GetArticleRecommend(ctx, in, opts...)
}

// 点赞文章
func (m *defaultArticleRpc) LikeArticle(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.LikeArticle(ctx, in, opts...)
}

// 用户点赞的文章
func (m *defaultArticleRpc) FindUserLikeArticle(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*FindLikeArticleResp, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.FindUserLikeArticle(ctx, in, opts...)
}

// 查询文章数量
func (m *defaultArticleRpc) AnalysisArticle(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*AnalysisArticleResp, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.AnalysisArticle(ctx, in, opts...)
}

// 创建文章分类
func (m *defaultArticleRpc) AddCategory(ctx context.Context, in *CategoryNewReq, opts ...grpc.CallOption) (*CategoryDetails, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.AddCategory(ctx, in, opts...)
}

// 更新文章分类
func (m *defaultArticleRpc) UpdateCategory(ctx context.Context, in *CategoryNewReq, opts ...grpc.CallOption) (*CategoryDetails, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.UpdateCategory(ctx, in, opts...)
}

// 查询文章分类
func (m *defaultArticleRpc) GetCategory(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*CategoryDetails, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.GetCategory(ctx, in, opts...)
}

// 删除文章分类
func (m *defaultArticleRpc) DeleteCategory(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.DeleteCategory(ctx, in, opts...)
}

// 查询文章分类列表
func (m *defaultArticleRpc) FindCategoryList(ctx context.Context, in *FindCategoryListReq, opts ...grpc.CallOption) (*FindCategoryListResp, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.FindCategoryList(ctx, in, opts...)
}

// 创建标签
func (m *defaultArticleRpc) AddTag(ctx context.Context, in *TagNewReq, opts ...grpc.CallOption) (*TagDetails, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.AddTag(ctx, in, opts...)
}

// 更新标签
func (m *defaultArticleRpc) UpdateTag(ctx context.Context, in *TagNewReq, opts ...grpc.CallOption) (*TagDetails, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.UpdateTag(ctx, in, opts...)
}

// 查询标签
func (m *defaultArticleRpc) GetTag(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*TagDetails, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.GetTag(ctx, in, opts...)
}

// 删除标签
func (m *defaultArticleRpc) DeleteTag(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.DeleteTag(ctx, in, opts...)
}

// 查询标签列表
func (m *defaultArticleRpc) FindTagList(ctx context.Context, in *FindTagListReq, opts ...grpc.CallOption) (*FindTagListResp, error) {
	client := articlerpc.NewArticleRpcClient(m.cli.Conn())
	return client.FindTagList(ctx, in, opts...)
}
