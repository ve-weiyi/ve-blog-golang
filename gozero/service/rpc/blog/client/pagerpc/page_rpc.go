// Code generated by goctl. DO NOT EDIT.
// Source: page.proto

package pagerpc

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/gozero/service/rpc/blog/internal/pb/pagerpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchResp        = pagerpc.BatchResp
	CountResp        = pagerpc.CountResp
	EmptyReq         = pagerpc.EmptyReq
	EmptyResp        = pagerpc.EmptyResp
	FindPageListReq  = pagerpc.FindPageListReq
	FindPageListResp = pagerpc.FindPageListResp
	IdReq            = pagerpc.IdReq
	IdsReq           = pagerpc.IdsReq
	PageDetails      = pagerpc.PageDetails
	PageNewReq       = pagerpc.PageNewReq
	UserIdReq        = pagerpc.UserIdReq

	PageRpc interface {
		// 创建页面
		AddPage(ctx context.Context, in *PageNewReq, opts ...grpc.CallOption) (*PageDetails, error)
		// 更新页面
		UpdatePage(ctx context.Context, in *PageNewReq, opts ...grpc.CallOption) (*PageDetails, error)
		// 删除页面
		DeletePage(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error)
		// 查询页面列表
		FindPageList(ctx context.Context, in *FindPageListReq, opts ...grpc.CallOption) (*FindPageListResp, error)
	}

	defaultPageRpc struct {
		cli zrpc.Client
	}
)

func NewPageRpc(cli zrpc.Client) PageRpc {
	return &defaultPageRpc{
		cli: cli,
	}
}

// 创建页面
func (m *defaultPageRpc) AddPage(ctx context.Context, in *PageNewReq, opts ...grpc.CallOption) (*PageDetails, error) {
	client := pagerpc.NewPageRpcClient(m.cli.Conn())
	return client.AddPage(ctx, in, opts...)
}

// 更新页面
func (m *defaultPageRpc) UpdatePage(ctx context.Context, in *PageNewReq, opts ...grpc.CallOption) (*PageDetails, error) {
	client := pagerpc.NewPageRpcClient(m.cli.Conn())
	return client.UpdatePage(ctx, in, opts...)
}

// 删除页面
func (m *defaultPageRpc) DeletePage(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResp, error) {
	client := pagerpc.NewPageRpcClient(m.cli.Conn())
	return client.DeletePage(ctx, in, opts...)
}

// 查询页面列表
func (m *defaultPageRpc) FindPageList(ctx context.Context, in *FindPageListReq, opts ...grpc.CallOption) (*FindPageListResp, error) {
	client := pagerpc.NewPageRpcClient(m.cli.Conn())
	return client.FindPageList(ctx, in, opts...)
}
