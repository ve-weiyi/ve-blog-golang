// 声明 proto 语法版本，固定值

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: config.proto

// proto 包名

package configrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConfigRpc_SaveConfig_FullMethodName = "/configrpc.ConfigRpc/SaveConfig"
	ConfigRpc_FindConfig_FullMethodName = "/configrpc.ConfigRpc/FindConfig"
)

// ConfigRpcClient is the client API for ConfigRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigRpcClient interface {
	// 保存配置
	SaveConfig(ctx context.Context, in *SaveConfigReq, opts ...grpc.CallOption) (*SaveConfigResp, error)
	// 查询配置
	FindConfig(ctx context.Context, in *FindConfigReq, opts ...grpc.CallOption) (*FindConfigResp, error)
}

type configRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigRpcClient(cc grpc.ClientConnInterface) ConfigRpcClient {
	return &configRpcClient{cc}
}

func (c *configRpcClient) SaveConfig(ctx context.Context, in *SaveConfigReq, opts ...grpc.CallOption) (*SaveConfigResp, error) {
	out := new(SaveConfigResp)
	err := c.cc.Invoke(ctx, ConfigRpc_SaveConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configRpcClient) FindConfig(ctx context.Context, in *FindConfigReq, opts ...grpc.CallOption) (*FindConfigResp, error) {
	out := new(FindConfigResp)
	err := c.cc.Invoke(ctx, ConfigRpc_FindConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigRpcServer is the server API for ConfigRpc service.
// All implementations must embed UnimplementedConfigRpcServer
// for forward compatibility
type ConfigRpcServer interface {
	// 保存配置
	SaveConfig(context.Context, *SaveConfigReq) (*SaveConfigResp, error)
	// 查询配置
	FindConfig(context.Context, *FindConfigReq) (*FindConfigResp, error)
	mustEmbedUnimplementedConfigRpcServer()
}

// UnimplementedConfigRpcServer must be embedded to have forward compatible implementations.
type UnimplementedConfigRpcServer struct {
}

func (UnimplementedConfigRpcServer) SaveConfig(context.Context, *SaveConfigReq) (*SaveConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveConfig not implemented")
}
func (UnimplementedConfigRpcServer) FindConfig(context.Context, *FindConfigReq) (*FindConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindConfig not implemented")
}
func (UnimplementedConfigRpcServer) mustEmbedUnimplementedConfigRpcServer() {}

// UnsafeConfigRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigRpcServer will
// result in compilation errors.
type UnsafeConfigRpcServer interface {
	mustEmbedUnimplementedConfigRpcServer()
}

func RegisterConfigRpcServer(s grpc.ServiceRegistrar, srv ConfigRpcServer) {
	s.RegisterService(&ConfigRpc_ServiceDesc, srv)
}

func _ConfigRpc_SaveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigRpcServer).SaveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigRpc_SaveConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigRpcServer).SaveConfig(ctx, req.(*SaveConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigRpc_FindConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigRpcServer).FindConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigRpc_FindConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigRpcServer).FindConfig(ctx, req.(*FindConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigRpc_ServiceDesc is the grpc.ServiceDesc for ConfigRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "configrpc.ConfigRpc",
	HandlerType: (*ConfigRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveConfig",
			Handler:    _ConfigRpc_SaveConfig_Handler,
		},
		{
			MethodName: "FindConfig",
			Handler:    _ConfigRpc_FindConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}
