// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: article.proto

package server

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/gozero/service/rpc/blog/internal/logic/articlerpc"
	"github.com/ve-weiyi/ve-blog-golang/gozero/service/rpc/blog/internal/pb/articlerpc"
	"github.com/ve-weiyi/ve-blog-golang/gozero/service/rpc/blog/internal/svc"
)

type ArticleRpcServer struct {
	svcCtx *svc.ServiceContext
	articlerpc.UnimplementedArticleRpcServer
}

func NewArticleRpcServer(svcCtx *svc.ServiceContext) *ArticleRpcServer {
	return &ArticleRpcServer{
		svcCtx: svcCtx,
	}
}

// 分析文章数量
func (s *ArticleRpcServer) AnalysisArticle(ctx context.Context, in *articlerpc.EmptyReq) (*articlerpc.AnalysisArticleResp, error) {
	l := articlerpclogic.NewAnalysisArticleLogic(ctx, s.svcCtx)
	return l.AnalysisArticle(in)
}

// 访问文章
func (s *ArticleRpcServer) VisitArticle(ctx context.Context, in *articlerpc.IdReq) (*articlerpc.CountResp, error) {
	l := articlerpclogic.NewVisitArticleLogic(ctx, s.svcCtx)
	return l.VisitArticle(in)
}

// 创建文章
func (s *ArticleRpcServer) AddArticle(ctx context.Context, in *articlerpc.ArticleNewReq) (*articlerpc.ArticlePreview, error) {
	l := articlerpclogic.NewAddArticleLogic(ctx, s.svcCtx)
	return l.AddArticle(in)
}

// 更新文章
func (s *ArticleRpcServer) UpdateArticle(ctx context.Context, in *articlerpc.ArticleNewReq) (*articlerpc.ArticlePreview, error) {
	l := articlerpclogic.NewUpdateArticleLogic(ctx, s.svcCtx)
	return l.UpdateArticle(in)
}

// 更新文章删除
func (s *ArticleRpcServer) UpdateArticleDelete(ctx context.Context, in *articlerpc.UpdateArticleDeleteReq) (*articlerpc.ArticlePreview, error) {
	l := articlerpclogic.NewUpdateArticleDeleteLogic(ctx, s.svcCtx)
	return l.UpdateArticleDelete(in)
}

// 更新文章置顶
func (s *ArticleRpcServer) UpdateArticleTop(ctx context.Context, in *articlerpc.UpdateArticleTopReq) (*articlerpc.ArticlePreview, error) {
	l := articlerpclogic.NewUpdateArticleTopLogic(ctx, s.svcCtx)
	return l.UpdateArticleTop(in)
}

// 删除文章
func (s *ArticleRpcServer) DeleteArticle(ctx context.Context, in *articlerpc.IdsReq) (*articlerpc.BatchResp, error) {
	l := articlerpclogic.NewDeleteArticleLogic(ctx, s.svcCtx)
	return l.DeleteArticle(in)
}

// 查询文章
func (s *ArticleRpcServer) GetArticle(ctx context.Context, in *articlerpc.IdReq) (*articlerpc.ArticleDetails, error) {
	l := articlerpclogic.NewGetArticleLogic(ctx, s.svcCtx)
	return l.GetArticle(in)
}

// 查询关联文章
func (s *ArticleRpcServer) GetArticleRelation(ctx context.Context, in *articlerpc.IdReq) (*articlerpc.GetArticleRelationResp, error) {
	l := articlerpclogic.NewGetArticleRelationLogic(ctx, s.svcCtx)
	return l.GetArticleRelation(in)
}

// 查询文章列表
func (s *ArticleRpcServer) FindArticleList(ctx context.Context, in *articlerpc.FindArticleListReq) (*articlerpc.FindArticleListResp, error) {
	l := articlerpclogic.NewFindArticleListLogic(ctx, s.svcCtx)
	return l.FindArticleList(in)
}

// 查询文章列表
func (s *ArticleRpcServer) FindArticlePreviewList(ctx context.Context, in *articlerpc.FindArticleListReq) (*articlerpc.FindArticlePreviewListResp, error) {
	l := articlerpclogic.NewFindArticlePreviewListLogic(ctx, s.svcCtx)
	return l.FindArticlePreviewList(in)
}

// 点赞文章
func (s *ArticleRpcServer) LikeArticle(ctx context.Context, in *articlerpc.IdReq) (*articlerpc.EmptyResp, error) {
	l := articlerpclogic.NewLikeArticleLogic(ctx, s.svcCtx)
	return l.LikeArticle(in)
}

// 用户点赞的文章
func (s *ArticleRpcServer) FindUserLikeArticle(ctx context.Context, in *articlerpc.UserIdReq) (*articlerpc.FindLikeArticleResp, error) {
	l := articlerpclogic.NewFindUserLikeArticleLogic(ctx, s.svcCtx)
	return l.FindUserLikeArticle(in)
}

// 创建文章分类
func (s *ArticleRpcServer) AddCategory(ctx context.Context, in *articlerpc.CategoryNewReq) (*articlerpc.CategoryDetails, error) {
	l := articlerpclogic.NewAddCategoryLogic(ctx, s.svcCtx)
	return l.AddCategory(in)
}

// 更新文章分类
func (s *ArticleRpcServer) UpdateCategory(ctx context.Context, in *articlerpc.CategoryNewReq) (*articlerpc.CategoryDetails, error) {
	l := articlerpclogic.NewUpdateCategoryLogic(ctx, s.svcCtx)
	return l.UpdateCategory(in)
}

// 查询文章分类
func (s *ArticleRpcServer) GetCategory(ctx context.Context, in *articlerpc.IdReq) (*articlerpc.CategoryDetails, error) {
	l := articlerpclogic.NewGetCategoryLogic(ctx, s.svcCtx)
	return l.GetCategory(in)
}

// 删除文章分类
func (s *ArticleRpcServer) DeleteCategory(ctx context.Context, in *articlerpc.IdsReq) (*articlerpc.BatchResp, error) {
	l := articlerpclogic.NewDeleteCategoryLogic(ctx, s.svcCtx)
	return l.DeleteCategory(in)
}

// 查询文章分类列表
func (s *ArticleRpcServer) FindCategoryList(ctx context.Context, in *articlerpc.FindCategoryListReq) (*articlerpc.FindCategoryListResp, error) {
	l := articlerpclogic.NewFindCategoryListLogic(ctx, s.svcCtx)
	return l.FindCategoryList(in)
}

// 创建标签
func (s *ArticleRpcServer) AddTag(ctx context.Context, in *articlerpc.TagNewReq) (*articlerpc.TagDetails, error) {
	l := articlerpclogic.NewAddTagLogic(ctx, s.svcCtx)
	return l.AddTag(in)
}

// 更新标签
func (s *ArticleRpcServer) UpdateTag(ctx context.Context, in *articlerpc.TagNewReq) (*articlerpc.TagDetails, error) {
	l := articlerpclogic.NewUpdateTagLogic(ctx, s.svcCtx)
	return l.UpdateTag(in)
}

// 查询标签
func (s *ArticleRpcServer) GetTag(ctx context.Context, in *articlerpc.IdReq) (*articlerpc.TagDetails, error) {
	l := articlerpclogic.NewGetTagLogic(ctx, s.svcCtx)
	return l.GetTag(in)
}

// 删除标签
func (s *ArticleRpcServer) DeleteTag(ctx context.Context, in *articlerpc.IdsReq) (*articlerpc.BatchResp, error) {
	l := articlerpclogic.NewDeleteTagLogic(ctx, s.svcCtx)
	return l.DeleteTag(in)
}

// 查询标签列表
func (s *ArticleRpcServer) FindTagList(ctx context.Context, in *articlerpc.FindTagListReq) (*articlerpc.FindTagListResp, error) {
	l := articlerpclogic.NewFindTagListLogic(ctx, s.svcCtx)
	return l.FindTagList(in)
}
