// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: permission.proto

package server

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/gozero/service/rpc/blog/internal/logic/permissionrpc"
	"github.com/ve-weiyi/ve-blog-golang/gozero/service/rpc/blog/internal/pb/permissionrpc"
	"github.com/ve-weiyi/ve-blog-golang/gozero/service/rpc/blog/internal/svc"
)

type PermissionRpcServer struct {
	svcCtx *svc.ServiceContext
	permissionrpc.UnimplementedPermissionRpcServer
}

func NewPermissionRpcServer(svcCtx *svc.ServiceContext) *PermissionRpcServer {
	return &PermissionRpcServer{
		svcCtx: svcCtx,
	}
}

// 创建接口
func (s *PermissionRpcServer) AddApi(ctx context.Context, in *permissionrpc.ApiNewReq) (*permissionrpc.ApiDetails, error) {
	l := permissionrpclogic.NewAddApiLogic(ctx, s.svcCtx)
	return l.AddApi(in)
}

// 更新接口
func (s *PermissionRpcServer) UpdateApi(ctx context.Context, in *permissionrpc.ApiNewReq) (*permissionrpc.ApiDetails, error) {
	l := permissionrpclogic.NewUpdateApiLogic(ctx, s.svcCtx)
	return l.UpdateApi(in)
}

// 删除接口
func (s *PermissionRpcServer) DeleteApi(ctx context.Context, in *permissionrpc.IdsReq) (*permissionrpc.BatchResp, error) {
	l := permissionrpclogic.NewDeleteApiLogic(ctx, s.svcCtx)
	return l.DeleteApi(in)
}

// 查询接口列表
func (s *PermissionRpcServer) FindApiList(ctx context.Context, in *permissionrpc.FindApiListReq) (*permissionrpc.FindApiListResp, error) {
	l := permissionrpclogic.NewFindApiListLogic(ctx, s.svcCtx)
	return l.FindApiList(in)
}

// 同步接口列表
func (s *PermissionRpcServer) SyncApiList(ctx context.Context, in *permissionrpc.SyncApiReq) (*permissionrpc.BatchResp, error) {
	l := permissionrpclogic.NewSyncApiListLogic(ctx, s.svcCtx)
	return l.SyncApiList(in)
}

// 清空接口列表
func (s *PermissionRpcServer) CleanApiList(ctx context.Context, in *permissionrpc.EmptyReq) (*permissionrpc.BatchResp, error) {
	l := permissionrpclogic.NewCleanApiListLogic(ctx, s.svcCtx)
	return l.CleanApiList(in)
}

// 查找所有接口
func (s *PermissionRpcServer) FindAllApi(ctx context.Context, in *permissionrpc.EmptyReq) (*permissionrpc.FindApiListResp, error) {
	l := permissionrpclogic.NewFindAllApiLogic(ctx, s.svcCtx)
	return l.FindAllApi(in)
}

// 创建菜单
func (s *PermissionRpcServer) AddMenu(ctx context.Context, in *permissionrpc.MenuNewReq) (*permissionrpc.MenuDetails, error) {
	l := permissionrpclogic.NewAddMenuLogic(ctx, s.svcCtx)
	return l.AddMenu(in)
}

// 更新菜单
func (s *PermissionRpcServer) UpdateMenu(ctx context.Context, in *permissionrpc.MenuNewReq) (*permissionrpc.MenuDetails, error) {
	l := permissionrpclogic.NewUpdateMenuLogic(ctx, s.svcCtx)
	return l.UpdateMenu(in)
}

// 删除菜单
func (s *PermissionRpcServer) DeleteMenu(ctx context.Context, in *permissionrpc.IdsReq) (*permissionrpc.BatchResp, error) {
	l := permissionrpclogic.NewDeleteMenuLogic(ctx, s.svcCtx)
	return l.DeleteMenu(in)
}

// 查询菜单列表
func (s *PermissionRpcServer) FindMenuList(ctx context.Context, in *permissionrpc.FindMenuListReq) (*permissionrpc.FindMenuListResp, error) {
	l := permissionrpclogic.NewFindMenuListLogic(ctx, s.svcCtx)
	return l.FindMenuList(in)
}

// 同步菜单列表
func (s *PermissionRpcServer) SyncMenuList(ctx context.Context, in *permissionrpc.SyncMenuReq) (*permissionrpc.BatchResp, error) {
	l := permissionrpclogic.NewSyncMenuListLogic(ctx, s.svcCtx)
	return l.SyncMenuList(in)
}

// 清空菜单列表
func (s *PermissionRpcServer) CleanMenuList(ctx context.Context, in *permissionrpc.EmptyReq) (*permissionrpc.BatchResp, error) {
	l := permissionrpclogic.NewCleanMenuListLogic(ctx, s.svcCtx)
	return l.CleanMenuList(in)
}

// 查找所有菜单
func (s *PermissionRpcServer) FindAllMenu(ctx context.Context, in *permissionrpc.EmptyReq) (*permissionrpc.FindMenuListResp, error) {
	l := permissionrpclogic.NewFindAllMenuLogic(ctx, s.svcCtx)
	return l.FindAllMenu(in)
}

// 创建角色
func (s *PermissionRpcServer) AddRole(ctx context.Context, in *permissionrpc.RoleNewReq) (*permissionrpc.RoleDetails, error) {
	l := permissionrpclogic.NewAddRoleLogic(ctx, s.svcCtx)
	return l.AddRole(in)
}

// 更新角色
func (s *PermissionRpcServer) UpdateRole(ctx context.Context, in *permissionrpc.RoleNewReq) (*permissionrpc.RoleDetails, error) {
	l := permissionrpclogic.NewUpdateRoleLogic(ctx, s.svcCtx)
	return l.UpdateRole(in)
}

// 删除角色
func (s *PermissionRpcServer) DeleteRole(ctx context.Context, in *permissionrpc.IdsReq) (*permissionrpc.BatchResp, error) {
	l := permissionrpclogic.NewDeleteRoleLogic(ctx, s.svcCtx)
	return l.DeleteRole(in)
}

// 查询角色列表
func (s *PermissionRpcServer) FindRoleList(ctx context.Context, in *permissionrpc.FindRoleListReq) (*permissionrpc.FindRoleListResp, error) {
	l := permissionrpclogic.NewFindRoleListLogic(ctx, s.svcCtx)
	return l.FindRoleList(in)
}

// 更新角色菜单
func (s *PermissionRpcServer) UpdateRoleMenus(ctx context.Context, in *permissionrpc.UpdateRoleMenusReq) (*permissionrpc.EmptyResp, error) {
	l := permissionrpclogic.NewUpdateRoleMenusLogic(ctx, s.svcCtx)
	return l.UpdateRoleMenus(in)
}

// 更新角色资源
func (s *PermissionRpcServer) UpdateRoleApis(ctx context.Context, in *permissionrpc.UpdateRoleApisReq) (*permissionrpc.EmptyResp, error) {
	l := permissionrpclogic.NewUpdateRoleApisLogic(ctx, s.svcCtx)
	return l.UpdateRoleApis(in)
}

// 查询角色资源权限
func (s *PermissionRpcServer) FindRoleResources(ctx context.Context, in *permissionrpc.IdReq) (*permissionrpc.RoleResourcesResp, error) {
	l := permissionrpclogic.NewFindRoleResourcesLogic(ctx, s.svcCtx)
	return l.FindRoleResources(in)
}

// 修改用户角色
func (s *PermissionRpcServer) UpdateUserRole(ctx context.Context, in *permissionrpc.UpdateUserRoleReq) (*permissionrpc.EmptyResp, error) {
	l := permissionrpclogic.NewUpdateUserRoleLogic(ctx, s.svcCtx)
	return l.UpdateUserRole(in)
}

// 获取用户接口权限
func (s *PermissionRpcServer) FindUserApis(ctx context.Context, in *permissionrpc.UserIdReq) (*permissionrpc.FindApiListResp, error) {
	l := permissionrpclogic.NewFindUserApisLogic(ctx, s.svcCtx)
	return l.FindUserApis(in)
}

// 获取用户菜单权限
func (s *PermissionRpcServer) FindUserMenus(ctx context.Context, in *permissionrpc.UserIdReq) (*permissionrpc.FindMenuListResp, error) {
	l := permissionrpclogic.NewFindUserMenusLogic(ctx, s.svcCtx)
	return l.FindUserMenus(in)
}

// 获取用户角色信息
func (s *PermissionRpcServer) FindUserRoles(ctx context.Context, in *permissionrpc.UserIdReq) (*permissionrpc.FindRoleListResp, error) {
	l := permissionrpclogic.NewFindUserRolesLogic(ctx, s.svcCtx)
	return l.FindUserRoles(in)
}
