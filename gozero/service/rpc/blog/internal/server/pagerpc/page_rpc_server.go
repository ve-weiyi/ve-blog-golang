// Code generated by goctl. DO NOT EDIT.
// Source: page.proto

package server

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/gozero/service/rpc/blog/internal/logic/pagerpc"
	"github.com/ve-weiyi/ve-blog-golang/gozero/service/rpc/blog/internal/pb/pagerpc"
	"github.com/ve-weiyi/ve-blog-golang/gozero/service/rpc/blog/internal/svc"
)

type PageRpcServer struct {
	svcCtx *svc.ServiceContext
	pagerpc.UnimplementedPageRpcServer
}

func NewPageRpcServer(svcCtx *svc.ServiceContext) *PageRpcServer {
	return &PageRpcServer{
		svcCtx: svcCtx,
	}
}

// 创建页面
func (s *PageRpcServer) AddPage(ctx context.Context, in *pagerpc.PageNewReq) (*pagerpc.PageDetails, error) {
	l := pagerpclogic.NewAddPageLogic(ctx, s.svcCtx)
	return l.AddPage(in)
}

// 更新页面
func (s *PageRpcServer) UpdatePage(ctx context.Context, in *pagerpc.PageNewReq) (*pagerpc.PageDetails, error) {
	l := pagerpclogic.NewUpdatePageLogic(ctx, s.svcCtx)
	return l.UpdatePage(in)
}

// 删除页面
func (s *PageRpcServer) DeletePage(ctx context.Context, in *pagerpc.IdsReq) (*pagerpc.BatchResp, error) {
	l := pagerpclogic.NewDeletePageLogic(ctx, s.svcCtx)
	return l.DeletePage(in)
}

// 查询页面列表
func (s *PageRpcServer) FindPageList(ctx context.Context, in *pagerpc.FindPageListReq) (*pagerpc.FindPageListResp, error) {
	l := pagerpclogic.NewFindPageListLogic(ctx, s.svcCtx)
	return l.FindPageList(in)
}
