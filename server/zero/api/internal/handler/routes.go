// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	account "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/account"
	ai "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/ai"
	api "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/api"
	article "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/article"
	auth "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/auth"
	captcha "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/captcha"
	comment "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/comment"
	friend_link "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/friend_link"
	menu "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/menu"
	operation_log "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/operation_log"
	page "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/page"
	photo "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/photo"
	photo_album "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/photo_album"
	remark "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/remark"
	role "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/role"
	tag "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/tag"
	talk "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/talk"
	upload "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/upload"
	website "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/website"
	websocket "github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/handler/websocket"
	"github.com/ve-weiyi/ve-blog-golang/server/zero/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/ping",
				Handler: PingHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/user/list",
				Handler: account.FindUserListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/user/online_list",
				Handler: account.FindOnlineUserListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/user/areas",
				Handler: account.FindUserAreasHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/user/update_status",
				Handler: account.UpdateUserStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/user/update_roles",
				Handler: account.UpdateUserRolesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/user/login_history",
				Handler: account.FindUserLoginHistoryListHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/user/login_history/batch_delete",
				Handler: account.DeleteUserLoginHistoryListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/user/menus",
				Handler: account.GetUserMenusHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/user/apis",
				Handler: account.GetUserApisHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/user/info",
				Handler: account.GetUserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/user/info",
				Handler: account.UpdateUserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/user/avatar",
				Handler: account.UpdateUserAvatarHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/api/create_api",
				Handler: api.CreateApiHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/api/update_api",
				Handler: api.UpdateApiHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/api/delete_api",
				Handler: api.DeleteApiHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/api/find_api",
				Handler: api.FindApiHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/api/batch_delete_api",
				Handler: api.DeleteApiListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/api/find_api_list",
				Handler: api.FindApiListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/api/details_list",
				Handler: api.FindApiDetailsListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/api/sync",
				Handler: api.SyncApiListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/api/clean",
				Handler: api.CleanApiListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/ai/chat",
				Handler: ai.ChatAIHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/ai/cos",
				Handler: ai.ChatCosHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/ai/chat/stream",
				Handler: ai.ChatStreamHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/ai/assistant",
				Handler: ai.ChatAssistantHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/ai/assistant/history",
				Handler: ai.ChatAssistantHistoryHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/admin/article",
				Handler: article.SaveArticleHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/admin/article/:id",
				Handler: article.DeleteArticleHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/admin/article/:id",
				Handler: article.FindArticleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/admin/article/list",
				Handler: article.FindArticleListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/admin/article/delete",
				Handler: article.UpdateArticleDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/admin/article/top",
				Handler: article.UpdateArticleTopHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/article/archives",
				Handler: article.FindArticleArchivesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/article/series",
				Handler: article.FindArticleSeriesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/article/:id/details",
				Handler: article.FindArticleDetailsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/article/list",
				Handler: article.FindArticleHomeListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/article/:id/like",
				Handler: article.LikeArticleHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/login",
				Handler: auth.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/logout",
				Handler: auth.LogoutHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/logoff",
				Handler: auth.LogoffHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/register",
				Handler: auth.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/register/email",
				Handler: auth.RegisterEmailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/forget/email",
				Handler: auth.ForgetPasswordEmailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/forget/reset_password",
				Handler: auth.ResetPasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/oauth/login",
				Handler: auth.OauthLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/oauth/authorize_url",
				Handler: auth.GetOauthAuthorizeUrlHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/captcha/email",
				Handler: captcha.SendCaptchaEmailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/captcha/image",
				Handler: captcha.GetCaptchaImageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/captcha/verify",
				Handler: captcha.VerifyCaptchaHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/comment",
				Handler: comment.CreateCommentHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/comment",
				Handler: comment.UpdateCommentHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/comment/:id",
				Handler: comment.DeleteCommentHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/comment/:id",
				Handler: comment.FindCommentHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/comment/batch_delete",
				Handler: comment.DeleteCommentListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/comment/list",
				Handler: comment.FindCommentListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/comment/details_list",
				Handler: comment.FindCommentDetailsListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/comment/list/back",
				Handler: comment.FindCommentBackListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/comment/:id/reply_list",
				Handler: comment.FindCommentReplyListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/comment/:id/like",
				Handler: comment.LikeCommentHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/friend_link/create_friend_link",
				Handler: friend_link.CreateFriendLinkHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/friend_link/update_friend_link",
				Handler: friend_link.UpdateFriendLinkHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/friend_link/delete_friend_link",
				Handler: friend_link.DeleteFriendLinkHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/friend_link/find_friend_link",
				Handler: friend_link.FindFriendLinkHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/friend_link/batch_delete_friend_link",
				Handler: friend_link.DeleteFriendLinkListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/friend_link/find_friend_link_list",
				Handler: friend_link.FindFriendLinkListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/menu/create_menu",
				Handler: menu.CreateMenuHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/menu/update_menu",
				Handler: menu.UpdateMenuHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/menu/delete_menu",
				Handler: menu.DeleteMenuHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/menu/find_menu",
				Handler: menu.FindMenuHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/menu/batch_delete_menu",
				Handler: menu.DeleteMenuListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/menu/find_menu_list",
				Handler: menu.FindMenuListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/menu/details_list",
				Handler: menu.FindMenuDetailsListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/menu/sync",
				Handler: menu.SyncMenuListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/menu/clean",
				Handler: menu.CleanMenuListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/operation_log/create_operation_log",
				Handler: operation_log.CreateOperationLogHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/operation_log/update_operation_log",
				Handler: operation_log.UpdateOperationLogHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/operation_log/delete_operation_log",
				Handler: operation_log.DeleteOperationLogHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/operation_log/find_operation_log",
				Handler: operation_log.FindOperationLogHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/operation_log/batch_delete_operation_log",
				Handler: operation_log.DeleteOperationLogListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/operation_log/find_operation_log_list",
				Handler: operation_log.FindOperationLogListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/page/create_page",
				Handler: page.CreatePageHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/page/update_page",
				Handler: page.UpdatePageHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/page/delete_page",
				Handler: page.DeletePageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/page/find_page",
				Handler: page.FindPageHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/page/batch_delete_page",
				Handler: page.DeletePageListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/page/find_page_list",
				Handler: page.FindPageListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/photo/create_photo",
				Handler: photo.CreatePhotoHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/photo/update_photo",
				Handler: photo.UpdatePhotoHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/photo/delete_photo",
				Handler: photo.DeletePhotoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/photo/find_photo",
				Handler: photo.FindPhotoHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/photo/batch_delete_photo",
				Handler: photo.DeletePhotoListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/photo/find_photo_list",
				Handler: photo.FindPhotoListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/photo_album/create_photo_album",
				Handler: photo_album.CreatePhotoAlbumHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/photo_album/update_photo_album",
				Handler: photo_album.UpdatePhotoAlbumHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/photo_album/delete_photo_album",
				Handler: photo_album.DeletePhotoAlbumHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/photo_album/find_photo_album",
				Handler: photo_album.FindPhotoAlbumHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/photo_album/batch_delete_photo_album",
				Handler: photo_album.DeletePhotoAlbumListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/photo_album/find_photo_album_list",
				Handler: photo_album.FindPhotoAlbumListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/photo_album/details_list",
				Handler: photo_album.FindPhotoAlbumDetailsListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/photo_album/:id/details",
				Handler: photo_album.FindPhotoAlbumDetailsHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/remark/create_remark",
				Handler: remark.CreateRemarkHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/remark/update_remark",
				Handler: remark.UpdateRemarkHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/remark/delete_remark",
				Handler: remark.DeleteRemarkHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/remark/find_remark",
				Handler: remark.FindRemarkHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/remark/batch_delete_remark",
				Handler: remark.DeleteRemarkListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/remark/find_remark_list",
				Handler: remark.FindRemarkListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/role/create_role",
				Handler: role.CreateRoleHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/role/update_role",
				Handler: role.UpdateRoleHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/role/delete_role",
				Handler: role.DeleteRoleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/role/find_role",
				Handler: role.FindRoleHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/role/batch_delete_role",
				Handler: role.DeleteRoleListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/role/find_role_list",
				Handler: role.FindRoleListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/role/details_list",
				Handler: role.FindRoleDetailsListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/role/update_menus",
				Handler: role.UpdateRoleMenusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/role/update_resources",
				Handler: role.UpdateRoleResourcesHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/tag/create_tag",
				Handler: tag.CreateTagHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/tag/update_tag",
				Handler: tag.UpdateTagHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/tag/delete_tag",
				Handler: tag.DeleteTagHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/tag/find_tag",
				Handler: tag.FindTagHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/tag/batch_delete_tag",
				Handler: tag.DeleteTagListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/tag/find_tag_list",
				Handler: tag.FindTagListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/tag/details_list",
				Handler: tag.FindTagDetailsListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/talk/create_talk",
				Handler: talk.CreateTalkHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/talk/update_talk",
				Handler: talk.UpdateTalkHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/talk/delete_talk",
				Handler: talk.DeleteTalkHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/talk/find_talk",
				Handler: talk.FindTalkHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/talk/batch_delete_talk",
				Handler: talk.DeleteTalkListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/talk/find_talk_list",
				Handler: talk.FindTalkListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/talk/details_list",
				Handler: talk.FindTalkDetailsListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/talk/:id/details",
				Handler: talk.FindTalkDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/talk/:id/like",
				Handler: talk.LikeTalkHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/upload/:label",
				Handler: upload.UploadFileHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/voice",
				Handler: upload.UploadVoiceHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/chat/records",
				Handler: website.FindChatRecordsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/about/me",
				Handler: website.GetAboutMeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/admin/about/me",
				Handler: website.UpdateAboutMeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/website/config",
				Handler: website.GetWebsiteConfigHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/admin/config",
				Handler: website.GetConfigHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/admin/config",
				Handler: website.UpdateConfigHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1",
				Handler: website.GetBlogHomeInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/admin",
				Handler: website.GetAdminHomeInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/admin/system/state",
				Handler: website.GetSystemStateHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/ws",
				Handler: websocket.WebSocketHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)
}
