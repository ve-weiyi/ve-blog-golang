// Code generated by goctl. DO NOT EDIT.
// Source: blog.proto

package rolerpc

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/server/zero/rpc/pb/blog"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Api           = blog.Api
	Article       = blog.Article
	BatchResult   = blog.BatchResult
	EmptyReq      = blog.EmptyReq
	EmptyResp     = blog.EmptyResp
	IdReq         = blog.IdReq
	IdsReq        = blog.IdsReq
	Menu          = blog.Menu
	PageCondition = blog.PageCondition
	PageLimit     = blog.PageLimit
	PageQuery     = blog.PageQuery
	PageResult    = blog.PageResult
	PageSort      = blog.PageSort
	PingReq       = blog.PingReq
	PingResp      = blog.PingResp
	Role          = blog.Role

	RoleRpc interface {
		CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
		UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
		DeleteRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error)
		FindRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Role, error)
		DeleteRoleList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResult, error)
		FindRoleList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageResult, error)
	}

	defaultRoleRpc struct {
		cli zrpc.Client
	}
)

func NewRoleRpc(cli zrpc.Client) RoleRpc {
	return &defaultRoleRpc{
		cli: cli,
	}
}

func (m *defaultRoleRpc) CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	client := blog.NewRoleRpcClient(m.cli.Conn())
	return client.CreateRole(ctx, in, opts...)
}

func (m *defaultRoleRpc) UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	client := blog.NewRoleRpcClient(m.cli.Conn())
	return client.UpdateRole(ctx, in, opts...)
}

func (m *defaultRoleRpc) DeleteRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := blog.NewRoleRpcClient(m.cli.Conn())
	return client.DeleteRole(ctx, in, opts...)
}

func (m *defaultRoleRpc) FindRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Role, error) {
	client := blog.NewRoleRpcClient(m.cli.Conn())
	return client.FindRole(ctx, in, opts...)
}

func (m *defaultRoleRpc) DeleteRoleList(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*BatchResult, error) {
	client := blog.NewRoleRpcClient(m.cli.Conn())
	return client.DeleteRoleList(ctx, in, opts...)
}

func (m *defaultRoleRpc) FindRoleList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageResult, error) {
	client := blog.NewRoleRpcClient(m.cli.Conn())
	return client.FindRoleList(ctx, in, opts...)
}
