// Code generated by goctl. DO NOT EDIT.
// Source: account.proto

package authrpc

import (
	"context"

	"github.com/ve-weiyi/ve-blog-golang/server/zero/rpc/pb/account"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchResult       = account.BatchResult
	EmptyReq          = account.EmptyReq
	EmptyResp         = account.EmptyResp
	IdReq             = account.IdReq
	IdsReq            = account.IdsReq
	LoginReq          = account.LoginReq
	LoginResp         = account.LoginResp
	OauthLoginReq     = account.OauthLoginReq
	OauthLoginUrlResp = account.OauthLoginUrlResp
	PageCondition     = account.PageCondition
	PageLimit         = account.PageLimit
	PageQuery         = account.PageQuery
	PageResult        = account.PageResult
	PageSort          = account.PageSort
	PingReq           = account.PingReq
	PingResp          = account.PingResp
	ResetPasswordReq  = account.ResetPasswordReq
	RoleDTO           = account.RoleDTO
	Token             = account.Token
	UserEmailReq      = account.UserEmailReq
	UserInfo          = account.UserInfo

	AuthRpc interface {
		// 登录
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		// 登出
		Logout(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 注销
		Logoff(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 注册
		Register(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 发送注册邮件
		RegisterEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 发送忘记密码邮件
		ForgetPasswordEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 重置密码
		ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// 第三方登录
		OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		// 获取授权地址
		GetOauthAuthorizeUrl(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthLoginUrlResp, error)
	}

	defaultAuthRpc struct {
		cli zrpc.Client
	}
)

func NewAuthRpc(cli zrpc.Client) AuthRpc {
	return &defaultAuthRpc{
		cli: cli,
	}
}

// 登录
func (m *defaultAuthRpc) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := account.NewAuthRpcClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// 登出
func (m *defaultAuthRpc) Logout(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := account.NewAuthRpcClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

// 注销
func (m *defaultAuthRpc) Logoff(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := account.NewAuthRpcClient(m.cli.Conn())
	return client.Logoff(ctx, in, opts...)
}

// 注册
func (m *defaultAuthRpc) Register(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := account.NewAuthRpcClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// 发送注册邮件
func (m *defaultAuthRpc) RegisterEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := account.NewAuthRpcClient(m.cli.Conn())
	return client.RegisterEmail(ctx, in, opts...)
}

// 发送忘记密码邮件
func (m *defaultAuthRpc) ForgetPasswordEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := account.NewAuthRpcClient(m.cli.Conn())
	return client.ForgetPasswordEmail(ctx, in, opts...)
}

// 重置密码
func (m *defaultAuthRpc) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := account.NewAuthRpcClient(m.cli.Conn())
	return client.ResetPassword(ctx, in, opts...)
}

// 第三方登录
func (m *defaultAuthRpc) OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := account.NewAuthRpcClient(m.cli.Conn())
	return client.OauthLogin(ctx, in, opts...)
}

// 获取授权地址
func (m *defaultAuthRpc) GetOauthAuthorizeUrl(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthLoginUrlResp, error) {
	client := account.NewAuthRpcClient(m.cli.Conn())
	return client.GetOauthAuthorizeUrl(ctx, in, opts...)
}
