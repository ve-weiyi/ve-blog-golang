// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: account.proto

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountRpcClient is the client API for AccountRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountRpcClient interface {
	// 连接检测
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
}

type accountRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountRpcClient(cc grpc.ClientConnInterface) AccountRpcClient {
	return &accountRpcClient{cc}
}

func (c *accountRpcClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/account.AccountRpc/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountRpcServer is the server API for AccountRpc service.
// All implementations must embed UnimplementedAccountRpcServer
// for forward compatibility
type AccountRpcServer interface {
	// 连接检测
	Ping(context.Context, *PingReq) (*PingResp, error)
	mustEmbedUnimplementedAccountRpcServer()
}

// UnimplementedAccountRpcServer must be embedded to have forward compatible implementations.
type UnimplementedAccountRpcServer struct {
}

func (UnimplementedAccountRpcServer) Ping(context.Context, *PingReq) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAccountRpcServer) mustEmbedUnimplementedAccountRpcServer() {}

// UnsafeAccountRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountRpcServer will
// result in compilation errors.
type UnsafeAccountRpcServer interface {
	mustEmbedUnimplementedAccountRpcServer()
}

func RegisterAccountRpcServer(s grpc.ServiceRegistrar, srv AccountRpcServer) {
	s.RegisterService(&AccountRpc_ServiceDesc, srv)
}

func _AccountRpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountRpc/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountRpc_ServiceDesc is the grpc.ServiceDesc for AccountRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountRpc",
	HandlerType: (*AccountRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _AccountRpc_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}

// AuthRpcClient is the client API for AuthRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthRpcClient interface {
	// 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 登出
	Logout(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 注销
	Logoff(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 注册
	Register(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 发送注册邮件
	RegisterEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 发送忘记密码邮件
	ForgetPasswordEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 重置密码
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 第三方登录
	OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 获取授权地址
	GetOauthAuthorizeUrl(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthLoginUrlResp, error)
}

type authRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthRpcClient(cc grpc.ClientConnInterface) AuthRpcClient {
	return &authRpcClient{cc}
}

func (c *authRpcClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/account.AuthRpc/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) Logout(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/account.AuthRpc/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) Logoff(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/account.AuthRpc/Logoff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) Register(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/account.AuthRpc/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) RegisterEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/account.AuthRpc/RegisterEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) ForgetPasswordEmail(ctx context.Context, in *UserEmailReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/account.AuthRpc/ForgetPasswordEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/account.AuthRpc/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/account.AuthRpc/OauthLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRpcClient) GetOauthAuthorizeUrl(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthLoginUrlResp, error) {
	out := new(OauthLoginUrlResp)
	err := c.cc.Invoke(ctx, "/account.AuthRpc/GetOauthAuthorizeUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthRpcServer is the server API for AuthRpc service.
// All implementations must embed UnimplementedAuthRpcServer
// for forward compatibility
type AuthRpcServer interface {
	// 登录
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// 登出
	Logout(context.Context, *EmptyReq) (*EmptyResp, error)
	// 注销
	Logoff(context.Context, *EmptyReq) (*EmptyResp, error)
	// 注册
	Register(context.Context, *LoginReq) (*EmptyResp, error)
	// 发送注册邮件
	RegisterEmail(context.Context, *UserEmailReq) (*EmptyResp, error)
	// 发送忘记密码邮件
	ForgetPasswordEmail(context.Context, *UserEmailReq) (*EmptyResp, error)
	// 重置密码
	ResetPassword(context.Context, *ResetPasswordReq) (*EmptyResp, error)
	// 第三方登录
	OauthLogin(context.Context, *OauthLoginReq) (*LoginResp, error)
	// 获取授权地址
	GetOauthAuthorizeUrl(context.Context, *OauthLoginReq) (*OauthLoginUrlResp, error)
	mustEmbedUnimplementedAuthRpcServer()
}

// UnimplementedAuthRpcServer must be embedded to have forward compatible implementations.
type UnimplementedAuthRpcServer struct {
}

func (UnimplementedAuthRpcServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthRpcServer) Logout(context.Context, *EmptyReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthRpcServer) Logoff(context.Context, *EmptyReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logoff not implemented")
}
func (UnimplementedAuthRpcServer) Register(context.Context, *LoginReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthRpcServer) RegisterEmail(context.Context, *UserEmailReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEmail not implemented")
}
func (UnimplementedAuthRpcServer) ForgetPasswordEmail(context.Context, *UserEmailReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgetPasswordEmail not implemented")
}
func (UnimplementedAuthRpcServer) ResetPassword(context.Context, *ResetPasswordReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedAuthRpcServer) OauthLogin(context.Context, *OauthLoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthLogin not implemented")
}
func (UnimplementedAuthRpcServer) GetOauthAuthorizeUrl(context.Context, *OauthLoginReq) (*OauthLoginUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthAuthorizeUrl not implemented")
}
func (UnimplementedAuthRpcServer) mustEmbedUnimplementedAuthRpcServer() {}

// UnsafeAuthRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthRpcServer will
// result in compilation errors.
type UnsafeAuthRpcServer interface {
	mustEmbedUnimplementedAuthRpcServer()
}

func RegisterAuthRpcServer(s grpc.ServiceRegistrar, srv AuthRpcServer) {
	s.RegisterService(&AuthRpc_ServiceDesc, srv)
}

func _AuthRpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AuthRpc/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AuthRpc/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).Logout(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_Logoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).Logoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AuthRpc/Logoff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).Logoff(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AuthRpc/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).Register(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_RegisterEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).RegisterEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AuthRpc/RegisterEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).RegisterEmail(ctx, req.(*UserEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_ForgetPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).ForgetPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AuthRpc/ForgetPasswordEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).ForgetPasswordEmail(ctx, req.(*UserEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AuthRpc/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_OauthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).OauthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AuthRpc/OauthLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).OauthLogin(ctx, req.(*OauthLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRpc_GetOauthAuthorizeUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRpcServer).GetOauthAuthorizeUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AuthRpc/GetOauthAuthorizeUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRpcServer).GetOauthAuthorizeUrl(ctx, req.(*OauthLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthRpc_ServiceDesc is the grpc.ServiceDesc for AuthRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.AuthRpc",
	HandlerType: (*AuthRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthRpc_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthRpc_Logout_Handler,
		},
		{
			MethodName: "Logoff",
			Handler:    _AuthRpc_Logoff_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AuthRpc_Register_Handler,
		},
		{
			MethodName: "RegisterEmail",
			Handler:    _AuthRpc_RegisterEmail_Handler,
		},
		{
			MethodName: "ForgetPasswordEmail",
			Handler:    _AuthRpc_ForgetPasswordEmail_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _AuthRpc_ResetPassword_Handler,
		},
		{
			MethodName: "OauthLogin",
			Handler:    _AuthRpc_OauthLogin_Handler,
		},
		{
			MethodName: "GetOauthAuthorizeUrl",
			Handler:    _AuthRpc_GetOauthAuthorizeUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
